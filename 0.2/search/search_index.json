{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAgency","text":""},{"location":"release/","title":"Release Notes","text":"","boost":2},{"location":"release/#v020rc0","title":"v0.2.0rc0","text":"","boost":2},{"location":"release/#whats-changed","title":"What's Changed","text":"<ul> <li>Update Release Notes for v0.1.0 by @airt-release-notes-updater in #213</li> <li>Update docs by @rjambrecic in #214</li> <li>Apply formatting to docs_src by @kumaranvpl in #217</li> <li>Suggested function call and function call execution in Mesop by @davorinrusevljan in #216</li> <li>Raise mesop typer error for python versions below 3.10 by @kumaranvpl in #232</li> <li>Support multiple security schemes in OpenAPI Client by @kumaranvpl in #235</li> <li>Update package versions by @kumaranvpl in #237</li> <li>Add tooltip to fields by @harishmohanraj in #233</li> <li>Update twitter link and add an example by @davorrunje in #243</li> <li>Restrict FLAML version to fix test failure by @kumaranvpl in #248</li> <li>Fix failing example by @kumaranvpl in #249</li> <li>Fix readme example by @harishmohanraj in #254</li> <li>Make devcontainer work in codespace by @harishmohanraj in #251</li> <li>Auto generate cli docs by @rjambrecic in #255</li> <li>Update packages by @davorrunje in #261</li> <li>Mesop UI improvements by @davorinrusevljan in #241</li> <li>Add examples directory to linter by @davorrunje in #264</li> <li>Fixed Together.ai model string by @davorrunje in #267</li> <li>CI simplification by @davorrunje in #268</li> <li>Fix CI bug by @davorrunje in #269</li> <li>Simplify CI tests by @davorrunje in #270</li> <li>Fix Together AI model dict by @davorrunje in #271</li> <li>Mesop tests added by @davorrunje in #272</li> <li>Fix Mesop tests by @davorrunje in #273</li> <li>Added docs_src tests by @davorrunje in #274</li> <li>Add some tests by @davorrunje in #275</li> <li>Fix OpenAPI client when Path variables contains upper case by @rjambrecic in #265</li> <li>Add tests by @davorrunje in #277</li> <li>Move WebSurfer Autogen code out of the studio module by @harishmohanraj in #253</li> <li>Polish getting started docs by @harishmohanraj in #278</li> <li>Move studio files into studio project and clean up deps devcontainers etc by @harishmohanraj in #279</li> <li>Replaces gpt-4o with gpt-40-mini in all OpenAI tests by @davorrunje in #282</li> <li>Support running Mesop based apps with WSGI servers by @davorrunje in #283</li> <li>Bump version to 0.2.0rc0 by @davorrunje in #285</li> <li>Giphy and Websurfer Tutorial by @rjambrecic in #284</li> </ul> <p>Full Changelog: #v0.1.0...v0.2.0rc0</p>","boost":2},{"location":"release/#v010","title":"v0.1.0","text":"","boost":2},{"location":"release/#whats-changed_1","title":"What's Changed","text":"<ul> <li>Set concurrency in workflows to run one workflow at a time for one branch by @kumaranvpl in #169</li> <li>Unique property name by @harishmohanraj in #165</li> <li>Update GA property id by @harishmohanraj in #177</li> <li>Add user-proxy messages by @davorrunje in #174</li> <li>Add docs for using external API with security by @kumaranvpl in #175</li> <li>Makes AutoGen message parsing work with and without colored output by @davorrunje in #178</li> <li>Rename OpenAPI related classes by @davorrunje in #180</li> <li>Past chats by @davorinrusevljan in #181</li> <li>Update tests to support both pydantic v2.8 and v2.9 by @kumaranvpl in #185</li> <li>Refactoring submodules by @davorrunje in #188</li> <li>Update test to remove duplicates by @kumaranvpl in #189</li> <li>Mesop app created in the same process by @davorrunje in #193</li> <li>Add user guide by @davorrunje in #179</li> <li>Add an immutable_after_creation metadata field to the schema by @harishmohanraj in #184</li> <li>Fix broken links in docs by @davorrunje in #196</li> <li>Fix broken links by @davorrunje in #197</li> <li>Adds multiple choice message handling to MesopUI by @davorrunje in #198</li> <li>Fix parsing error in Autogen CurrentMessage by @davorrunje in #201</li> <li>Refactor workflow agent api by @kumaranvpl in #192</li> <li>Mesop: multiple choice with checkboxes by @davorinrusevljan in #202</li> <li>Update branding colors by @harishmohanraj in #203</li> <li>Bump version to v0.1.0rc0 by @davorrunje in #204</li> <li>Raise error when trying to import mesop below py3.11 by @kumaranvpl in #209</li> <li>Fix minor docs issues by @kumaranvpl in #210</li> <li>Update CLI docs by @harishmohanraj in #211</li> </ul>","boost":2},{"location":"release/#new-contributors","title":"New Contributors","text":"<ul> <li>@airt-release-notes-updater made their first contribution in #173</li> </ul> <p>Full Changelog: #v0.0.1...v0.1.0</p>","boost":2},{"location":"release/#v001","title":"v0.0.1","text":"","boost":2},{"location":"release/#whats-changed_2","title":"What's Changed","text":"<ul> <li>Change social icon and update release notes by @davorrunje in #131</li> <li>Add LFS to Deploy docs workflow by @davorrunje in #132</li> <li>Description added to project by @davorrunje in #133</li> <li>Create Tutorial page by @rjambrecic in #154</li> <li>Minor updates after the v.0.0.0 release by @davorrunje in #157</li> <li>Fix for human mode set to value other than NEVER in user proxy by @davorrunje in #158</li> <li>Chore: fix spelling by @davorrunje in #160</li> <li>Move code to docs src by @rjambrecic in #159</li> <li>Publish coverage to smokeshow when pushed to main branch by @kumaranvpl in #161</li> <li>Bump version to 0.0.1rc0 by @davorrunje in #162</li> <li>Enable codecoverage badge by @kumaranvpl in #163</li> <li>PyPi dev status classifier changed from alpha to beta by @davorrunje in #164</li> <li>Bump version to 0.0.1 by @davorrunje in #167</li> </ul> <p>Full Changelog: #v0.0.0...v0.0.1</p>","boost":2},{"location":"release/#v000","title":"v0.0.0","text":"","boost":2},{"location":"release/#initial-release","title":"Initial release","text":"<p>FastAgency enables developers to quickly build testing or production-grade chat applications based on multi-agent workflow. This initial release supports AutoGen runtime for agentic workflows and simple console and Mesop applications.</p>","boost":2},{"location":"release/#new-contributors_1","title":"New Contributors","text":"<ul> <li>@davorrunje made their first contribution in https://github.com/airtai/fastagency/pull/2</li> <li>@kumaranvpl made their first contribution in https://github.com/airtai/fastagency/pull/3</li> <li>@harishmohanraj made their first contribution in https://github.com/airtai/fastagency/pull/66</li> <li>@rjambrecic made their first contribution in https://github.com/airtai/fastagency/pull/128</li> <li>@davorinrusevljan made their first contribution in https://github.com/airtai/fastagency/pull/129</li> </ul> <p>Full Changelog: https://github.com/airtai/fastagency/commits/v0.0.0</p>","boost":2},{"location":"api/fastagency/FastAgency/","title":"FastAgency","text":"","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency","title":"fastagency.FastAgency","text":"<pre><code>FastAgency(\n    wf: Workflows,\n    ui: UI,\n    *,\n    title: Optional[str] = None,\n    description: Optional[str] = None\n)\n</code></pre> <p>Initialize the FastAgency object.</p> PARAMETER DESCRIPTION <code>wf</code> <p>The workflows object to use</p> <p> TYPE: <code>Workflows</code> </p> <code>ui</code> <p>The UI object to use</p> <p> TYPE: <code>UI</code> </p> <code>title</code> <p>The title of the FastAgency. If None, the default string will be used. Defaults to None.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>The description of the FastAgency. If None, the default string will be used. Defaults to None.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/app.py</code> <pre><code>def __init__(\n    self,\n    wf: Workflows,\n    ui: UI,\n    *,\n    title: Optional[str] = None,\n    description: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Initialize the FastAgency object.\n\n    Args:\n        wf (Workflows): The workflows object to use\n        ui (UI): The UI object to use\n        title (Optional[str], optional): The title of the FastAgency. If None, the default string will be used. Defaults to None.\n        description (Optional[str], optional): The description of the FastAgency. If None, the default string will be used. Defaults to None.\n    \"\"\"\n    self._title = title or \"FastAgency application\"\n    default_description = \"FastAgency application\"\n\n    if len(wf.names) == 0:\n        logger.warning(f\"No workflows found in {wf}\")\n        default_description += \" - No workflows found\"\n    else:\n        default_description += \" - Workflows:\"\n        for name in wf.names:\n            default_description += f\" - {name}: {wf.get_description(name)}\"\n    self._description = description or default_description\n\n    logger.info(f\"Initializing FastAgency {self} with workflows: {wf} and UI: {ui}\")\n    self._wf = wf\n    self._ui = ui\n    logger.info(f\"Initialized FastAgency: {self}\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency.description","title":"description  <code>property</code>","text":"<pre><code>description: str\n</code></pre> <p>Return the description of the FastAgency.</p>","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency.title","title":"title  <code>property</code>","text":"<pre><code>title: str\n</code></pre> <p>Return the title of the FastAgency.</p>","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency.ui","title":"ui  <code>property</code>","text":"<pre><code>ui: UI\n</code></pre> <p>Return the UI object.</p>","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency.wf","title":"wf  <code>property</code>","text":"<pre><code>wf: Workflows\n</code></pre> <p>Return the workflows object.</p>","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency.create","title":"create","text":"<pre><code>create(import_string: str) -&gt; Generator[None, None, None]\n</code></pre> <p>Create the FastAgency.</p> Source code in <code>fastagency/app.py</code> <pre><code>@contextmanager\ndef create(self, import_string: str) -&gt; Generator[None, None, None]:\n    \"\"\"Create the FastAgency.\"\"\"\n    with self._ui.create(app=self, import_string=import_string):\n        yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency.handle_asgi","title":"handle_asgi  <code>async</code>","text":"<pre><code>handle_asgi(\n    scope: dict[str, Any],\n    receive: Callable[[dict[str, Any]], Awaitable[None]],\n    send: Callable[[dict[str, Any]], Awaitable[None]],\n) -&gt; None\n</code></pre> Source code in <code>fastagency/app.py</code> <pre><code>async def handle_asgi(\n    self,\n    scope: dict[str, Any],\n    receive: Callable[[dict[str, Any]], Awaitable[None]],\n    send: Callable[[dict[str, Any]], Awaitable[None]],\n) -&gt; None:\n    if isinstance(self.ui, ASGI):\n        return await self.ui.handle_asgi(self, scope, receive, send)\n    else:\n        raise FastAgencyASGINotImplementedError(\n            \"ASGI interface not supported for UI: {self.ui}\"\n        )\n</code></pre>","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency.handle_wsgi","title":"handle_wsgi","text":"<pre><code>handle_wsgi(\n    environ: dict[str, Any],\n    start_response: Callable[..., Any],\n) -&gt; list[bytes]\n</code></pre> Source code in <code>fastagency/app.py</code> <pre><code>def handle_wsgi(\n    self, environ: dict[str, Any], start_response: Callable[..., Any]\n) -&gt; list[bytes]:\n    if isinstance(self.ui, WSGI):\n        return self.ui.handle_wsgi(self, environ, start_response)\n    else:\n        raise FastAgencyWSGINotImplementedError(\n            \"WSGI interface not supported for UI: {self.ui}\"\n        )\n</code></pre>","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency.start","title":"start","text":"<pre><code>start(\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False,\n) -&gt; None\n</code></pre> <p>Start the FastAgency.</p> Source code in <code>fastagency/app.py</code> <pre><code>def start(\n    self,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False,\n) -&gt; None:\n    \"\"\"Start the FastAgency.\"\"\"\n    self.ui.start(\n        app=self,\n        import_string=import_string,\n        name=name,\n        initial_message=initial_message,\n        single_run=single_run,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/","title":"FunctionCallExecution","text":"","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution","title":"fastagency.FunctionCallExecution  <code>dataclass</code>","text":"<pre><code>FunctionCallExecution(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    function_name: Optional[str] = None,\n    call_id: Optional[str] = None,\n    retval: Any = None,\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.call_id","title":"call_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>call_id: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.function_name","title":"function_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function_name: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.retval","title":"retval  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>retval: Any = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/IOMessage/","title":"IOMessage","text":"","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage","title":"fastagency.IOMessage  <code>dataclass</code>","text":"<pre><code>IOMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p>","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/","title":"MultipleChoice","text":"","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice","title":"fastagency.MultipleChoice  <code>dataclass</code>","text":"<pre><code>MultipleChoice(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    prompt: Optional[str] = None,\n    choices: list[str] = list(),\n    default: Optional[str] = None,\n    single: bool = True,\n)\n</code></pre> <p>               Bases: <code>AskingMessage</code></p>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.choices","title":"choices  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>choices: list[str] = field(default_factory=list)\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.prompt","title":"prompt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.single","title":"single  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>single: bool = True\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/","title":"SuggestedFunctionCall","text":"","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall","title":"fastagency.SuggestedFunctionCall  <code>dataclass</code>","text":"<pre><code>SuggestedFunctionCall(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    function_name: Optional[str] = None,\n    call_id: Optional[str] = None,\n    arguments: dict[str, Any] = dict(),\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.arguments","title":"arguments  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>arguments: dict[str, Any] = field(default_factory=dict)\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.call_id","title":"call_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>call_id: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.function_name","title":"function_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function_name: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/","title":"TextInput","text":"","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput","title":"fastagency.TextInput  <code>dataclass</code>","text":"<pre><code>TextInput(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    prompt: Optional[str] = None,\n    suggestions: list[str] = list(),\n    password: bool = False,\n)\n</code></pre> <p>               Bases: <code>AskingMessage</code></p>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.password","title":"password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.prompt","title":"prompt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.suggestions","title":"suggestions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>suggestions: list[str] = field(default_factory=list)\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/","title":"TextMessage","text":"","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage","title":"fastagency.TextMessage  <code>dataclass</code>","text":"<pre><code>TextMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    body: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.body","title":"body  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>body: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/UI/","title":"UI","text":"","boost":0.5},{"location":"api/fastagency/UI/#fastagency.UI","title":"fastagency.UI","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/UI/#fastagency.UI.create","title":"create","text":"<pre><code>create(app: Runnable, import_string: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@contextmanager\ndef create(self, app: \"Runnable\", import_string: str) -&gt; Iterator[None]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/UI/#fastagency.UI.create_subconversation","title":"create_subconversation","text":"<pre><code>create_subconversation() -&gt; UI\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def create_subconversation(self) -&gt; \"UI\": ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/UI/#fastagency.UI.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/UI/#fastagency.UI.start","title":"start","text":"<pre><code>start(\n    *,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def start(\n    self,\n    *,\n    app: \"Runnable\",\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False,\n) -&gt; None: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/Workflows/","title":"Workflows","text":"","boost":0.5},{"location":"api/fastagency/Workflows/#fastagency.Workflows","title":"fastagency.Workflows","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/Workflows/#fastagency.Workflows.names","title":"names  <code>property</code>","text":"<pre><code>names: list[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/Workflows/#fastagency.Workflows.get_description","title":"get_description","text":"<pre><code>get_description(name: str) -&gt; str\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def get_description(self, name: str) -&gt; str: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/Workflows/#fastagency.Workflows.register","title":"register","text":"<pre><code>register(\n    name: str, description: str\n) -&gt; Callable[[Workflow], Workflow]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def register(\n    self, name: str, description: str\n) -&gt; Callable[[Workflow], Workflow]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/Workflows/#fastagency.Workflows.register_api","title":"register_api","text":"<pre><code>register_api(\n    api: OpenAPI,\n    callers: Union[Agent, Iterable[Agent]],\n    executors: Union[Agent, Iterable[Agent]],\n    functions: Optional[\n        Union[\n            str,\n            Iterable[\n                Union[str, Mapping[str, Mapping[str, str]]]\n            ],\n        ]\n    ] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def register_api(\n    self,\n    api: \"OpenAPI\",\n    callers: Union[Agent, Iterable[Agent]],\n    executors: Union[Agent, Iterable[Agent]],\n    functions: Optional[\n        Union[str, Iterable[Union[str, Mapping[str, Mapping[str, str]]]]]\n    ] = None,\n) -&gt; None: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/Workflows/#fastagency.Workflows.run","title":"run","text":"<pre><code>run(\n    name: str, session_id: str, ui: UI, initial_message: str\n) -&gt; str\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def run(self, name: str, session_id: str, ui: UI, initial_message: str) -&gt; str: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/","title":"OpenAPI","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI","title":"fastagency.api.openapi.OpenAPI","text":"<pre><code>OpenAPI(\n    servers: list[dict[str, Any]],\n    title: Optional[str] = None,\n    **kwargs: Any\n)\n</code></pre> <p>Proxy class to generate client from OpenAPI schema.</p> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def __init__(\n    self, servers: list[dict[str, Any]], title: Optional[str] = None, **kwargs: Any\n) -&gt; None:\n    \"\"\"Proxy class to generate client from OpenAPI schema.\"\"\"\n    self.servers = servers\n    self.title = title\n    self.kwargs = kwargs\n    self.registered_funcs: list[Callable[..., Any]] = []\n    self.globals: dict[str, Any] = {}\n\n    self.security: dict[str, list[BaseSecurity]] = {}\n    self.security_params: dict[Optional[str], BaseSecurityParameters] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.globals","title":"globals  <code>instance-attribute</code>","text":"<pre><code>globals: dict[str, Any] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.kwargs","title":"kwargs  <code>instance-attribute</code>","text":"<pre><code>kwargs = kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.registered_funcs","title":"registered_funcs  <code>instance-attribute</code>","text":"<pre><code>registered_funcs: list[Callable[..., Any]] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.security","title":"security  <code>instance-attribute</code>","text":"<pre><code>security: dict[str, list[BaseSecurity]] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.security_params","title":"security_params  <code>instance-attribute</code>","text":"<pre><code>security_params: dict[\n    Optional[str], BaseSecurityParameters\n] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.servers","title":"servers  <code>instance-attribute</code>","text":"<pre><code>servers = servers\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title = title\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(\n    openapi_json: Optional[str] = None,\n    openapi_url: Optional[str] = None,\n) -&gt; OpenAPI\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>@classmethod\ndef create(\n    cls, openapi_json: Optional[str] = None, openapi_url: Optional[str] = None\n) -&gt; \"OpenAPI\":\n    if openapi_json is None and openapi_url is None:\n        raise ValueError(\"Either openapi_json or openapi_url should be provided\")\n\n    if openapi_json is None and openapi_url is not None:\n        with requests.get(openapi_url, timeout=10) as response:\n            response.raise_for_status()\n            openapi_json = response.text\n\n    with tempfile.TemporaryDirectory() as temp_dir:\n        td = Path(temp_dir)\n        suffix = td.name\n\n        main_name = cls.generate_code(\n            input_text=openapi_json,  # type: ignore [arg-type]\n            output_dir=td,\n        )\n        # add td to sys.path\n        try:\n            sys.path.append(str(td))\n            main = importlib.import_module(main_name, package=td.name)  # nosemgrep\n        finally:\n            sys.path.remove(str(td))\n\n        client: OpenAPI = main.app  # type: ignore [attr-defined]\n        client.set_globals(main, suffix=suffix)\n\n        return client\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.delete","title":"delete","text":"<pre><code>delete(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def delete(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"delete\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.generate_code","title":"generate_code  <code>classmethod</code>","text":"<pre><code>generate_code(\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n    custom_visitors: Optional[list[Path]] = None,\n) -&gt; str\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>@classmethod\ndef generate_code(\n    cls,\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n    custom_visitors: Optional[list[Path]] = None,\n) -&gt; str:\n    if custom_visitors is None:\n        custom_visitors = []\n    custom_visitors.append(Path(__file__).parent / \"security_schema_visitor.py\")\n\n    with patch_get_parameter_type():\n        generate_code(\n            input_name=\"openapi.json\",\n            input_text=input_text,\n            encoding=\"utf-8\",\n            output_dir=output_dir,\n            template_dir=cls._get_template_dir(),\n            disable_timestamp=disable_timestamp,\n            custom_visitors=custom_visitors,\n        )\n        # Use unique file name for main.py\n        main_name = f\"main_{output_dir.name}\"\n        main_path = output_dir / f\"{main_name}.py\"\n        shutil.move(output_dir / \"main.py\", main_path)\n\n        # Change \"from models import\" to \"from models_unique_name import\"\n        with open(main_path) as f:  # noqa: PTH123\n            main_py_code = f.read()\n        main_py_code = main_py_code.replace(\n            \"from .models import\", f\"from models_{output_dir.name} import\"\n        )\n        with open(main_path, \"w\") as f:  # noqa: PTH123\n            f.write(main_py_code)\n\n        # Use unique file name for models.py\n        models_name = f\"models_{output_dir.name}\"\n        models_path = output_dir / f\"{models_name}.py\"\n        shutil.move(output_dir / \"models.py\", models_path)\n\n        return main_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.get","title":"get","text":"<pre><code>get(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def get(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"get\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.get_functions","title":"get_functions","text":"<pre><code>get_functions() -&gt; list[str]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def get_functions(self) -&gt; list[str]:\n    return [f.__name__ for f in self.registered_funcs]\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.post","title":"post","text":"<pre><code>post(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def post(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"post\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.put","title":"put","text":"<pre><code>put(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def put(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"put\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.set_globals","title":"set_globals","text":"<pre><code>set_globals(main: ModuleType, suffix: str) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def set_globals(self, main: ModuleType, suffix: str) -&gt; None:\n    xs = {k: v for k, v in main.__dict__.items() if not k.startswith(\"__\")}\n    self.globals = {\n        k: v\n        for k, v in xs.items()\n        if hasattr(v, \"__module__\")\n        and v.__module__ in [f\"models_{suffix}\", \"typing\"]\n    }\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.set_security_params","title":"set_security_params","text":"<pre><code>set_security_params(\n    security_params: BaseSecurityParameters,\n    name: Optional[str] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def set_security_params(\n    self, security_params: BaseSecurityParameters, name: Optional[str] = None\n) -&gt; None:\n    if name is not None:\n        security = self.security.get(name)\n        if security is None:\n            raise ValueError(f\"Security is not set for '{name}'\")\n\n        for match_security in security:\n            if match_security.accept(security_params):\n                break\n        else:\n            raise ValueError(\n                f\"Security parameters {security_params} do not match security {security}\"\n            )\n\n    self.security_params[name] = security_params\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/","title":"OpenAPI","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI","title":"fastagency.api.openapi.client.OpenAPI","text":"<pre><code>OpenAPI(\n    servers: list[dict[str, Any]],\n    title: Optional[str] = None,\n    **kwargs: Any\n)\n</code></pre> <p>Proxy class to generate client from OpenAPI schema.</p> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def __init__(\n    self, servers: list[dict[str, Any]], title: Optional[str] = None, **kwargs: Any\n) -&gt; None:\n    \"\"\"Proxy class to generate client from OpenAPI schema.\"\"\"\n    self.servers = servers\n    self.title = title\n    self.kwargs = kwargs\n    self.registered_funcs: list[Callable[..., Any]] = []\n    self.globals: dict[str, Any] = {}\n\n    self.security: dict[str, list[BaseSecurity]] = {}\n    self.security_params: dict[Optional[str], BaseSecurityParameters] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.globals","title":"globals  <code>instance-attribute</code>","text":"<pre><code>globals: dict[str, Any] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.kwargs","title":"kwargs  <code>instance-attribute</code>","text":"<pre><code>kwargs = kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.registered_funcs","title":"registered_funcs  <code>instance-attribute</code>","text":"<pre><code>registered_funcs: list[Callable[..., Any]] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.security","title":"security  <code>instance-attribute</code>","text":"<pre><code>security: dict[str, list[BaseSecurity]] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.security_params","title":"security_params  <code>instance-attribute</code>","text":"<pre><code>security_params: dict[\n    Optional[str], BaseSecurityParameters\n] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.servers","title":"servers  <code>instance-attribute</code>","text":"<pre><code>servers = servers\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title = title\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(\n    openapi_json: Optional[str] = None,\n    openapi_url: Optional[str] = None,\n) -&gt; OpenAPI\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>@classmethod\ndef create(\n    cls, openapi_json: Optional[str] = None, openapi_url: Optional[str] = None\n) -&gt; \"OpenAPI\":\n    if openapi_json is None and openapi_url is None:\n        raise ValueError(\"Either openapi_json or openapi_url should be provided\")\n\n    if openapi_json is None and openapi_url is not None:\n        with requests.get(openapi_url, timeout=10) as response:\n            response.raise_for_status()\n            openapi_json = response.text\n\n    with tempfile.TemporaryDirectory() as temp_dir:\n        td = Path(temp_dir)\n        suffix = td.name\n\n        main_name = cls.generate_code(\n            input_text=openapi_json,  # type: ignore [arg-type]\n            output_dir=td,\n        )\n        # add td to sys.path\n        try:\n            sys.path.append(str(td))\n            main = importlib.import_module(main_name, package=td.name)  # nosemgrep\n        finally:\n            sys.path.remove(str(td))\n\n        client: OpenAPI = main.app  # type: ignore [attr-defined]\n        client.set_globals(main, suffix=suffix)\n\n        return client\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.delete","title":"delete","text":"<pre><code>delete(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def delete(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"delete\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.generate_code","title":"generate_code  <code>classmethod</code>","text":"<pre><code>generate_code(\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n    custom_visitors: Optional[list[Path]] = None,\n) -&gt; str\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>@classmethod\ndef generate_code(\n    cls,\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n    custom_visitors: Optional[list[Path]] = None,\n) -&gt; str:\n    if custom_visitors is None:\n        custom_visitors = []\n    custom_visitors.append(Path(__file__).parent / \"security_schema_visitor.py\")\n\n    with patch_get_parameter_type():\n        generate_code(\n            input_name=\"openapi.json\",\n            input_text=input_text,\n            encoding=\"utf-8\",\n            output_dir=output_dir,\n            template_dir=cls._get_template_dir(),\n            disable_timestamp=disable_timestamp,\n            custom_visitors=custom_visitors,\n        )\n        # Use unique file name for main.py\n        main_name = f\"main_{output_dir.name}\"\n        main_path = output_dir / f\"{main_name}.py\"\n        shutil.move(output_dir / \"main.py\", main_path)\n\n        # Change \"from models import\" to \"from models_unique_name import\"\n        with open(main_path) as f:  # noqa: PTH123\n            main_py_code = f.read()\n        main_py_code = main_py_code.replace(\n            \"from .models import\", f\"from models_{output_dir.name} import\"\n        )\n        with open(main_path, \"w\") as f:  # noqa: PTH123\n            f.write(main_py_code)\n\n        # Use unique file name for models.py\n        models_name = f\"models_{output_dir.name}\"\n        models_path = output_dir / f\"{models_name}.py\"\n        shutil.move(output_dir / \"models.py\", models_path)\n\n        return main_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.get","title":"get","text":"<pre><code>get(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def get(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"get\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.get_functions","title":"get_functions","text":"<pre><code>get_functions() -&gt; list[str]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def get_functions(self) -&gt; list[str]:\n    return [f.__name__ for f in self.registered_funcs]\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.post","title":"post","text":"<pre><code>post(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def post(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"post\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.put","title":"put","text":"<pre><code>put(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def put(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"put\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.set_globals","title":"set_globals","text":"<pre><code>set_globals(main: ModuleType, suffix: str) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def set_globals(self, main: ModuleType, suffix: str) -&gt; None:\n    xs = {k: v for k, v in main.__dict__.items() if not k.startswith(\"__\")}\n    self.globals = {\n        k: v\n        for k, v in xs.items()\n        if hasattr(v, \"__module__\")\n        and v.__module__ in [f\"models_{suffix}\", \"typing\"]\n    }\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.set_security_params","title":"set_security_params","text":"<pre><code>set_security_params(\n    security_params: BaseSecurityParameters,\n    name: Optional[str] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def set_security_params(\n    self, security_params: BaseSecurityParameters, name: Optional[str] = None\n) -&gt; None:\n    if name is not None:\n        security = self.security.get(name)\n        if security is None:\n            raise ValueError(f\"Security is not set for '{name}'\")\n\n        for match_security in security:\n            if match_security.accept(security_params):\n                break\n        else:\n            raise ValueError(\n                f\"Security parameters {security_params} do not match security {security}\"\n            )\n\n    self.security_params[name] = security_params\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/add_to_globals/","title":"add_to_globals","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/client/add_to_globals/#fastagency.api.openapi.client.add_to_globals","title":"fastagency.api.openapi.client.add_to_globals","text":"<pre><code>add_to_globals(\n    new_globals: dict[str, Any]\n) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>@contextmanager\ndef add_to_globals(new_globals: dict[str, Any]) -&gt; Iterator[None]:\n    old_globals: dict[str, Any] = {}\n    try:\n        for key, value in new_globals.items():\n            if key in globals():\n                old_globals[key] = globals()[key]\n            globals()[key] = value\n        yield\n    finally:\n        for key, value in old_globals.items():\n            globals()[key] = value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/fastapi_code_generator_helpers/ArgumentWithDescription/","title":"ArgumentWithDescription","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/fastapi_code_generator_helpers/ArgumentWithDescription/#fastagency.api.openapi.fastapi_code_generator_helpers.ArgumentWithDescription","title":"fastagency.api.openapi.fastapi_code_generator_helpers.ArgumentWithDescription","text":"<p>               Bases: <code>Argument</code></p>","boost":0.5},{"location":"api/fastagency/api/openapi/fastapi_code_generator_helpers/ArgumentWithDescription/#fastagency.api.openapi.fastapi_code_generator_helpers.ArgumentWithDescription.argument","title":"argument  <code>cached</code> <code>property</code>","text":"<pre><code>argument: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/fastapi_code_generator_helpers/ArgumentWithDescription/#fastagency.api.openapi.fastapi_code_generator_helpers.ArgumentWithDescription.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/fastapi_code_generator_helpers/patch_get_parameter_type/","title":"patch_get_parameter_type","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/fastapi_code_generator_helpers/patch_get_parameter_type/#fastagency.api.openapi.fastapi_code_generator_helpers.patch_get_parameter_type","title":"fastagency.api.openapi.fastapi_code_generator_helpers.patch_get_parameter_type","text":"<pre><code>patch_get_parameter_type() -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/api/openapi/fastapi_code_generator_helpers.py</code> <pre><code>@contextmanager\ndef patch_get_parameter_type() -&gt; Iterator[None]:\n    original_get_parameter_type = OpenAPIParser.get_parameter_type\n\n    def get_parameter_type(\n        self: OpenAPIParser,\n        parameters: Union[ReferenceObject, ParameterObject],\n        snake_case: bool,\n        path: list[str],\n    ) -&gt; Optional[Argument]:\n        # get the original argument\n        argument = original_get_parameter_type(self, parameters, snake_case, path)\n\n        # add description to the argument\n        parameters = self.resolve_object(parameters, ParameterObject)\n        argument_with_description = ArgumentWithDescription(\n            description=parameters.description, **argument.model_dump()\n        )\n        return argument_with_description\n\n    OpenAPIParser.get_parameter_type = get_parameter_type\n\n    try:\n        yield\n    finally:\n        OpenAPIParser.get_parameter_type = original_get_parameter_type\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/","title":"APIKeyCookie","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie","title":"fastagency.api.openapi.security.APIKeyCookie","text":"<p>               Bases: <code>BaseSecurity</code></p> <p>API Key Cookie security class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.in_value","title":"in_value  <code>class-attribute</code>","text":"<pre><code>in_value: Literal['cookie'] = 'cookie'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.type","title":"type  <code>class-attribute</code>","text":"<pre><code>type: Literal['apiKey'] = 'apiKey'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.Parameters","title":"Parameters","text":"<p>               Bases: <code>BaseModel</code></p> <p>API Key Cookie security parameters class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.Parameters.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.Parameters.apply","title":"apply","text":"<pre><code>apply(\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def apply(\n    self,\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None:\n    api_key_cookie: APIKeyCookie = security  # type: ignore[assignment]\n\n    if \"cookies\" not in body_dict:\n        body_dict[\"cookies\"] = {}\n\n    body_dict[\"cookies\"][api_key_cookie.name] = self.value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.Parameters.get_security_class","title":"get_security_class","text":"<pre><code>get_security_class() -&gt; type[BaseSecurity]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def get_security_class(self) -&gt; type[BaseSecurity]:\n    return APIKeyCookie\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.accept","title":"accept","text":"<pre><code>accept(security_params: BaseSecurityParameters) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def accept(self, security_params: \"BaseSecurityParameters\") -&gt; bool:\n    return isinstance(self, security_params.get_security_class())\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.get_security_class","title":"get_security_class  <code>classmethod</code>","text":"<pre><code>get_security_class(\n    type: str, in_value: str\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef get_security_class(cls, type: str, in_value: str) -&gt; Optional[str]:\n    sub_classes = cls.__subclasses__()\n\n    for sub_class in sub_classes:\n        if sub_class.is_supported(type, in_value):\n            return sub_class.__name__\n    else:\n        logger.error(\n            f\"Unsupported type '{type}' and in_value '{in_value}' combination\"\n        )\n        return None\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.is_supported","title":"is_supported  <code>classmethod</code>","text":"<pre><code>is_supported(type: str, in_value: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef is_supported(cls, type: str, in_value: str) -&gt; bool:\n    return type == cls.type and in_value == cls.in_value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/","title":"APIKeyHeader","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader","title":"fastagency.api.openapi.security.APIKeyHeader","text":"<p>               Bases: <code>BaseSecurity</code></p> <p>API Key Header security class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.in_value","title":"in_value  <code>class-attribute</code>","text":"<pre><code>in_value: Literal['header'] = 'header'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.type","title":"type  <code>class-attribute</code>","text":"<pre><code>type: Literal['apiKey'] = 'apiKey'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.Parameters","title":"Parameters","text":"<p>               Bases: <code>BaseModel</code></p> <p>API Key Header security parameters class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.Parameters.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.Parameters.apply","title":"apply","text":"<pre><code>apply(\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def apply(\n    self,\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None:\n    api_key_header: APIKeyHeader = security  # type: ignore[assignment]\n\n    if \"headers\" not in body_dict:\n        body_dict[\"headers\"] = {}\n\n    body_dict[\"headers\"][api_key_header.name] = self.value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.Parameters.get_security_class","title":"get_security_class","text":"<pre><code>get_security_class() -&gt; type[BaseSecurity]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def get_security_class(self) -&gt; type[BaseSecurity]:\n    return APIKeyHeader\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.accept","title":"accept","text":"<pre><code>accept(security_params: BaseSecurityParameters) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def accept(self, security_params: \"BaseSecurityParameters\") -&gt; bool:\n    return isinstance(self, security_params.get_security_class())\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.get_security_class","title":"get_security_class  <code>classmethod</code>","text":"<pre><code>get_security_class(\n    type: str, in_value: str\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef get_security_class(cls, type: str, in_value: str) -&gt; Optional[str]:\n    sub_classes = cls.__subclasses__()\n\n    for sub_class in sub_classes:\n        if sub_class.is_supported(type, in_value):\n            return sub_class.__name__\n    else:\n        logger.error(\n            f\"Unsupported type '{type}' and in_value '{in_value}' combination\"\n        )\n        return None\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.is_supported","title":"is_supported  <code>classmethod</code>","text":"<pre><code>is_supported(type: str, in_value: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef is_supported(cls, type: str, in_value: str) -&gt; bool:\n    return type == cls.type and in_value == cls.in_value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/","title":"APIKeyQuery","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery","title":"fastagency.api.openapi.security.APIKeyQuery","text":"<p>               Bases: <code>BaseSecurity</code></p> <p>API Key Query security class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.in_value","title":"in_value  <code>class-attribute</code>","text":"<pre><code>in_value: Literal['query'] = 'query'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.type","title":"type  <code>class-attribute</code>","text":"<pre><code>type: Literal['apiKey'] = 'apiKey'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.Parameters","title":"Parameters","text":"<p>               Bases: <code>BaseModel</code></p> <p>API Key Query security parameters class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.Parameters.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.Parameters.apply","title":"apply","text":"<pre><code>apply(\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def apply(\n    self,\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None:\n    api_key_query: APIKeyQuery = security  # type: ignore[assignment]\n\n    q_params[api_key_query.name] = self.value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.Parameters.get_security_class","title":"get_security_class","text":"<pre><code>get_security_class() -&gt; type[BaseSecurity]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def get_security_class(self) -&gt; type[BaseSecurity]:\n    return APIKeyQuery\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.accept","title":"accept","text":"<pre><code>accept(security_params: BaseSecurityParameters) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def accept(self, security_params: \"BaseSecurityParameters\") -&gt; bool:\n    return isinstance(self, security_params.get_security_class())\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.get_security_class","title":"get_security_class  <code>classmethod</code>","text":"<pre><code>get_security_class(\n    type: str, in_value: str\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef get_security_class(cls, type: str, in_value: str) -&gt; Optional[str]:\n    sub_classes = cls.__subclasses__()\n\n    for sub_class in sub_classes:\n        if sub_class.is_supported(type, in_value):\n            return sub_class.__name__\n    else:\n        logger.error(\n            f\"Unsupported type '{type}' and in_value '{in_value}' combination\"\n        )\n        return None\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.is_supported","title":"is_supported  <code>classmethod</code>","text":"<pre><code>is_supported(type: str, in_value: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef is_supported(cls, type: str, in_value: str) -&gt; bool:\n    return type == cls.type and in_value == cls.in_value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/","title":"BaseSecurity","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity","title":"fastagency.api.openapi.security.BaseSecurity","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for security classes.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity.in_value","title":"in_value  <code>class-attribute</code>","text":"<pre><code>in_value: Literal[\n    \"header\", \"query\", \"cookie\", \"bearer\", \"basic\", \"tls\"\n]\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity.type","title":"type  <code>class-attribute</code>","text":"<pre><code>type: Literal[\n    \"apiKey\", \"http\", \"mutualTLS\", \"oauth2\", \"openIdConnect\"\n]\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity.accept","title":"accept","text":"<pre><code>accept(security_params: BaseSecurityParameters) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def accept(self, security_params: \"BaseSecurityParameters\") -&gt; bool:\n    return isinstance(self, security_params.get_security_class())\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity.get_security_class","title":"get_security_class  <code>classmethod</code>","text":"<pre><code>get_security_class(\n    type: str, in_value: str\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef get_security_class(cls, type: str, in_value: str) -&gt; Optional[str]:\n    sub_classes = cls.__subclasses__()\n\n    for sub_class in sub_classes:\n        if sub_class.is_supported(type, in_value):\n            return sub_class.__name__\n    else:\n        logger.error(\n            f\"Unsupported type '{type}' and in_value '{in_value}' combination\"\n        )\n        return None\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity.is_supported","title":"is_supported  <code>classmethod</code>","text":"<pre><code>is_supported(type: str, in_value: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef is_supported(cls, type: str, in_value: str) -&gt; bool:\n    return type == cls.type and in_value == cls.in_value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurityParameters/","title":"BaseSecurityParameters","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurityParameters/#fastagency.api.openapi.security.BaseSecurityParameters","title":"fastagency.api.openapi.security.BaseSecurityParameters","text":"<p>               Bases: <code>Protocol</code></p> <p>Base class for security parameters.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurityParameters/#fastagency.api.openapi.security.BaseSecurityParameters.apply","title":"apply","text":"<pre><code>apply(\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def apply(\n    self,\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurityParameters/#fastagency.api.openapi.security.BaseSecurityParameters.get_security_class","title":"get_security_class","text":"<pre><code>get_security_class() -&gt; type[BaseSecurity]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def get_security_class(self) -&gt; type[BaseSecurity]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/","title":"HTTPBearer","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer","title":"fastagency.api.openapi.security.HTTPBearer","text":"<p>               Bases: <code>BaseSecurity</code></p> <p>HTTP Bearer security class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.in_value","title":"in_value  <code>class-attribute</code>","text":"<pre><code>in_value: Literal['bearer'] = 'bearer'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.type","title":"type  <code>class-attribute</code>","text":"<pre><code>type: Literal['http'] = 'http'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.Parameters","title":"Parameters","text":"<p>               Bases: <code>BaseModel</code></p> <p>HTTP Bearer security parameters class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.Parameters.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.Parameters.apply","title":"apply","text":"<pre><code>apply(\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def apply(\n    self,\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None:\n    if \"headers\" not in body_dict:\n        body_dict[\"headers\"] = {}\n\n    body_dict[\"headers\"][\"Authorization\"] = f\"Bearer {self.value}\"\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.Parameters.get_security_class","title":"get_security_class","text":"<pre><code>get_security_class() -&gt; type[BaseSecurity]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def get_security_class(self) -&gt; type[BaseSecurity]:\n    return HTTPBearer\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.accept","title":"accept","text":"<pre><code>accept(security_params: BaseSecurityParameters) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def accept(self, security_params: \"BaseSecurityParameters\") -&gt; bool:\n    return isinstance(self, security_params.get_security_class())\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.get_security_class","title":"get_security_class  <code>classmethod</code>","text":"<pre><code>get_security_class(\n    type: str, in_value: str\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef get_security_class(cls, type: str, in_value: str) -&gt; Optional[str]:\n    sub_classes = cls.__subclasses__()\n\n    for sub_class in sub_classes:\n        if sub_class.is_supported(type, in_value):\n            return sub_class.__name__\n    else:\n        logger.error(\n            f\"Unsupported type '{type}' and in_value '{in_value}' combination\"\n        )\n        return None\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.is_supported","title":"is_supported  <code>classmethod</code>","text":"<pre><code>is_supported(type: str, in_value: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef is_supported(cls, type: str, in_value: str) -&gt; bool:\n    return type == cls.type and in_value == cls.in_value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security_schema_visitor/custom_visitor/","title":"custom_visitor","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security_schema_visitor/custom_visitor/#fastagency.api.openapi.security_schema_visitor.custom_visitor","title":"fastagency.api.openapi.security_schema_visitor.custom_visitor","text":"<pre><code>custom_visitor(\n    parser: OpenAPIParser, model_path: Path\n) -&gt; dict[str, object]\n</code></pre> Source code in <code>fastagency/api/openapi/security_schema_visitor.py</code> <pre><code>def custom_visitor(parser: OpenAPIParser, model_path: Path) -&gt; dict[str, object]:\n    if \"securitySchemes\" not in parser.raw_obj[\"components\"]:\n        return {}\n    security_schemes = parser.raw_obj[\"components\"][\"securitySchemes\"]\n\n    # for k, v in security_schemes.items():\n    #     security_schemes[k][\"in_value\"] = security_schemes[k].pop(\"in\")\n\n    security_classes = []\n    security_parameters = {}\n    for k, v in security_schemes.items():\n        if \"in\" not in v:\n            in_value = v[\"scheme\"] if \"scheme\" in v and v[\"type\"] == \"http\" else None\n        else:\n            in_value = v[\"in\"]\n        security_class = BaseSecurity.get_security_class(\n            type=v[\"type\"], in_value=in_value\n        )\n        if security_class is None:\n            continue\n        security_classes.append(security_class)\n        name = v.get(\"name\", None)\n        security_parameters[k] = f'{security_class}(name=\"{name}\")'\n\n    return {\n        \"security_schemes\": security_schemes,\n        \"security_classes\": security_classes,\n        \"security_parameters\": security_parameters,\n    }\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/FastAgency/","title":"FastAgency","text":"","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency","title":"fastagency.app.FastAgency","text":"<pre><code>FastAgency(\n    wf: Workflows,\n    ui: UI,\n    *,\n    title: Optional[str] = None,\n    description: Optional[str] = None\n)\n</code></pre> <p>Initialize the FastAgency object.</p> PARAMETER DESCRIPTION <code>wf</code> <p>The workflows object to use</p> <p> TYPE: <code>Workflows</code> </p> <code>ui</code> <p>The UI object to use</p> <p> TYPE: <code>UI</code> </p> <code>title</code> <p>The title of the FastAgency. If None, the default string will be used. Defaults to None.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>The description of the FastAgency. If None, the default string will be used. Defaults to None.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/app.py</code> <pre><code>def __init__(\n    self,\n    wf: Workflows,\n    ui: UI,\n    *,\n    title: Optional[str] = None,\n    description: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Initialize the FastAgency object.\n\n    Args:\n        wf (Workflows): The workflows object to use\n        ui (UI): The UI object to use\n        title (Optional[str], optional): The title of the FastAgency. If None, the default string will be used. Defaults to None.\n        description (Optional[str], optional): The description of the FastAgency. If None, the default string will be used. Defaults to None.\n    \"\"\"\n    self._title = title or \"FastAgency application\"\n    default_description = \"FastAgency application\"\n\n    if len(wf.names) == 0:\n        logger.warning(f\"No workflows found in {wf}\")\n        default_description += \" - No workflows found\"\n    else:\n        default_description += \" - Workflows:\"\n        for name in wf.names:\n            default_description += f\" - {name}: {wf.get_description(name)}\"\n    self._description = description or default_description\n\n    logger.info(f\"Initializing FastAgency {self} with workflows: {wf} and UI: {ui}\")\n    self._wf = wf\n    self._ui = ui\n    logger.info(f\"Initialized FastAgency: {self}\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency.description","title":"description  <code>property</code>","text":"<pre><code>description: str\n</code></pre> <p>Return the description of the FastAgency.</p>","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency.title","title":"title  <code>property</code>","text":"<pre><code>title: str\n</code></pre> <p>Return the title of the FastAgency.</p>","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency.ui","title":"ui  <code>property</code>","text":"<pre><code>ui: UI\n</code></pre> <p>Return the UI object.</p>","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency.wf","title":"wf  <code>property</code>","text":"<pre><code>wf: Workflows\n</code></pre> <p>Return the workflows object.</p>","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency.create","title":"create","text":"<pre><code>create(import_string: str) -&gt; Generator[None, None, None]\n</code></pre> <p>Create the FastAgency.</p> Source code in <code>fastagency/app.py</code> <pre><code>@contextmanager\ndef create(self, import_string: str) -&gt; Generator[None, None, None]:\n    \"\"\"Create the FastAgency.\"\"\"\n    with self._ui.create(app=self, import_string=import_string):\n        yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency.handle_asgi","title":"handle_asgi  <code>async</code>","text":"<pre><code>handle_asgi(\n    scope: dict[str, Any],\n    receive: Callable[[dict[str, Any]], Awaitable[None]],\n    send: Callable[[dict[str, Any]], Awaitable[None]],\n) -&gt; None\n</code></pre> Source code in <code>fastagency/app.py</code> <pre><code>async def handle_asgi(\n    self,\n    scope: dict[str, Any],\n    receive: Callable[[dict[str, Any]], Awaitable[None]],\n    send: Callable[[dict[str, Any]], Awaitable[None]],\n) -&gt; None:\n    if isinstance(self.ui, ASGI):\n        return await self.ui.handle_asgi(self, scope, receive, send)\n    else:\n        raise FastAgencyASGINotImplementedError(\n            \"ASGI interface not supported for UI: {self.ui}\"\n        )\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency.handle_wsgi","title":"handle_wsgi","text":"<pre><code>handle_wsgi(\n    environ: dict[str, Any],\n    start_response: Callable[..., Any],\n) -&gt; list[bytes]\n</code></pre> Source code in <code>fastagency/app.py</code> <pre><code>def handle_wsgi(\n    self, environ: dict[str, Any], start_response: Callable[..., Any]\n) -&gt; list[bytes]:\n    if isinstance(self.ui, WSGI):\n        return self.ui.handle_wsgi(self, environ, start_response)\n    else:\n        raise FastAgencyWSGINotImplementedError(\n            \"WSGI interface not supported for UI: {self.ui}\"\n        )\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency.start","title":"start","text":"<pre><code>start(\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False,\n) -&gt; None\n</code></pre> <p>Start the FastAgency.</p> Source code in <code>fastagency/app.py</code> <pre><code>def start(\n    self,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False,\n) -&gt; None:\n    \"\"\"Start the FastAgency.\"\"\"\n    self.ui.start(\n        app=self,\n        import_string=import_string,\n        name=name,\n        initial_message=initial_message,\n        single_run=single_run,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/ASGI/","title":"ASGI","text":"","boost":0.5},{"location":"api/fastagency/base/ASGI/#fastagency.base.ASGI","title":"fastagency.base.ASGI","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/base/ASGI/#fastagency.base.ASGI.handle_asgi","title":"handle_asgi  <code>async</code>","text":"<pre><code>handle_asgi(\n    app: Runnable,\n    scope: dict[str, Any],\n    receive: Callable[[dict[str, Any]], Awaitable[None]],\n    send: Callable[[dict[str, Any]], Awaitable[None]],\n) -&gt; None\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>async def handle_asgi(\n    self,\n    app: \"Runnable\",\n    scope: dict[str, Any],\n    receive: Callable[[dict[str, Any]], Awaitable[None]],\n    send: Callable[[dict[str, Any]], Awaitable[None]],\n) -&gt; None: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/","title":"AskingMessage","text":"","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage","title":"fastagency.base.AskingMessage  <code>dataclass</code>","text":"<pre><code>AskingMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/","title":"FunctionCallExecution","text":"","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution","title":"fastagency.base.FunctionCallExecution  <code>dataclass</code>","text":"<pre><code>FunctionCallExecution(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    function_name: Optional[str] = None,\n    call_id: Optional[str] = None,\n    retval: Any = None,\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.call_id","title":"call_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>call_id: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.function_name","title":"function_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function_name: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.retval","title":"retval  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>retval: Any = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessage/","title":"IOMessage","text":"","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage","title":"fastagency.base.IOMessage  <code>dataclass</code>","text":"<pre><code>IOMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p>","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/","title":"IOMessageVisitor","text":"","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor","title":"fastagency.base.IOMessageVisitor","text":"<p>               Bases: <code>ABC</code></p>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit","title":"visit","text":"<pre><code>visit(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit(self, message: IOMessage) -&gt; Optional[str]:\n    method_name = f\"visit_{message.type}\"\n    method = getattr(self, method_name, self.visit_default)\n    return method(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_default","title":"visit_default  <code>abstractmethod</code>","text":"<pre><code>visit_default(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@abstractmethod\ndef visit_default(self, message: IOMessage) -&gt; Optional[str]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_function_call_execution","title":"visit_function_call_execution","text":"<pre><code>visit_function_call_execution(\n    message: FunctionCallExecution,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_function_call_execution(\n    self, message: FunctionCallExecution\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_multiple_choice","title":"visit_multiple_choice","text":"<pre><code>visit_multiple_choice(\n    message: MultipleChoice,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_multiple_choice(self, message: MultipleChoice) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_suggested_function_call","title":"visit_suggested_function_call","text":"<pre><code>visit_suggested_function_call(\n    message: SuggestedFunctionCall,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_suggested_function_call(\n    self, message: SuggestedFunctionCall\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_system_message","title":"visit_system_message","text":"<pre><code>visit_system_message(\n    message: SystemMessage,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_system_message(self, message: SystemMessage) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_text_input","title":"visit_text_input","text":"<pre><code>visit_text_input(message: TextInput) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_text_input(self, message: TextInput) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_text_message","title":"visit_text_message","text":"<pre><code>visit_text_message(message: TextMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_text_message(self, message: TextMessage) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_workflow_completed","title":"visit_workflow_completed","text":"<pre><code>visit_workflow_completed(\n    message: WorkflowCompleted,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_workflow_completed(self, message: WorkflowCompleted) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/","title":"MultipleChoice","text":"","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice","title":"fastagency.base.MultipleChoice  <code>dataclass</code>","text":"<pre><code>MultipleChoice(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    prompt: Optional[str] = None,\n    choices: list[str] = list(),\n    default: Optional[str] = None,\n    single: bool = True,\n)\n</code></pre> <p>               Bases: <code>AskingMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.choices","title":"choices  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>choices: list[str] = field(default_factory=list)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.prompt","title":"prompt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.single","title":"single  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>single: bool = True\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Runnable/","title":"Runnable","text":"","boost":0.5},{"location":"api/fastagency/base/Runnable/#fastagency.base.Runnable","title":"fastagency.base.Runnable","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/base/Runnable/#fastagency.base.Runnable.description","title":"description  <code>property</code>","text":"<pre><code>description: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Runnable/#fastagency.base.Runnable.title","title":"title  <code>property</code>","text":"<pre><code>title: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Runnable/#fastagency.base.Runnable.ui","title":"ui  <code>property</code>","text":"<pre><code>ui: UI\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Runnable/#fastagency.base.Runnable.wf","title":"wf  <code>property</code>","text":"<pre><code>wf: Workflows\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Runnable/#fastagency.base.Runnable.create","title":"create","text":"<pre><code>create(import_string: str) -&gt; Generator[None, None, None]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@contextmanager\ndef create(self, import_string: str) -&gt; Generator[None, None, None]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Runnable/#fastagency.base.Runnable.start","title":"start","text":"<pre><code>start(\n    *,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def start(\n    self,\n    *,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False,\n) -&gt; None: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/","title":"SuggestedFunctionCall","text":"","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall","title":"fastagency.base.SuggestedFunctionCall  <code>dataclass</code>","text":"<pre><code>SuggestedFunctionCall(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    function_name: Optional[str] = None,\n    call_id: Optional[str] = None,\n    arguments: dict[str, Any] = dict(),\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.arguments","title":"arguments  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>arguments: dict[str, Any] = field(default_factory=dict)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.call_id","title":"call_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>call_id: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.function_name","title":"function_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function_name: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/","title":"SystemMessage","text":"","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage","title":"fastagency.base.SystemMessage  <code>dataclass</code>","text":"<pre><code>SystemMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    message: dict[str, Any] = dict(),\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.message","title":"message  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>message: dict[str, Any] = field(default_factory=dict)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/","title":"TextInput","text":"","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput","title":"fastagency.base.TextInput  <code>dataclass</code>","text":"<pre><code>TextInput(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    prompt: Optional[str] = None,\n    suggestions: list[str] = list(),\n    password: bool = False,\n)\n</code></pre> <p>               Bases: <code>AskingMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.password","title":"password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.prompt","title":"prompt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.suggestions","title":"suggestions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>suggestions: list[str] = field(default_factory=list)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/","title":"TextMessage","text":"","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage","title":"fastagency.base.TextMessage  <code>dataclass</code>","text":"<pre><code>TextMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    body: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.body","title":"body  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>body: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/UI/","title":"UI","text":"","boost":0.5},{"location":"api/fastagency/base/UI/#fastagency.base.UI","title":"fastagency.base.UI","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/base/UI/#fastagency.base.UI.create","title":"create","text":"<pre><code>create(app: Runnable, import_string: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@contextmanager\ndef create(self, app: \"Runnable\", import_string: str) -&gt; Iterator[None]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/UI/#fastagency.base.UI.create_subconversation","title":"create_subconversation","text":"<pre><code>create_subconversation() -&gt; UI\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def create_subconversation(self) -&gt; \"UI\": ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/UI/#fastagency.base.UI.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/UI/#fastagency.base.UI.start","title":"start","text":"<pre><code>start(\n    *,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def start(\n    self,\n    *,\n    app: \"Runnable\",\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False,\n) -&gt; None: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WSGI/","title":"WSGI","text":"","boost":0.5},{"location":"api/fastagency/base/WSGI/#fastagency.base.WSGI","title":"fastagency.base.WSGI","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/base/WSGI/#fastagency.base.WSGI.handle_wsgi","title":"handle_wsgi","text":"<pre><code>handle_wsgi(\n    app: Runnable,\n    environ: dict[str, Any],\n    start_response: Callable[..., Any],\n) -&gt; list[bytes]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def handle_wsgi(\n    self,\n    app: \"Runnable\",\n    environ: dict[str, Any],\n    start_response: Callable[..., Any],\n) -&gt; list[bytes]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/","title":"WorkflowCompleted","text":"","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted","title":"fastagency.base.WorkflowCompleted  <code>dataclass</code>","text":"<pre><code>WorkflowCompleted(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    result: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Workflows/","title":"Workflows","text":"","boost":0.5},{"location":"api/fastagency/base/Workflows/#fastagency.base.Workflows","title":"fastagency.base.Workflows","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/base/Workflows/#fastagency.base.Workflows.names","title":"names  <code>property</code>","text":"<pre><code>names: list[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Workflows/#fastagency.base.Workflows.get_description","title":"get_description","text":"<pre><code>get_description(name: str) -&gt; str\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def get_description(self, name: str) -&gt; str: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Workflows/#fastagency.base.Workflows.register","title":"register","text":"<pre><code>register(\n    name: str, description: str\n) -&gt; Callable[[Workflow], Workflow]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def register(\n    self, name: str, description: str\n) -&gt; Callable[[Workflow], Workflow]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Workflows/#fastagency.base.Workflows.register_api","title":"register_api","text":"<pre><code>register_api(\n    api: OpenAPI,\n    callers: Union[Agent, Iterable[Agent]],\n    executors: Union[Agent, Iterable[Agent]],\n    functions: Optional[\n        Union[\n            str,\n            Iterable[\n                Union[str, Mapping[str, Mapping[str, str]]]\n            ],\n        ]\n    ] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def register_api(\n    self,\n    api: \"OpenAPI\",\n    callers: Union[Agent, Iterable[Agent]],\n    executors: Union[Agent, Iterable[Agent]],\n    functions: Optional[\n        Union[str, Iterable[Union[str, Mapping[str, Mapping[str, str]]]]]\n    ] = None,\n) -&gt; None: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Workflows/#fastagency.base.Workflows.run","title":"run","text":"<pre><code>run(\n    name: str, session_id: str, ui: UI, initial_message: str\n) -&gt; str\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def run(self, name: str, session_id: str, ui: UI, initial_message: str) -&gt; str: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/run_workflow/","title":"run_workflow","text":"","boost":0.5},{"location":"api/fastagency/base/run_workflow/#fastagency.base.run_workflow","title":"fastagency.base.run_workflow","text":"<pre><code>run_workflow(\n    *,\n    wf: Workflows,\n    ui: UI,\n    name: Optional[str],\n    initial_message: Optional[str] = None,\n    single_run: bool = False\n) -&gt; None\n</code></pre> <p>Run a workflow.</p> PARAMETER DESCRIPTION <code>wf</code> <p>The workflows object to use.</p> <p> TYPE: <code>Workflows</code> </p> <code>ui</code> <p>The UI object to use.</p> <p> TYPE: <code>UI</code> </p> <code>name</code> <p>The name of the workflow to run. If not provided, the default workflow will be run.</p> <p> TYPE: <code>Optional[str]</code> </p> <code>initial_message</code> <p>The initial message to send to the workflow. If not provided, a default message will be sent. Defaults to None.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>single_run</code> <p>If True, the workflow will only be run once. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>fastagency/base.py</code> <pre><code>def run_workflow(\n    *,\n    wf: Workflows,\n    ui: UI,\n    name: Optional[str],\n    initial_message: Optional[str] = None,\n    single_run: bool = False,\n) -&gt; None:\n    \"\"\"Run a workflow.\n\n    Args:\n        wf (Workflows): The workflows object to use.\n        ui (UI): The UI object to use.\n        name (Optional[str]): The name of the workflow to run. If not provided, the default workflow will be run.\n        initial_message (Optional[str], optional): The initial message to send to the workflow. If not provided, a default message will be sent. Defaults to None.\n        single_run (bool, optional): If True, the workflow will only be run once. Defaults to False.\n    \"\"\"\n    while True:\n        name = wf.names[0] if name is None else name\n        description = wf.get_description(name)\n\n        if initial_message is None:\n            initial_message = ui.process_message(\n                TextInput(\n                    sender=\"FastAgency\",\n                    recipient=\"user\",\n                    prompt=(\n                        f\"Starting a new workflow '{name}' with the following description:\"\n                        + \"\\n\\n\"\n                        + f\"{description}\"\n                        + \"\\n\\nPlease enter an initial message\"\n                    ),\n                )\n            )\n        else:\n            ui.process_message(\n                SystemMessage(\n                    sender=\"FastAgency\",\n                    recipient=\"user\",\n                    message={\n                        \"body\": (\n                            f\"Starting a new workflow '{name}' with the following description:\"\n                            + \"\\n\\n\"\n                            + textwrap.indent(description, prefix=\" \" * 2)\n                            + \"\\n\\nand using the following initial message:\"\n                            + textwrap.indent(initial_message, prefix=\" \" * 2)\n                        )\n                    },\n                )\n            )\n\n        result = wf.run(\n            name=name,\n            session_id=\"session_id\",\n            ui=ui.create_subconversation(),\n            initial_message=\"Hi!\" if initial_message is None else initial_message,\n        )\n\n        ui.process_message(\n            WorkflowCompleted(\n                sender=\"workflow\",\n                recipient=\"user\",\n                result=result,\n            )\n        )\n\n        initial_message = None\n\n        if single_run:\n            break\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/cli/callback/","title":"callback","text":"","boost":0.5},{"location":"api/fastagency/cli/cli/callback/#fastagency.cli.cli.callback","title":"fastagency.cli.cli.callback","text":"<pre><code>callback(version: Optional[bool] = None) -&gt; None\n</code></pre> <p>FastAgency CLI - The [bold]fastapi[/bold] command line app. \ud83d\ude0e</p> <p>Manage your [bold]FastAgency[/bold] projects, run your FastAgency apps, and more.</p> <p>Read more in the docs: [link]https://fastagency.ai/latest/[/link].</p> Source code in <code>fastagency/cli/cli.py</code> <pre><code>@app.callback()\ndef callback(\n    version: Annotated[\n        Optional[bool],\n        typer.Option(\n            \"--version\", help=\"Show the version and exit.\", callback=version_callback\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"FastAgency CLI - The [bold]fastapi[/bold] command line app. \ud83d\ude0e\n\n    Manage your [bold]FastAgency[/bold] projects, run your FastAgency apps, and more.\n\n    Read more in the docs: [link]https://fastagency.ai/latest/[/link].\n    \"\"\"  # noqa: D415\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/cli/dev/","title":"dev","text":"","boost":0.5},{"location":"api/fastagency/cli/cli/dev/#fastagency.cli.cli.dev","title":"fastagency.cli.cli.dev","text":"<pre><code>dev(\n    path: Optional[Path] = None,\n    *,\n    app: Optional[str] = None,\n    workflow: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/cli/cli.py</code> <pre><code>@app.command(**_get_help_messages(True))  # type: ignore[arg-type]\ndef dev(\n    path: Annotated[\n        Optional[Path],\n        typer.Argument(\n            help=\"A path to a Python file or package directory (with [blue]__init__.py[/blue] files) containing a [bold]FastAgency[/bold] app. If not provided, a default set of paths will be tried.\"\n        ),\n    ] = None,\n    *,\n    app: Annotated[\n        Optional[str],\n        typer.Option(\n            help=\"The name of the variable that contains the [bold][/bold] app in the imported module or package. If not provided, it is detected automatically.\"\n        ),\n    ] = None,\n    workflow: Annotated[\n        Optional[str],\n        typer.Option(\n            \"--workflow\",\n            \"-w\",\n            help=\"The name of the workflow to run. If not provided, the default workflow will be run.\",\n        ),\n    ] = None,\n    initial_message: Annotated[\n        Optional[str],\n        typer.Option(\n            \"--initial_message\",\n            \"-i\",\n            help=\"The initial message to send to the workflow. If not provided, a default message will be sent.\",\n        ),\n    ] = None,\n    single_run: Annotated[\n        bool,\n        typer.Option(\n            \"--single-run\", help=\"If set, only a single workflow will be executed.\"\n        ),\n    ] = False,\n) -&gt; None:\n    dev_mode = True\n    _run_app(\n        path=path,\n        app=app,\n        workflow=workflow,\n        initial_message=initial_message,\n        dev_mode=dev_mode,\n        single_run=single_run,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/cli/main/","title":"main","text":"","boost":0.5},{"location":"api/fastagency/cli/cli/main/#fastagency.cli.cli.main","title":"fastagency.cli.cli.main","text":"<pre><code>main() -&gt; None\n</code></pre> Source code in <code>fastagency/cli/cli.py</code> <pre><code>def main() -&gt; None:\n    app()\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/cli/run/","title":"run","text":"","boost":0.5},{"location":"api/fastagency/cli/cli/run/#fastagency.cli.cli.run","title":"fastagency.cli.cli.run","text":"<pre><code>run(\n    path: Optional[Path] = None,\n    *,\n    app: Optional[str] = None,\n    workflow: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/cli/cli.py</code> <pre><code>@app.command(**_get_help_messages(False))  # type: ignore[arg-type]\ndef run(\n    path: Annotated[\n        Optional[Path],\n        typer.Argument(\n            help=\"A path to a Python file or package directory (with [blue]__init__.py[/blue] files) containing a [bold]FastAgency[/bold] app. If not provided, a default set of paths will be tried.\"\n        ),\n    ] = None,\n    *,\n    app: Annotated[\n        Optional[str],\n        typer.Option(\n            help=\"The name of the variable that contains the [bold][/bold] app in the imported module or package. If not provided, it is detected automatically.\"\n        ),\n    ] = None,\n    workflow: Annotated[\n        Optional[str],\n        typer.Option(\n            \"--workflow\",\n            \"-w\",\n            help=\"The name of the workflow to run. If not provided, the default workflow will be run.\",\n        ),\n    ] = None,\n    initial_message: Annotated[\n        Optional[str],\n        typer.Option(\n            \"--initial_message\",\n            \"-i\",\n            help=\"The initial message to send to the workflow. If not provided, a default message will be sent.\",\n        ),\n    ] = None,\n    single_run: Annotated[\n        bool,\n        typer.Option(\n            \"--single-run\", help=\"If set, only a single workflow will be executed.\"\n        ),\n    ] = False,\n) -&gt; None:\n    dev_mode = False\n    _run_app(\n        path=path,\n        app=app,\n        workflow=workflow,\n        initial_message=initial_message,\n        dev_mode=dev_mode,\n        single_run=single_run,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/cli/version/","title":"version","text":"","boost":0.5},{"location":"api/fastagency/cli/cli/version/#fastagency.cli.cli.version","title":"fastagency.cli.cli.version","text":"<pre><code>version() -&gt; None\n</code></pre> Source code in <code>fastagency/cli/cli.py</code> <pre><code>@app.command(help=\"Display the version of FastAgency\")\ndef version() -&gt; None:\n    typer.echo(__version__)\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/cli/version_callback/","title":"version_callback","text":"","boost":0.5},{"location":"api/fastagency/cli/cli/version_callback/#fastagency.cli.cli.version_callback","title":"fastagency.cli.cli.version_callback","text":"<pre><code>version_callback(value: bool) -&gt; None\n</code></pre> Source code in <code>fastagency/cli/cli.py</code> <pre><code>def version_callback(value: bool) -&gt; None:\n    if value:\n        typer.echo(f\"{__version__}\")\n        raise typer.Exit()\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/ModuleData/","title":"ModuleData","text":"","boost":0.5},{"location":"api/fastagency/cli/discover/ModuleData/#fastagency.cli.discover.ModuleData","title":"fastagency.cli.discover.ModuleData  <code>dataclass</code>","text":"<pre><code>ModuleData(module_import_str: str, extra_sys_path: Path)\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/ModuleData/#fastagency.cli.discover.ModuleData.extra_sys_path","title":"extra_sys_path  <code>instance-attribute</code>","text":"<pre><code>extra_sys_path: Path\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/ModuleData/#fastagency.cli.discover.ModuleData.module_import_str","title":"module_import_str  <code>instance-attribute</code>","text":"<pre><code>module_import_str: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/get_app_name/","title":"get_app_name","text":"","boost":0.5},{"location":"api/fastagency/cli/discover/get_app_name/#fastagency.cli.discover.get_app_name","title":"fastagency.cli.discover.get_app_name","text":"<pre><code>get_app_name(\n    *,\n    mod_data: ModuleData,\n    app_name: Union[str, None] = None\n) -&gt; Tuple[str, FastAgency]\n</code></pre> Source code in <code>fastagency/cli/discover.py</code> <pre><code>def get_app_name(  # noqa: C901\n    *, mod_data: ModuleData, app_name: Union[str, None] = None\n) -&gt; \"Tuple[str, FastAgency]\":\n    try:\n        mod = importlib.import_module(mod_data.module_import_str)  # nosemgrep\n    except (ImportError, ValueError) as e:\n        logger.error(f\"Import error: {e}\")\n        logger.warning(\n            \"Ensure all the package directories have an [blue]__init__.py[/blue] file\"\n        )\n        raise\n    if not FastAgency:  # type: ignore[truthy-function]\n        raise FastAgencyCLIError(\n            \"Could not import FastAgency, try running 'pip install fastagency'\"\n        ) from None\n    object_names = dir(mod)\n    object_names_set = set(object_names)\n    if app_name:\n        if app_name not in object_names_set:\n            raise FastAgencyCLIError(\n                f\"Could not find app name {app_name} in {mod_data.module_import_str}\"\n            )\n        app = getattr(mod, app_name)\n        if not isinstance(app, FastAgency):\n            raise FastAgencyCLIError(\n                f\"The app name {app_name} in {mod_data.module_import_str} doesn't seem to be a FastAgency app\"\n            )\n        return app_name, app\n    for preferred_name in [\"app\", \"api\"]:\n        if preferred_name in object_names_set:\n            obj = getattr(mod, preferred_name)\n            if isinstance(obj, FastAgency):\n                return preferred_name, obj\n    for name in object_names:\n        obj = getattr(mod, name)\n        if isinstance(obj, FastAgency):\n            return name, obj\n    raise FastAgencyCLIError(\"Could not find FastAgency app in module, try using --app\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/get_default_path/","title":"get_default_path","text":"","boost":0.5},{"location":"api/fastagency/cli/discover/get_default_path/#fastagency.cli.discover.get_default_path","title":"fastagency.cli.discover.get_default_path","text":"<pre><code>get_default_path() -&gt; Path\n</code></pre> Source code in <code>fastagency/cli/discover.py</code> <pre><code>def get_default_path() -&gt; Path:\n    potential_paths = (\n        \"main.py\",\n        \"app.py\",\n        \"api.py\",\n        \"app/main.py\",\n        \"app/app.py\",\n        \"app/api.py\",\n    )\n\n    for full_path in potential_paths:\n        path = Path(full_path)\n        if path.is_file():\n            return path\n\n    raise FastAgencyCLIError(\n        \"Could not find a default file to run, please provide an explicit path\"\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/get_import_string/","title":"get_import_string","text":"","boost":0.5},{"location":"api/fastagency/cli/discover/get_import_string/#fastagency.cli.discover.get_import_string","title":"fastagency.cli.discover.get_import_string","text":"<pre><code>get_import_string(\n    *,\n    path: Union[Path, None] = None,\n    app_name: Union[str, None] = None\n) -&gt; tuple[str, FastAgency]\n</code></pre> Source code in <code>fastagency/cli/discover.py</code> <pre><code>def get_import_string(\n    *, path: Union[Path, None] = None, app_name: Union[str, None] = None\n) -&gt; tuple[str, FastAgency]:\n    if not path:\n        path = get_default_path()\n    logger.info(f\"Using path [blue]{path}[/blue]\")\n    logger.info(f\"Resolved absolute path {path.resolve()}\")\n    if not path.exists():\n        raise FastAgencyCLIError(f\"Path does not exist {path}\")\n    mod_data = get_module_data_from_path(path)\n    sys.path.insert(0, str(mod_data.extra_sys_path))\n    use_app_name, app = get_app_name(mod_data=mod_data, app_name=app_name)\n    import_example = Syntax(\n        f\"from {mod_data.module_import_str} import {use_app_name}\", \"python\"\n    )\n    import_panel = Padding(\n        Panel(\n            import_example,\n            title=\"[b green]Importable FastAgency app[/b green]\",\n            expand=False,\n            padding=(1, 2),\n        ),\n        1,\n    )\n    logger.info(\"Found importable FastAgency app\")\n    print(import_panel)\n    import_string = f\"{mod_data.module_import_str}:{use_app_name}\"\n    logger.info(f\"Using import string [b green]{import_string}[/b green]\")\n    return import_string, app\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/get_module_data_from_path/","title":"get_module_data_from_path","text":"","boost":0.5},{"location":"api/fastagency/cli/discover/get_module_data_from_path/#fastagency.cli.discover.get_module_data_from_path","title":"fastagency.cli.discover.get_module_data_from_path","text":"<pre><code>get_module_data_from_path(path: Path) -&gt; ModuleData\n</code></pre> Source code in <code>fastagency/cli/discover.py</code> <pre><code>def get_module_data_from_path(path: Path) -&gt; ModuleData:\n    logger.info(\n        \"Searching for package file structure from directories with [blue]__init__.py[/blue] files\"\n    )\n    use_path = path.resolve()\n    module_path = use_path\n    if use_path.is_file() and use_path.stem == \"__init__\":\n        module_path = use_path.parent\n    module_paths = [module_path]\n    extra_sys_path = module_path.parent\n    for parent in module_path.parents:\n        init_path = parent / \"__init__.py\"\n        if init_path.is_file():\n            module_paths.insert(0, parent)\n            extra_sys_path = parent.parent\n        else:\n            break\n    logger.info(f\"Importing from {extra_sys_path.resolve()}\")\n    root = module_paths[0]\n    name = f\"\ud83d\udc0d {root.name}\" if root.is_file() else f\"\ud83d\udcc1 {root.name}\"\n    root_tree = Tree(name)\n    if root.is_dir():\n        root_tree.add(\"[dim]\ud83d\udc0d __init__.py[/dim]\")\n    tree = root_tree\n    for sub_path in module_paths[1:]:\n        sub_name = (\n            f\"\ud83d\udc0d {sub_path.name}\" if sub_path.is_file() else f\"\ud83d\udcc1 {sub_path.name}\"\n        )\n        tree = tree.add(sub_name)\n        if sub_path.is_dir():\n            tree.add(\"[dim]\ud83d\udc0d __init__.py[/dim]\")\n    title = \"[b green]Python module file[/b green]\"\n    if len(module_paths) &gt; 1 or module_path.is_dir():\n        title = \"[b green]Python package file structure[/b green]\"\n    panel = Padding(\n        Panel(\n            root_tree,\n            title=title,\n            expand=False,\n            padding=(1, 2),\n        ),\n        1,\n    )\n    print(panel)\n    module_str = \".\".join(p.stem for p in module_paths)\n    logger.info(f\"Importing module [green]{module_str}[/green]\")\n    return ModuleData(\n        module_import_str=module_str,\n        extra_sys_path=extra_sys_path.resolve(),\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/import_from_string/","title":"import_from_string","text":"","boost":0.5},{"location":"api/fastagency/cli/discover/import_from_string/#fastagency.cli.discover.import_from_string","title":"fastagency.cli.discover.import_from_string","text":"<pre><code>import_from_string(import_string: str) -&gt; FastAgency\n</code></pre> <p>Import a module and attribute from an import string.</p> <p>Import a module and an attribute from a string like 'file_name:app_name'. Checks if the file exists before attempting to import the module.</p> PARAMETER DESCRIPTION <code>import_string</code> <p>The import string in 'module_name:attribute_name' format.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>The attribute from the module.</p> <p> TYPE: <code>FastAgency</code> </p> RAISES DESCRIPTION <code>ImportError</code> <p>If the import string is not in the correct format or the module or attribute is not found.</p> <code>ValueError</code> <p>If the import string is not in 'module_name:attribute_name' format.</p> <code>ModuleNotFoundError</code> <p>If the module is not found.</p> <code>AttributeError</code> <p>If the attribute is not found in the module.</p> Source code in <code>fastagency/cli/discover.py</code> <pre><code>def import_from_string(import_string: str) -&gt; FastAgency:\n    \"\"\"Import a module and attribute from an import string.\n\n    Import a module and an attribute from a string like 'file_name:app_name'.\n    Checks if the file exists before attempting to import the module.\n\n    Args:\n        import_string (str): The import string in 'module_name:attribute_name' format.\n\n    Returns:\n        Any: The attribute from the module.\n\n    Raises:\n        ImportError: If the import string is not in the correct format or the module or attribute is not found.\n        ValueError: If the import string is not in 'module_name:attribute_name' format.\n        ModuleNotFoundError: If the module is not found.\n        AttributeError: If the attribute is not found in the module.\n\n    \"\"\"\n    try:\n        # Split the string into module and attribute parts\n        module_name, attribute_name = import_string.split(\":\")\n\n        # Ensure the module name points to a valid Python file before importing\n        module_path = f\"{module_name.replace('.', '/')}.py\"\n        if not Path(module_path).is_file():\n            raise ImportError(f\"The file for module '{module_name}' does not exist.\")\n\n        # Add the current directory to the Python path to allow imports from local files\n        sys.path.append(str(Path.cwd()))\n\n        # Import the module using importlib\n        module = importlib.import_module(module_name)  # nosemgrep\n\n        # Get the attribute (like 'app') from the module\n        attribute = getattr(module, attribute_name)\n        if not isinstance(attribute, FastAgency):\n            raise ImportError(\n                f\"The attribute '{attribute_name}' in module '{module_name}' is not a FastAgency app.\"\n            )\n\n        return attribute\n    except ValueError:\n        raise ImportError(\n            \"Import string must be in 'module_name:attribute_name' format.\"\n        ) from None\n    except ModuleNotFoundError:\n        raise ImportError(f\"Module '{module_name}' not found.\") from None\n    except AttributeError:\n        raise ImportError(\n            f\"Attribute '{attribute_name}' not found in module '{module_name}'.\"\n        ) from None\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/logging/setup_logging/","title":"setup_logging","text":"","boost":0.5},{"location":"api/fastagency/cli/logging/setup_logging/#fastagency.cli.logging.setup_logging","title":"fastagency.cli.logging.setup_logging","text":"<pre><code>setup_logging(\n    terminal_width: Union[int, None] = None\n) -&gt; None\n</code></pre> Source code in <code>fastagency/cli/logging.py</code> <pre><code>def setup_logging(terminal_width: Union[int, None] = None) -&gt; None:\n    logger = logging.getLogger(\"fastapi_cli\")\n    console = Console(width=terminal_width) if terminal_width else None\n    rich_handler = RichHandler(\n        show_time=False,\n        rich_tracebacks=True,\n        tracebacks_show_locals=True,\n        markup=True,\n        show_path=False,\n        console=console,\n    )\n    rich_handler.setFormatter(logging.Formatter(\"%(message)s\"))\n    logger.addHandler(rich_handler)\n\n    logger.setLevel(logging.INFO)\n    logger.propagate = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/exceptions/FastAgencyASGINotImplementedError/","title":"FastAgencyASGINotImplementedError","text":"","boost":0.5},{"location":"api/fastagency/exceptions/FastAgencyASGINotImplementedError/#fastagency.exceptions.FastAgencyASGINotImplementedError","title":"fastagency.exceptions.FastAgencyASGINotImplementedError","text":"<p>               Bases: <code>FastAgencyError</code></p>","boost":0.5},{"location":"api/fastagency/exceptions/FastAgencyCLIError/","title":"FastAgencyCLIError","text":"","boost":0.5},{"location":"api/fastagency/exceptions/FastAgencyCLIError/#fastagency.exceptions.FastAgencyCLIError","title":"fastagency.exceptions.FastAgencyCLIError","text":"<p>               Bases: <code>FastAgencyError</code></p>","boost":0.5},{"location":"api/fastagency/exceptions/FastAgencyCLIPythonVersionError/","title":"FastAgencyCLIPythonVersionError","text":"","boost":0.5},{"location":"api/fastagency/exceptions/FastAgencyCLIPythonVersionError/#fastagency.exceptions.FastAgencyCLIPythonVersionError","title":"fastagency.exceptions.FastAgencyCLIPythonVersionError","text":"<p>               Bases: <code>FastAgencyCLIError</code></p>","boost":0.5},{"location":"api/fastagency/exceptions/FastAgencyError/","title":"FastAgencyError","text":"","boost":0.5},{"location":"api/fastagency/exceptions/FastAgencyError/#fastagency.exceptions.FastAgencyError","title":"fastagency.exceptions.FastAgencyError","text":"<p>               Bases: <code>Exception</code></p>","boost":0.5},{"location":"api/fastagency/exceptions/FastAgencyWSGINotImplementedError/","title":"FastAgencyWSGINotImplementedError","text":"","boost":0.5},{"location":"api/fastagency/exceptions/FastAgencyWSGINotImplementedError/#fastagency.exceptions.FastAgencyWSGINotImplementedError","title":"fastagency.exceptions.FastAgencyWSGINotImplementedError","text":"<p>               Bases: <code>FastAgencyError</code></p>","boost":0.5},{"location":"api/fastagency/logging/get_logger/","title":"get_logger","text":"","boost":0.5},{"location":"api/fastagency/logging/get_logger/#fastagency.logging.get_logger","title":"fastagency.logging.get_logger","text":"<pre><code>get_logger(\n    name: str,\n    *,\n    level: int = logging.INFO,\n    use_timestamp: bool = True\n) -&gt; Logger\n</code></pre> <p>Return a logger with the specified name.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the logger</p> <p> TYPE: <code>str</code> </p> <code>level</code> <p>The level of the logger</p> <p> TYPE: <code>int</code> DEFAULT: <code>INFO</code> </p> <code>use_timestamp</code> <p>Whether to use a timestamp in the log messages</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> Source code in <code>fastagency/logging.py</code> <pre><code>def get_logger(\n    name: str, *, level: int = logging.INFO, use_timestamp: bool = True\n) -&gt; logging.Logger:\n    \"\"\"Return a logger with the specified name.\n\n    Args:\n        name (str): The name of the logger\n        level (int): The level of the logger\n        use_timestamp (bool): Whether to use a timestamp in the log messages\n    \"\"\"\n    # Get the logger\n    logger = logging.getLogger(__name__)\n    logger.setLevel(level)\n\n    # Check if the logger already has handlers\n    if not logger.handlers:\n        # Create a stream handler\n        handler = logging.StreamHandler()\n        handler.setLevel(level)\n\n        # Create a formatter and set it for the handler\n        formatter = logging.Formatter(\n            f\"{'%(asctime)s' if use_timestamp else ''} [%(levelname)s] %(message)s\"\n        )\n        handler.setFormatter(formatter)\n\n        # Add the handler to the logger\n        logger.addHandler(handler)\n\n    return logger\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/","title":"AutoGenWorkflows","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/#fastagency.runtime.autogen.AutoGenWorkflows","title":"fastagency.runtime.autogen.AutoGenWorkflows","text":"<pre><code>AutoGenWorkflows()\n</code></pre> <p>               Bases: <code>Workflows</code></p> <p>Initialize the workflows.</p> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the workflows.\"\"\"\n    self._workflows: dict[\n        str, tuple[Callable[[Workflows, UI, str, str], str], str]\n    ] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/#fastagency.runtime.autogen.AutoGenWorkflows.names","title":"names  <code>property</code>","text":"<pre><code>names: list[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/#fastagency.runtime.autogen.AutoGenWorkflows.get_description","title":"get_description","text":"<pre><code>get_description(name: str) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def get_description(self, name: str) -&gt; str:\n    _, description = self._workflows.get(name, (None, \"Description not available!\"))\n    return description\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/#fastagency.runtime.autogen.AutoGenWorkflows.register","title":"register","text":"<pre><code>register(\n    name: str,\n    description: str,\n    *,\n    fail_on_redefintion: bool = False\n) -&gt; Callable[[Workflow], Workflow]\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def register(\n    self, name: str, description: str, *, fail_on_redefintion: bool = False\n) -&gt; Callable[[Workflow], Workflow]:\n    def decorator(func: Workflow) -&gt; Workflow:\n        if name in self._workflows:\n            if fail_on_redefintion:\n                raise ValueError(f\"A workflow with name '{name}' already exists.\")\n            else:\n                logger.warning(f\"Overwriting workflow with name '{name}'\")\n\n        self._workflows[name] = func, description\n        return func\n\n    return decorator\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/#fastagency.runtime.autogen.AutoGenWorkflows.register_api","title":"register_api","text":"<pre><code>register_api(\n    api: OpenAPI,\n    callers: Union[\n        ConversableAgent, Iterable[ConversableAgent]\n    ],\n    executors: Union[\n        ConversableAgent, Iterable[ConversableAgent]\n    ],\n    functions: Optional[\n        Union[\n            str,\n            Iterable[\n                Union[str, Mapping[str, Mapping[str, str]]]\n            ],\n        ]\n    ] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def register_api(\n    self,\n    api: \"OpenAPI\",\n    callers: Union[ConversableAgent, Iterable[ConversableAgent]],\n    executors: Union[ConversableAgent, Iterable[ConversableAgent]],\n    functions: Optional[\n        Union[str, Iterable[Union[str, Mapping[str, Mapping[str, str]]]]]\n    ] = None,\n) -&gt; None:\n    if not isinstance(callers, Iterable):\n        callers = [callers]\n    if not isinstance(executors, Iterable):\n        executors = [executors]\n    if isinstance(functions, str):\n        functions = [functions]\n\n    for caller in callers:\n        api._register_for_llm(caller, functions=functions)\n\n    for executor in executors:\n        api._register_for_execution(executor, functions=functions)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/#fastagency.runtime.autogen.AutoGenWorkflows.run","title":"run","text":"<pre><code>run(\n    name: str, session_id: str, ui: UI, initial_message: str\n) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def run(self, name: str, session_id: str, ui: UI, initial_message: str) -&gt; str:\n    workflow, description = self._workflows[name]\n\n    iostream = IOStreamAdapter(ui)\n\n    with IOStream.set_default(iostream):\n        return workflow(self, ui, initial_message, session_id)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/","title":"IOStreamAdapter","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/#fastagency.runtime.autogen.IOStreamAdapter","title":"fastagency.runtime.autogen.IOStreamAdapter","text":"<pre><code>IOStreamAdapter(ui: UI)\n</code></pre> <p>Initialize the adapter with a ChatableIO object.</p> PARAMETER DESCRIPTION <code>ui</code> <p>The ChatableIO object to adapt</p> <p> TYPE: <code>ChatableIO</code> </p> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def __init__(self, ui: UI) -&gt; None:\n    \"\"\"Initialize the adapter with a ChatableIO object.\n\n    Args:\n        ui (ChatableIO): The ChatableIO object to adapt\n\n    \"\"\"\n    self.ui = ui\n    self.current_message = CurrentMessage()\n\n    self.messages: list[IOMessage] = []\n    if not isinstance(self.ui, UI):\n        raise ValueError(\"The ui object must be an instance of UI.\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/#fastagency.runtime.autogen.IOStreamAdapter.current_message","title":"current_message  <code>instance-attribute</code>","text":"<pre><code>current_message = CurrentMessage()\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/#fastagency.runtime.autogen.IOStreamAdapter.messages","title":"messages  <code>instance-attribute</code>","text":"<pre><code>messages: list[IOMessage] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/#fastagency.runtime.autogen.IOStreamAdapter.ui","title":"ui  <code>instance-attribute</code>","text":"<pre><code>ui = ui\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/#fastagency.runtime.autogen.IOStreamAdapter.input","title":"input","text":"<pre><code>input(prompt: str = '', *, password: bool = False) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def input(self, prompt: str = \"\", *, password: bool = False) -&gt; str:\n    # logger.info(f\"input(): {prompt=}, {password=}\")\n    message: AskingMessage = self.current_message.process_input(\n        prompt, password, self.messages\n    )\n\n    retval: str = self.ui.process_message(message)  # type: ignore[assignment]\n\n    # in case of approving a suggested function call, we need to return an empty string to AutoGen\n    if (\n        message.type == \"multiple_choice\"\n        and self.messages[-1].type == \"suggested_function_call\"\n        and retval == \"Approve\"\n    ):\n        retval = \"\"\n    if retval == \"Exit\":\n        retval = \"exit\"\n\n    # logger.info(f\"input(): {retval=}\")\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/#fastagency.runtime.autogen.IOStreamAdapter.print","title":"print","text":"<pre><code>print(\n    *objects: Any,\n    sep: str = \" \",\n    end: str = \"\\n\",\n    flush: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def print(\n    self, *objects: Any, sep: str = \" \", end: str = \"\\n\", flush: bool = False\n) -&gt; None:\n    # logger.info(f\"print(): {objects=}, {sep=}, {end=}, {flush=}\")\n    body = sep.join(map(str, objects)) + end\n    num_to_send = self._process_message_chunk(body)\n    for i in range(-num_to_send, 0, 1):\n        message = self.messages[i]\n        self.ui.process_message(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/agents/websurfer/WebSurferAgent/","title":"WebSurferAgent","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/agents/websurfer/WebSurferAgent/#fastagency.runtime.autogen.agents.websurfer.WebSurferAgent","title":"fastagency.runtime.autogen.agents.websurfer.WebSurferAgent","text":"<pre><code>WebSurferAgent(\n    *args: Any,\n    name: str,\n    llm_config: dict[str, Any],\n    summarizer_llm_config: dict[str, Any],\n    executor: Union[\n        ConversableAgent, list[ConversableAgent]\n    ],\n    system_message: str = \"You are a web surfer\",\n    **kwargs: Any\n)\n</code></pre> <p>               Bases: <code>AssistantAgent</code></p> <p>Initialize the WebSurferAgent.</p> PARAMETER DESCRIPTION <code>*args</code> <p>The positional arguments.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> <code>name</code> <p>The name of the agent.</p> <p> TYPE: <code>str</code> </p> <code>llm_config</code> <p>The LLM configuration.</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>summarizer_llm_config</code> <p>The summarizer LLM configuration.</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>executor</code> <p>The executor agent(s).</p> <p> TYPE: <code>Union[ConversableAgent, list[ConversableAgent]]</code> </p> <code>system_message</code> <p>The system message.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'You are a web surfer'</code> </p> <code>**kwargs</code> <p>The keyword arguments.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Source code in <code>fastagency/runtime/autogen/agents/websurfer.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    name: str,\n    llm_config: dict[str, Any],\n    summarizer_llm_config: dict[str, Any],\n    executor: Union[ConversableAgent, list[ConversableAgent]],\n    system_message: str = \"You are a web surfer\",\n    **kwargs: Any,\n):\n    \"\"\"Initialize the WebSurferAgent.\n\n    Args:\n        *args (Any): The positional arguments.\n        name (str): The name of the agent.\n        llm_config (dict[str, Any]): The LLM configuration.\n        summarizer_llm_config (dict[str, Any]): The summarizer LLM configuration.\n        executor (Union[ConversableAgent, list[ConversableAgent]]): The executor agent(s).\n        system_message (str): The system message.\n        **kwargs (Any): The keyword arguments.\n    \"\"\"\n    super().__init__(\n        *args,\n        name=name,\n        system_message=system_message,\n        llm_config=llm_config,\n        **kwargs,\n    )\n    self.web_surfer_tool = WebSurferTool(\n        name_prefix=\"Web_Surfer\",\n        llm_config=llm_config,\n        summarizer_llm_config=summarizer_llm_config,\n    )\n    self.web_surfer_tool.register(caller=self, executor=executor)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/agents/websurfer/WebSurferAgent/#fastagency.runtime.autogen.agents.websurfer.WebSurferAgent.web_surfer_tool","title":"web_surfer_tool  <code>instance-attribute</code>","text":"<pre><code>web_surfer_tool = WebSurferTool(\n    name_prefix=\"Web_Surfer\",\n    llm_config=llm_config,\n    summarizer_llm_config=summarizer_llm_config,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/","title":"AutoGenWorkflows","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/#fastagency.runtime.autogen.base.AutoGenWorkflows","title":"fastagency.runtime.autogen.base.AutoGenWorkflows","text":"<pre><code>AutoGenWorkflows()\n</code></pre> <p>               Bases: <code>Workflows</code></p> <p>Initialize the workflows.</p> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the workflows.\"\"\"\n    self._workflows: dict[\n        str, tuple[Callable[[Workflows, UI, str, str], str], str]\n    ] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/#fastagency.runtime.autogen.base.AutoGenWorkflows.names","title":"names  <code>property</code>","text":"<pre><code>names: list[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/#fastagency.runtime.autogen.base.AutoGenWorkflows.get_description","title":"get_description","text":"<pre><code>get_description(name: str) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def get_description(self, name: str) -&gt; str:\n    _, description = self._workflows.get(name, (None, \"Description not available!\"))\n    return description\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/#fastagency.runtime.autogen.base.AutoGenWorkflows.register","title":"register","text":"<pre><code>register(\n    name: str,\n    description: str,\n    *,\n    fail_on_redefintion: bool = False\n) -&gt; Callable[[Workflow], Workflow]\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def register(\n    self, name: str, description: str, *, fail_on_redefintion: bool = False\n) -&gt; Callable[[Workflow], Workflow]:\n    def decorator(func: Workflow) -&gt; Workflow:\n        if name in self._workflows:\n            if fail_on_redefintion:\n                raise ValueError(f\"A workflow with name '{name}' already exists.\")\n            else:\n                logger.warning(f\"Overwriting workflow with name '{name}'\")\n\n        self._workflows[name] = func, description\n        return func\n\n    return decorator\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/#fastagency.runtime.autogen.base.AutoGenWorkflows.register_api","title":"register_api","text":"<pre><code>register_api(\n    api: OpenAPI,\n    callers: Union[\n        ConversableAgent, Iterable[ConversableAgent]\n    ],\n    executors: Union[\n        ConversableAgent, Iterable[ConversableAgent]\n    ],\n    functions: Optional[\n        Union[\n            str,\n            Iterable[\n                Union[str, Mapping[str, Mapping[str, str]]]\n            ],\n        ]\n    ] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def register_api(\n    self,\n    api: \"OpenAPI\",\n    callers: Union[ConversableAgent, Iterable[ConversableAgent]],\n    executors: Union[ConversableAgent, Iterable[ConversableAgent]],\n    functions: Optional[\n        Union[str, Iterable[Union[str, Mapping[str, Mapping[str, str]]]]]\n    ] = None,\n) -&gt; None:\n    if not isinstance(callers, Iterable):\n        callers = [callers]\n    if not isinstance(executors, Iterable):\n        executors = [executors]\n    if isinstance(functions, str):\n        functions = [functions]\n\n    for caller in callers:\n        api._register_for_llm(caller, functions=functions)\n\n    for executor in executors:\n        api._register_for_execution(executor, functions=functions)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/#fastagency.runtime.autogen.base.AutoGenWorkflows.run","title":"run","text":"<pre><code>run(\n    name: str, session_id: str, ui: UI, initial_message: str\n) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def run(self, name: str, session_id: str, ui: UI, initial_message: str) -&gt; str:\n    workflow, description = self._workflows[name]\n\n    iostream = IOStreamAdapter(ui)\n\n    with IOStream.set_default(iostream):\n        return workflow(self, ui, initial_message, session_id)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/","title":"CurrentMessage","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage","title":"fastagency.runtime.autogen.base.CurrentMessage  <code>dataclass</code>","text":"<pre><code>CurrentMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    type: MessageType = \"text_message\",\n    auto_reply: bool = False,\n    body: Optional[str] = None,\n    call_id: Optional[str] = None,\n    function_name: Optional[str] = None,\n    arguments: Optional[dict[str, Any]] = None,\n    retval: Optional[Any] = None,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.arguments","title":"arguments  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>arguments: Optional[dict[str, Any]] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.body","title":"body  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>body: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.call_id","title":"call_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>call_id: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.function_name","title":"function_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function_name: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.retval","title":"retval  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>retval: Optional[Any] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: MessageType = 'text_message'\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.create_message","title":"create_message","text":"<pre><code>create_message() -&gt; list[IOMessage]\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def create_message(self) -&gt; list[IOMessage]:\n    retval: list[IOMessage] = []\n    kwargs = {k: v for k, v in asdict(self).items() if v is not None}\n    if (\n        kwargs.get(\"type\") in [\"suggested_function_call\", \"function_call_execution\"]\n        and \"body\" in kwargs\n    ):\n        body = kwargs.pop(\"body\")\n        sender = kwargs.get(\"sender\")\n        recipient = kwargs.get(\"recipient\")\n        retval = [\n            IOMessage.create(\n                body=body, sender=sender, recipient=recipient, type=\"text_message\"\n            )\n        ]\n\n    retval.append(IOMessage.create(**kwargs))\n    # logger.info(f\"CurrentMessage.create_message(): {kwargs=}\")\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.process_chunk","title":"process_chunk","text":"<pre><code>process_chunk(chunk: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def process_chunk(self, chunk: str) -&gt; bool:  # noqa: C901\n    # logger.info(f\"CurrentMessage.process_chunk({chunk=}):\")\n    if _match(\"end_of_message\", chunk):\n        return True\n\n    if _match(\"auto_reply\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): auto_reply detected\")\n        self.auto_reply = True\n    elif _match(\"sender_recipient\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): sender_recipient detected\")\n        self.sender, self.recipient = _findall(\"sender_recipient\", chunk)\n    elif _match(\"suggested_function_call\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): suggested_function_call detected\")\n        self.call_id, self.function_name = _findall(\n            \"suggested_function_call\", chunk\n        )\n        self.type = \"suggested_function_call\"\n    elif _match(\"stars\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): stars detected\")\n        pass\n    elif _match(\"function_call_execution\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): function_call_execution detected\")\n        self.function_name = _findall(\"function_call_execution\", chunk)  # type: ignore[assignment]\n        self.type = \"function_call_execution\"\n    elif _match(\"response_from_calling_tool\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): response_from_calling_tool detected\")\n        self.type = \"function_call_execution\"\n        self.call_id = _findall(\"response_from_calling_tool\", chunk)  # type: ignore[assignment]\n    elif _match(\"no_human_input_received\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): no_human_input_received detected\")\n        pass\n    elif _match(\"user_interrupted\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): user_interrupted detected\")\n        pass\n    elif _match(\"next_speaker\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): next_speaker detected\")\n        pass\n    else:\n        if self.type == \"suggested_function_call\":\n            if _match(\"arguments\", chunk):\n                # logger.info(\"CurrentMessage.process_chunk(): parsing arguments\")\n                arguments_json: str = _findall(\"arguments\", chunk)  # type: ignore[assignment]\n                self.arguments = json.loads(arguments_json)\n            else:\n                logger.warning(\n                    f\"CurrentMessage.process_chunk(): unexpected chunk: {chunk=}, {self=}\"\n                )\n        elif self.type == \"function_call_execution\":\n            # logger.info(\"CurrentMessage.process_chunk(): parsing retval\")\n            self.retval = chunk\n        else:\n            # logger.info(\"CurrentMessage.process_chunk(): parsing body\")\n            self.body = chunk if self.body is None else self.body + chunk\n\n    return False\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.process_input","title":"process_input","text":"<pre><code>process_input(\n    prompt: str, password: bool, messages: list[IOMessage]\n) -&gt; AskingMessage\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def process_input(\n    self, prompt: str, password: bool, messages: list[IOMessage]\n) -&gt; AskingMessage:\n    last_message = messages[-1]\n    sender, recipient = None, None\n    message: AskingMessage\n\n    if _match(\"auto_reply_input\", prompt):\n        # logger.info(\"IOStreamAdapter.input(): auto_reply_input detected\")\n        sender, recipient = _findall(\"auto_reply_input\", prompt)  # type: ignore[assignment]\n\n    if last_message.type == \"suggested_function_call\":\n        # logger.info(\"IOStreamAdapter.input(): suggested_function_call detected\")\n        message = MultipleChoice(\n            sender=sender,\n            recipient=recipient,\n            prompt=\"Please approve the suggested function call.\",\n            choices=[\"Approve\", \"Reject\", \"Exit\"],\n            default=\"Approve\",\n        )\n    else:\n        # logger.info(\"IOStreamAdapter.input(): text_message detected\")\n        message = TextInput(\n            sender=None, recipient=None, prompt=prompt, password=password\n        )\n\n    return message\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/","title":"IOStreamAdapter","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/#fastagency.runtime.autogen.base.IOStreamAdapter","title":"fastagency.runtime.autogen.base.IOStreamAdapter","text":"<pre><code>IOStreamAdapter(ui: UI)\n</code></pre> <p>Initialize the adapter with a ChatableIO object.</p> PARAMETER DESCRIPTION <code>ui</code> <p>The ChatableIO object to adapt</p> <p> TYPE: <code>ChatableIO</code> </p> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def __init__(self, ui: UI) -&gt; None:\n    \"\"\"Initialize the adapter with a ChatableIO object.\n\n    Args:\n        ui (ChatableIO): The ChatableIO object to adapt\n\n    \"\"\"\n    self.ui = ui\n    self.current_message = CurrentMessage()\n\n    self.messages: list[IOMessage] = []\n    if not isinstance(self.ui, UI):\n        raise ValueError(\"The ui object must be an instance of UI.\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/#fastagency.runtime.autogen.base.IOStreamAdapter.current_message","title":"current_message  <code>instance-attribute</code>","text":"<pre><code>current_message = CurrentMessage()\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/#fastagency.runtime.autogen.base.IOStreamAdapter.messages","title":"messages  <code>instance-attribute</code>","text":"<pre><code>messages: list[IOMessage] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/#fastagency.runtime.autogen.base.IOStreamAdapter.ui","title":"ui  <code>instance-attribute</code>","text":"<pre><code>ui = ui\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/#fastagency.runtime.autogen.base.IOStreamAdapter.input","title":"input","text":"<pre><code>input(prompt: str = '', *, password: bool = False) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def input(self, prompt: str = \"\", *, password: bool = False) -&gt; str:\n    # logger.info(f\"input(): {prompt=}, {password=}\")\n    message: AskingMessage = self.current_message.process_input(\n        prompt, password, self.messages\n    )\n\n    retval: str = self.ui.process_message(message)  # type: ignore[assignment]\n\n    # in case of approving a suggested function call, we need to return an empty string to AutoGen\n    if (\n        message.type == \"multiple_choice\"\n        and self.messages[-1].type == \"suggested_function_call\"\n        and retval == \"Approve\"\n    ):\n        retval = \"\"\n    if retval == \"Exit\":\n        retval = \"exit\"\n\n    # logger.info(f\"input(): {retval=}\")\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/#fastagency.runtime.autogen.base.IOStreamAdapter.print","title":"print","text":"<pre><code>print(\n    *objects: Any,\n    sep: str = \" \",\n    end: str = \"\\n\",\n    flush: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def print(\n    self, *objects: Any, sep: str = \" \", end: str = \"\\n\", flush: bool = False\n) -&gt; None:\n    # logger.info(f\"print(): {objects=}, {sep=}, {end=}, {flush=}\")\n    body = sep.join(map(str, objects)) + end\n    num_to_send = self._process_message_chunk(body)\n    for i in range(-num_to_send, 0, 1):\n        message = self.messages[i]\n        self.ui.process_message(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/Toolable/","title":"Toolable","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/Toolable/#fastagency.runtime.autogen.base.Toolable","title":"fastagency.runtime.autogen.base.Toolable","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/Toolable/#fastagency.runtime.autogen.base.Toolable.register","title":"register","text":"<pre><code>register(\n    *,\n    caller: ConversableAgent,\n    executor: Union[\n        ConversableAgent, list[ConversableAgent]\n    ]\n) -&gt; None\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def register(\n    self,\n    *,\n    caller: ConversableAgent,\n    executor: Union[ConversableAgent, list[ConversableAgent]],\n) -&gt; None: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/","title":"WebSurferTool","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool","title":"fastagency.runtime.autogen.tools.WebSurferTool","text":"<pre><code>WebSurferTool(\n    *,\n    name_prefix: str,\n    llm_config: dict[str, Any],\n    summarizer_llm_config: dict[str, Any],\n    viewport_size: int = 4096,\n    bing_api_key: Optional[str] = None,\n    max_consecutive_auto_reply: int = 30,\n    max_links_to_click: int = 10,\n    websurfer_kwargs: Optional[dict[str, Any]] = None,\n    assistant_kwargs: Optional[dict[str, Any]] = None\n)\n</code></pre> <p>Create a new WebSurferChat instance.</p> PARAMETER DESCRIPTION <code>name_prefix</code> <p>The name prefix of the inner AutoGen agents</p> <p> TYPE: <code>str</code> </p> <code>llm_config</code> <p>The LLM configuration</p> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>summarizer_llm_config</code> <p>The summarizer LLM configuration</p> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>viewport_size</code> <p>The viewport size. Defaults to 4096.</p> <p> TYPE: <code>int</code> DEFAULT: <code>4096</code> </p> <code>bing_api_key</code> <p>The Bing API key. Defaults to None.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>max_consecutive_auto_reply</code> <p>The maximum consecutive auto reply. Defaults to 30.</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> <code>max_links_to_click</code> <p>The maximum links to click. Defaults to 10.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>websurfer_kwargs</code> <p>The WebSurfer kwargs. Defaults to None.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>assistant_kwargs</code> <p>The Assistant kwargs. Defaults to None.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name_prefix: str,\n    llm_config: dict[str, Any],\n    summarizer_llm_config: dict[str, Any],\n    viewport_size: int = 4096,\n    bing_api_key: Optional[str] = None,\n    max_consecutive_auto_reply: int = 30,\n    max_links_to_click: int = 10,\n    websurfer_kwargs: Optional[dict[str, Any]] = None,\n    assistant_kwargs: Optional[dict[str, Any]] = None,\n):\n    \"\"\"Create a new WebSurferChat instance.\n\n    Args:\n        name_prefix (str): The name prefix of the inner AutoGen agents\n        llm_config (Dict[str, Any]): The LLM configuration\n        summarizer_llm_config (Dict[str, Any]): The summarizer LLM configuration\n        viewport_size (int, optional): The viewport size. Defaults to 4096.\n        bing_api_key (Optional[str], optional): The Bing API key. Defaults to None.\n        max_consecutive_auto_reply (int, optional): The maximum consecutive auto reply. Defaults to 30.\n        max_links_to_click (int, optional): The maximum links to click. Defaults to 10.\n        websurfer_kwargs (Optional[Dict[str, Any]], optional): The WebSurfer kwargs. Defaults to None.\n        assistant_kwargs (Optional[Dict[str, Any]], optional): The Assistant kwargs. Defaults to None.\n    \"\"\"\n    if websurfer_kwargs is None:\n        websurfer_kwargs = {}\n    if assistant_kwargs is None:\n        assistant_kwargs = {}\n\n    self.name_prefix = name_prefix\n    self.llm_config = llm_config\n    self.summarizer_llm_config = summarizer_llm_config\n    self.viewport_size = viewport_size\n    self.bing_api_key = (\n        bing_api_key if bing_api_key is not None else os.getenv(\"BING_API_KEY\")\n    )\n    self.max_consecutive_auto_reply = max_consecutive_auto_reply\n    self.max_links_to_click = max_links_to_click\n    self.websurfer_kwargs = websurfer_kwargs\n    self.assistant_kwargs = assistant_kwargs\n\n    self.task = \"not set yet\"\n    self.last_is_termination_msg_error = \"\"\n\n    self.browser_config = {\n        \"viewport_size\": self.viewport_size,\n        \"bing_api_key\": self.bing_api_key,\n        \"request_kwargs\": {\n            \"headers\": {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\",\n            }\n        },\n    }\n\n    if \"human_input_mode\" in self.websurfer_kwargs:\n        self.websurfer_kwargs.pop(\"human_input_mode\")\n\n    self.websurfer = AutoGenWebSurferAgent(\n        name=f\"{self.name_prefix}_inner_websurfer\",\n        llm_config=self.llm_config,\n        summarizer_llm_config=self.summarizer_llm_config,\n        browser_config=self.browser_config,\n        human_input_mode=\"NEVER\",\n        is_termination_msg=self.is_termination_msg,\n        **self.websurfer_kwargs,\n    )\n\n    if \"human_input_mode\" in self.assistant_kwargs:\n        self.assistant_kwargs.pop(\"human_input_mode\")\n\n    self.assistant = AutoGenAssistantAgent(\n        name=f\"{self.name_prefix}_inner_assistant\",\n        llm_config=self.llm_config,\n        human_input_mode=\"NEVER\",\n        system_message=self.system_message,\n        max_consecutive_auto_reply=self.max_consecutive_auto_reply,\n        # is_termination_msg=self.is_termination_msg,\n        **self.assistant_kwargs,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.assistant","title":"assistant  <code>instance-attribute</code>","text":"<pre><code>assistant = AssistantAgent(\n    name=f\"{name_prefix}_inner_assistant\",\n    llm_config=llm_config,\n    human_input_mode=\"NEVER\",\n    system_message=system_message,\n    max_consecutive_auto_reply=max_consecutive_auto_reply,\n    **assistant_kwargs,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.assistant_kwargs","title":"assistant_kwargs  <code>instance-attribute</code>","text":"<pre><code>assistant_kwargs = assistant_kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.bing_api_key","title":"bing_api_key  <code>instance-attribute</code>","text":"<pre><code>bing_api_key = (\n    bing_api_key\n    if bing_api_key is not None\n    else getenv(\"BING_API_KEY\")\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.browser_config","title":"browser_config  <code>instance-attribute</code>","text":"<pre><code>browser_config = {\n    \"viewport_size\": viewport_size,\n    \"bing_api_key\": bing_api_key,\n    \"request_kwargs\": {\n        \"headers\": {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"\n        }\n    },\n}\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.error_message","title":"error_message  <code>property</code>","text":"<pre><code>error_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.example_answer","title":"example_answer  <code>property</code>","text":"<pre><code>example_answer: WebSurferAnswer\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.initial_message","title":"initial_message  <code>property</code>","text":"<pre><code>initial_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.last_is_termination_msg_error","title":"last_is_termination_msg_error  <code>instance-attribute</code>","text":"<pre><code>last_is_termination_msg_error = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.llm_config","title":"llm_config  <code>instance-attribute</code>","text":"<pre><code>llm_config = llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.max_consecutive_auto_reply","title":"max_consecutive_auto_reply  <code>instance-attribute</code>","text":"<pre><code>max_consecutive_auto_reply = max_consecutive_auto_reply\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.max_links_to_click","title":"max_links_to_click  <code>instance-attribute</code>","text":"<pre><code>max_links_to_click = max_links_to_click\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.name_prefix","title":"name_prefix  <code>instance-attribute</code>","text":"<pre><code>name_prefix = name_prefix\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.summarizer_llm_config","title":"summarizer_llm_config  <code>instance-attribute</code>","text":"<pre><code>summarizer_llm_config = summarizer_llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.system_message","title":"system_message  <code>property</code>","text":"<pre><code>system_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task = 'not set yet'\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.viewport_size","title":"viewport_size  <code>instance-attribute</code>","text":"<pre><code>viewport_size = viewport_size\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.websurfer","title":"websurfer  <code>instance-attribute</code>","text":"<pre><code>websurfer = WebSurferAgent(\n    name=f\"{name_prefix}_inner_websurfer\",\n    llm_config=llm_config,\n    summarizer_llm_config=summarizer_llm_config,\n    browser_config=browser_config,\n    human_input_mode=\"NEVER\",\n    is_termination_msg=is_termination_msg,\n    **websurfer_kwargs,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.websurfer_kwargs","title":"websurfer_kwargs  <code>instance-attribute</code>","text":"<pre><code>websurfer_kwargs = websurfer_kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.continue_task_with_additional_instructions","title":"continue_task_with_additional_instructions","text":"<pre><code>continue_task_with_additional_instructions(\n    message: str,\n) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>def continue_task_with_additional_instructions(\n    self, message: Annotated[str, \"a followup message to the existing task\"]\n) -&gt; str:\n    try:\n        answer = self._chat_with_websurfer(\n            message=message,\n            clear_history=False,\n        )\n    except Exception as e:\n        return self._get_error_from_exception(message, e)\n\n    return self.create_final_reply(message, answer)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.create_final_reply","title":"create_final_reply","text":"<pre><code>create_final_reply(\n    task: str, message: WebSurferAnswer\n) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>def create_final_reply(self, task: str, message: WebSurferAnswer) -&gt; str:\n    retval = (\n        \"We have successfully completed the task:\\n\\n\"\n        if message.is_successful\n        else \"We have failed to complete the task:\\n\\n\"\n    )\n    retval += f\"{task}\\n\\n\"\n    retval += f\"Short answer: {message.short_answer}\\n\\n\"\n    retval += f\"Explanation: {message.long_answer}\\n\\n\"\n    retval += \"Visited links:\\n\"\n    for link in message.visited_links:\n        retval += f\"  - {link}\\n\"\n\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.create_new_task","title":"create_new_task","text":"<pre><code>create_new_task(task: str) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>def create_new_task(\n    self, task: Annotated[str, \"a new task for websurfer to perform\"]\n) -&gt; str:\n    self.task = task\n    try:\n        answer = self._chat_with_websurfer(\n            message=self.initial_message,\n            clear_history=True,\n        )\n    except Exception as e:\n        return self._get_error_from_exception(task, e)\n\n    return self.create_final_reply(task, answer)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.is_termination_msg","title":"is_termination_msg","text":"<pre><code>is_termination_msg(msg: dict[str, Any]) -&gt; bool\n</code></pre> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>def is_termination_msg(self, msg: dict[str, Any]) -&gt; bool:\n    # print(f\"is_termination_msg({msg=})\")\n    if (\n        \"content\" in msg\n        and msg[\"content\"] is not None\n        and \"TERMINATE\" in msg[\"content\"]\n    ):\n        return True\n    try:\n        WebSurferAnswer.model_validate_json(msg[\"content\"])\n        return True\n    except Exception as e:\n        self.last_is_termination_msg_error = str(e)\n        return False\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/WebSurferTool/#fastagency.runtime.autogen.tools.WebSurferTool.register","title":"register","text":"<pre><code>register(\n    *,\n    caller: ConversableAgent,\n    executor: Union[\n        ConversableAgent, list[ConversableAgent]\n    ]\n) -&gt; None\n</code></pre> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>def register(\n    self,\n    *,\n    caller: AutoGenConversableAgent,\n    executor: Union[AutoGenConversableAgent, list[AutoGenConversableAgent]],\n) -&gt; None:\n    @caller.register_for_llm(  # type: ignore[misc]\n        name=\"create_new_websurfing_task\",\n        description=\"Creates a new task for a websurfer that can include searching or browsing the internet.\",\n    )\n    def create_new_task(\n        task: Annotated[str, \"a new task for websurfer to perform\"],\n    ) -&gt; str:\n        return self.create_new_task(task)\n\n    @caller.register_for_llm(  # type: ignore[misc]\n        name=\"continue_websurfing_task_with_additional_instructions\",\n        description=\"Continue an existing task for a websurfer with additional instructions.\",\n    )\n    def continue_task_with_additional_instructions(\n        message: Annotated[\n            str,\n            \"Additional instructions for the task after receiving the initial answer\",\n        ],\n    ) -&gt; str:\n        return self.continue_task_with_additional_instructions(message)\n\n    executors = executor if isinstance(executor, list) else [executor]\n    for executor in executors:\n        executor.register_for_execution(name=\"create_new_websurfing_task\")(\n            create_new_task\n        )\n        executor.register_for_execution(\n            name=\"continue_websurfing_task_with_additional_instructions\"\n        )(continue_task_with_additional_instructions)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferAnswer/","title":"WebSurferAnswer","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferAnswer/#fastagency.runtime.autogen.tools.web_surfer.WebSurferAnswer","title":"fastagency.runtime.autogen.tools.web_surfer.WebSurferAnswer","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferAnswer/#fastagency.runtime.autogen.tools.web_surfer.WebSurferAnswer.is_successful","title":"is_successful  <code>instance-attribute</code>","text":"<pre><code>is_successful: bool\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferAnswer/#fastagency.runtime.autogen.tools.web_surfer.WebSurferAnswer.long_answer","title":"long_answer  <code>instance-attribute</code>","text":"<pre><code>long_answer: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferAnswer/#fastagency.runtime.autogen.tools.web_surfer.WebSurferAnswer.short_answer","title":"short_answer  <code>instance-attribute</code>","text":"<pre><code>short_answer: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferAnswer/#fastagency.runtime.autogen.tools.web_surfer.WebSurferAnswer.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferAnswer/#fastagency.runtime.autogen.tools.web_surfer.WebSurferAnswer.visited_links","title":"visited_links  <code>instance-attribute</code>","text":"<pre><code>visited_links: list[HttpUrl]\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferAnswer/#fastagency.runtime.autogen.tools.web_surfer.WebSurferAnswer.get_example_answer","title":"get_example_answer  <code>staticmethod</code>","text":"<pre><code>get_example_answer() -&gt; WebSurferAnswer\n</code></pre> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>@staticmethod\ndef get_example_answer() -&gt; \"WebSurferAnswer\":\n    return WebSurferAnswer(\n        task=\"What is the most popular QLED TV to buy on amazon.com?\",\n        is_successful=True,\n        short_answer='Amazon Fire TV 55\" Omni QLED Series 4K UHD smart TV',\n        long_answer='Amazon has the best selling page by different categories and there is a category for QLED TVs under electroincs. The most popular QLED TV is Amazon Fire TV 55\" Omni QLED Series 4K UHD smart TV, Dolby Vision IQ, Fire TV Ambient Experience, local dimming, hands-free with Alexa. It is the best selling QLED TV on Amazon.',\n        visited_links=[\n            \"https://www.amazon.com/Best-Sellers/\",\n            \"https://www.amazon.com/Best-Sellers-Electronics-QLED-TVs/\",\n        ],\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/","title":"WebSurferTool","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool","title":"fastagency.runtime.autogen.tools.web_surfer.WebSurferTool","text":"<pre><code>WebSurferTool(\n    *,\n    name_prefix: str,\n    llm_config: dict[str, Any],\n    summarizer_llm_config: dict[str, Any],\n    viewport_size: int = 4096,\n    bing_api_key: Optional[str] = None,\n    max_consecutive_auto_reply: int = 30,\n    max_links_to_click: int = 10,\n    websurfer_kwargs: Optional[dict[str, Any]] = None,\n    assistant_kwargs: Optional[dict[str, Any]] = None\n)\n</code></pre> <p>Create a new WebSurferChat instance.</p> PARAMETER DESCRIPTION <code>name_prefix</code> <p>The name prefix of the inner AutoGen agents</p> <p> TYPE: <code>str</code> </p> <code>llm_config</code> <p>The LLM configuration</p> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>summarizer_llm_config</code> <p>The summarizer LLM configuration</p> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>viewport_size</code> <p>The viewport size. Defaults to 4096.</p> <p> TYPE: <code>int</code> DEFAULT: <code>4096</code> </p> <code>bing_api_key</code> <p>The Bing API key. Defaults to None.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>max_consecutive_auto_reply</code> <p>The maximum consecutive auto reply. Defaults to 30.</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> <code>max_links_to_click</code> <p>The maximum links to click. Defaults to 10.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>websurfer_kwargs</code> <p>The WebSurfer kwargs. Defaults to None.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>assistant_kwargs</code> <p>The Assistant kwargs. Defaults to None.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name_prefix: str,\n    llm_config: dict[str, Any],\n    summarizer_llm_config: dict[str, Any],\n    viewport_size: int = 4096,\n    bing_api_key: Optional[str] = None,\n    max_consecutive_auto_reply: int = 30,\n    max_links_to_click: int = 10,\n    websurfer_kwargs: Optional[dict[str, Any]] = None,\n    assistant_kwargs: Optional[dict[str, Any]] = None,\n):\n    \"\"\"Create a new WebSurferChat instance.\n\n    Args:\n        name_prefix (str): The name prefix of the inner AutoGen agents\n        llm_config (Dict[str, Any]): The LLM configuration\n        summarizer_llm_config (Dict[str, Any]): The summarizer LLM configuration\n        viewport_size (int, optional): The viewport size. Defaults to 4096.\n        bing_api_key (Optional[str], optional): The Bing API key. Defaults to None.\n        max_consecutive_auto_reply (int, optional): The maximum consecutive auto reply. Defaults to 30.\n        max_links_to_click (int, optional): The maximum links to click. Defaults to 10.\n        websurfer_kwargs (Optional[Dict[str, Any]], optional): The WebSurfer kwargs. Defaults to None.\n        assistant_kwargs (Optional[Dict[str, Any]], optional): The Assistant kwargs. Defaults to None.\n    \"\"\"\n    if websurfer_kwargs is None:\n        websurfer_kwargs = {}\n    if assistant_kwargs is None:\n        assistant_kwargs = {}\n\n    self.name_prefix = name_prefix\n    self.llm_config = llm_config\n    self.summarizer_llm_config = summarizer_llm_config\n    self.viewport_size = viewport_size\n    self.bing_api_key = (\n        bing_api_key if bing_api_key is not None else os.getenv(\"BING_API_KEY\")\n    )\n    self.max_consecutive_auto_reply = max_consecutive_auto_reply\n    self.max_links_to_click = max_links_to_click\n    self.websurfer_kwargs = websurfer_kwargs\n    self.assistant_kwargs = assistant_kwargs\n\n    self.task = \"not set yet\"\n    self.last_is_termination_msg_error = \"\"\n\n    self.browser_config = {\n        \"viewport_size\": self.viewport_size,\n        \"bing_api_key\": self.bing_api_key,\n        \"request_kwargs\": {\n            \"headers\": {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\",\n            }\n        },\n    }\n\n    if \"human_input_mode\" in self.websurfer_kwargs:\n        self.websurfer_kwargs.pop(\"human_input_mode\")\n\n    self.websurfer = AutoGenWebSurferAgent(\n        name=f\"{self.name_prefix}_inner_websurfer\",\n        llm_config=self.llm_config,\n        summarizer_llm_config=self.summarizer_llm_config,\n        browser_config=self.browser_config,\n        human_input_mode=\"NEVER\",\n        is_termination_msg=self.is_termination_msg,\n        **self.websurfer_kwargs,\n    )\n\n    if \"human_input_mode\" in self.assistant_kwargs:\n        self.assistant_kwargs.pop(\"human_input_mode\")\n\n    self.assistant = AutoGenAssistantAgent(\n        name=f\"{self.name_prefix}_inner_assistant\",\n        llm_config=self.llm_config,\n        human_input_mode=\"NEVER\",\n        system_message=self.system_message,\n        max_consecutive_auto_reply=self.max_consecutive_auto_reply,\n        # is_termination_msg=self.is_termination_msg,\n        **self.assistant_kwargs,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.assistant","title":"assistant  <code>instance-attribute</code>","text":"<pre><code>assistant = AssistantAgent(\n    name=f\"{name_prefix}_inner_assistant\",\n    llm_config=llm_config,\n    human_input_mode=\"NEVER\",\n    system_message=system_message,\n    max_consecutive_auto_reply=max_consecutive_auto_reply,\n    **assistant_kwargs,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.assistant_kwargs","title":"assistant_kwargs  <code>instance-attribute</code>","text":"<pre><code>assistant_kwargs = assistant_kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.bing_api_key","title":"bing_api_key  <code>instance-attribute</code>","text":"<pre><code>bing_api_key = (\n    bing_api_key\n    if bing_api_key is not None\n    else getenv(\"BING_API_KEY\")\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.browser_config","title":"browser_config  <code>instance-attribute</code>","text":"<pre><code>browser_config = {\n    \"viewport_size\": viewport_size,\n    \"bing_api_key\": bing_api_key,\n    \"request_kwargs\": {\n        \"headers\": {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"\n        }\n    },\n}\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.error_message","title":"error_message  <code>property</code>","text":"<pre><code>error_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.example_answer","title":"example_answer  <code>property</code>","text":"<pre><code>example_answer: WebSurferAnswer\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.initial_message","title":"initial_message  <code>property</code>","text":"<pre><code>initial_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.last_is_termination_msg_error","title":"last_is_termination_msg_error  <code>instance-attribute</code>","text":"<pre><code>last_is_termination_msg_error = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.llm_config","title":"llm_config  <code>instance-attribute</code>","text":"<pre><code>llm_config = llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.max_consecutive_auto_reply","title":"max_consecutive_auto_reply  <code>instance-attribute</code>","text":"<pre><code>max_consecutive_auto_reply = max_consecutive_auto_reply\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.max_links_to_click","title":"max_links_to_click  <code>instance-attribute</code>","text":"<pre><code>max_links_to_click = max_links_to_click\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.name_prefix","title":"name_prefix  <code>instance-attribute</code>","text":"<pre><code>name_prefix = name_prefix\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.summarizer_llm_config","title":"summarizer_llm_config  <code>instance-attribute</code>","text":"<pre><code>summarizer_llm_config = summarizer_llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.system_message","title":"system_message  <code>property</code>","text":"<pre><code>system_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task = 'not set yet'\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.viewport_size","title":"viewport_size  <code>instance-attribute</code>","text":"<pre><code>viewport_size = viewport_size\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.websurfer","title":"websurfer  <code>instance-attribute</code>","text":"<pre><code>websurfer = WebSurferAgent(\n    name=f\"{name_prefix}_inner_websurfer\",\n    llm_config=llm_config,\n    summarizer_llm_config=summarizer_llm_config,\n    browser_config=browser_config,\n    human_input_mode=\"NEVER\",\n    is_termination_msg=is_termination_msg,\n    **websurfer_kwargs,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.websurfer_kwargs","title":"websurfer_kwargs  <code>instance-attribute</code>","text":"<pre><code>websurfer_kwargs = websurfer_kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.continue_task_with_additional_instructions","title":"continue_task_with_additional_instructions","text":"<pre><code>continue_task_with_additional_instructions(\n    message: str,\n) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>def continue_task_with_additional_instructions(\n    self, message: Annotated[str, \"a followup message to the existing task\"]\n) -&gt; str:\n    try:\n        answer = self._chat_with_websurfer(\n            message=message,\n            clear_history=False,\n        )\n    except Exception as e:\n        return self._get_error_from_exception(message, e)\n\n    return self.create_final_reply(message, answer)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.create_final_reply","title":"create_final_reply","text":"<pre><code>create_final_reply(\n    task: str, message: WebSurferAnswer\n) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>def create_final_reply(self, task: str, message: WebSurferAnswer) -&gt; str:\n    retval = (\n        \"We have successfully completed the task:\\n\\n\"\n        if message.is_successful\n        else \"We have failed to complete the task:\\n\\n\"\n    )\n    retval += f\"{task}\\n\\n\"\n    retval += f\"Short answer: {message.short_answer}\\n\\n\"\n    retval += f\"Explanation: {message.long_answer}\\n\\n\"\n    retval += \"Visited links:\\n\"\n    for link in message.visited_links:\n        retval += f\"  - {link}\\n\"\n\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.create_new_task","title":"create_new_task","text":"<pre><code>create_new_task(task: str) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>def create_new_task(\n    self, task: Annotated[str, \"a new task for websurfer to perform\"]\n) -&gt; str:\n    self.task = task\n    try:\n        answer = self._chat_with_websurfer(\n            message=self.initial_message,\n            clear_history=True,\n        )\n    except Exception as e:\n        return self._get_error_from_exception(task, e)\n\n    return self.create_final_reply(task, answer)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.is_termination_msg","title":"is_termination_msg","text":"<pre><code>is_termination_msg(msg: dict[str, Any]) -&gt; bool\n</code></pre> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>def is_termination_msg(self, msg: dict[str, Any]) -&gt; bool:\n    # print(f\"is_termination_msg({msg=})\")\n    if (\n        \"content\" in msg\n        and msg[\"content\"] is not None\n        and \"TERMINATE\" in msg[\"content\"]\n    ):\n        return True\n    try:\n        WebSurferAnswer.model_validate_json(msg[\"content\"])\n        return True\n    except Exception as e:\n        self.last_is_termination_msg_error = str(e)\n        return False\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/tools/web_surfer/WebSurferTool/#fastagency.runtime.autogen.tools.web_surfer.WebSurferTool.register","title":"register","text":"<pre><code>register(\n    *,\n    caller: ConversableAgent,\n    executor: Union[\n        ConversableAgent, list[ConversableAgent]\n    ]\n) -&gt; None\n</code></pre> Source code in <code>fastagency/runtime/autogen/tools/web_surfer.py</code> <pre><code>def register(\n    self,\n    *,\n    caller: AutoGenConversableAgent,\n    executor: Union[AutoGenConversableAgent, list[AutoGenConversableAgent]],\n) -&gt; None:\n    @caller.register_for_llm(  # type: ignore[misc]\n        name=\"create_new_websurfing_task\",\n        description=\"Creates a new task for a websurfer that can include searching or browsing the internet.\",\n    )\n    def create_new_task(\n        task: Annotated[str, \"a new task for websurfer to perform\"],\n    ) -&gt; str:\n        return self.create_new_task(task)\n\n    @caller.register_for_llm(  # type: ignore[misc]\n        name=\"continue_websurfing_task_with_additional_instructions\",\n        description=\"Continue an existing task for a websurfer with additional instructions.\",\n    )\n    def continue_task_with_additional_instructions(\n        message: Annotated[\n            str,\n            \"Additional instructions for the task after receiving the initial answer\",\n        ],\n    ) -&gt; str:\n        return self.continue_task_with_additional_instructions(message)\n\n    executors = executor if isinstance(executor, list) else [executor]\n    for executor in executors:\n        executor.register_for_execution(name=\"create_new_websurfing_task\")(\n            create_new_task\n        )\n        executor.register_for_execution(\n            name=\"continue_websurfing_task_with_additional_instructions\"\n        )(continue_task_with_additional_instructions)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/","title":"ConsoleUI","text":"","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI","title":"fastagency.ui.console.ConsoleUI","text":"<pre><code>ConsoleUI(super_conversation: Optional[ConsoleUI] = None)\n</code></pre> <p>               Bases: <code>IOMessageVisitor</code></p> <p>Initialize the console UI object.</p> PARAMETER DESCRIPTION <code>super_conversation</code> <p>The super conversation. Defaults to None.</p> <p> TYPE: <code>Optional[UI]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def __init__(\n    self,\n    super_conversation: Optional[\"ConsoleUI\"] = None,\n) -&gt; None:\n    \"\"\"Initialize the console UI object.\n\n    Args:\n        super_conversation (Optional[UI], optional): The super conversation. Defaults to None.\n    \"\"\"\n    self.super_conversation: Optional[ConsoleUI] = super_conversation\n    self.sub_conversations: list[ConsoleUI] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.level","title":"level  <code>property</code>","text":"<pre><code>level: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.sub_conversations","title":"sub_conversations  <code>instance-attribute</code>","text":"<pre><code>sub_conversations: list[ConsoleUI] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.super_conversation","title":"super_conversation  <code>instance-attribute</code>","text":"<pre><code>super_conversation: Optional[ConsoleUI] = super_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.ConsoleMessage","title":"ConsoleMessage  <code>dataclass</code>","text":"<pre><code>ConsoleMessage(\n    sender: Optional[str],\n    recipient: Optional[str],\n    heading: Optional[str],\n    body: Optional[str],\n)\n</code></pre> <p>A console message.</p>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.ConsoleMessage.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.ConsoleMessage.heading","title":"heading  <code>instance-attribute</code>","text":"<pre><code>heading: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.ConsoleMessage.recipient","title":"recipient  <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.ConsoleMessage.sender","title":"sender  <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.create","title":"create","text":"<pre><code>create(app: Runnable, import_string: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>@contextmanager\ndef create(self, app: Runnable, import_string: str) -&gt; Iterator[None]:\n    yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.create_subconversation","title":"create_subconversation","text":"<pre><code>create_subconversation() -&gt; ConsoleUI\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def create_subconversation(self) -&gt; \"ConsoleUI\":\n    sub_conversation = ConsoleUI(self)\n    self.sub_conversations.append(sub_conversation)\n\n    return sub_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]:\n    # logger.info(f\"process_message(): {message=}\")\n    return self.visit(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.start","title":"start","text":"<pre><code>start(\n    *,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def start(\n    self,\n    *,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False,\n) -&gt; None:\n    run_workflow(\n        wf=app.wf,\n        ui=self,\n        name=name,\n        initial_message=initial_message,\n        single_run=single_run,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit","title":"visit","text":"<pre><code>visit(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit(self, message: IOMessage) -&gt; Optional[str]:\n    method_name = f\"visit_{message.type}\"\n    method = getattr(self, method_name, self.visit_default)\n    return method(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_default","title":"visit_default","text":"<pre><code>visit_default(message: IOMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_default(self, message: IOMessage) -&gt; None:\n    content = message.model_dump()[\"content\"]\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=json.dumps(content, indent=2),\n    )\n    self._format_and_print(console_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_function_call_execution","title":"visit_function_call_execution","text":"<pre><code>visit_function_call_execution(\n    message: FunctionCallExecution,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_function_call_execution(\n    self, message: FunctionCallExecution\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_multiple_choice","title":"visit_multiple_choice","text":"<pre><code>visit_multiple_choice(message: MultipleChoice) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_multiple_choice(self, message: MultipleChoice) -&gt; str:\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=f\"{message.prompt} (choices: {', '.join(message.choices)}, default: {message.default})\",\n    )\n\n    prompt = self._format_message(console_msg)\n    prompt = self._indent(prompt)\n    while True:\n        # logger.info(f\"visit_multiple_choice(): {prompt=}\")\n        retval = input(prompt)\n        if retval in message.choices:\n            return retval\n        elif retval == \"\" and message.default:\n            return message.default\n        else:\n            print(f\"Invalid choice ('{retval}'). Please try again.\")  # noqa: T201 `print` found\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_suggested_function_call","title":"visit_suggested_function_call","text":"<pre><code>visit_suggested_function_call(\n    message: SuggestedFunctionCall,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_suggested_function_call(\n    self, message: SuggestedFunctionCall\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_system_message","title":"visit_system_message","text":"<pre><code>visit_system_message(\n    message: SystemMessage,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_system_message(self, message: SystemMessage) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_text_input","title":"visit_text_input","text":"<pre><code>visit_text_input(message: TextInput) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_text_input(self, message: TextInput) -&gt; str:\n    suggestions = (\n        f\" (suggestions: {', '.join(message.suggestions)})\"\n        if message.suggestions\n        else \"\"\n    )\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=f\"{message.prompt}{suggestions}:\",\n    )\n\n    prompt = self._format_message(console_msg)\n    prompt = self._indent(prompt)\n    if message.password:\n        return getpass.getpass(prompt)\n    else:\n        return input(prompt)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_text_message","title":"visit_text_message","text":"<pre><code>visit_text_message(message: TextMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_text_message(self, message: TextMessage) -&gt; None:\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=message.body,\n    )\n    self._format_and_print(console_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_workflow_completed","title":"visit_workflow_completed","text":"<pre><code>visit_workflow_completed(\n    message: WorkflowCompleted,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_workflow_completed(self, message: WorkflowCompleted) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/","title":"ConsoleUI","text":"","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI","title":"fastagency.ui.console.base.ConsoleUI","text":"<pre><code>ConsoleUI(super_conversation: Optional[ConsoleUI] = None)\n</code></pre> <p>               Bases: <code>IOMessageVisitor</code></p> <p>Initialize the console UI object.</p> PARAMETER DESCRIPTION <code>super_conversation</code> <p>The super conversation. Defaults to None.</p> <p> TYPE: <code>Optional[UI]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def __init__(\n    self,\n    super_conversation: Optional[\"ConsoleUI\"] = None,\n) -&gt; None:\n    \"\"\"Initialize the console UI object.\n\n    Args:\n        super_conversation (Optional[UI], optional): The super conversation. Defaults to None.\n    \"\"\"\n    self.super_conversation: Optional[ConsoleUI] = super_conversation\n    self.sub_conversations: list[ConsoleUI] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.level","title":"level  <code>property</code>","text":"<pre><code>level: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.sub_conversations","title":"sub_conversations  <code>instance-attribute</code>","text":"<pre><code>sub_conversations: list[ConsoleUI] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.super_conversation","title":"super_conversation  <code>instance-attribute</code>","text":"<pre><code>super_conversation: Optional[ConsoleUI] = super_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.ConsoleMessage","title":"ConsoleMessage  <code>dataclass</code>","text":"<pre><code>ConsoleMessage(\n    sender: Optional[str],\n    recipient: Optional[str],\n    heading: Optional[str],\n    body: Optional[str],\n)\n</code></pre> <p>A console message.</p>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.ConsoleMessage.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.ConsoleMessage.heading","title":"heading  <code>instance-attribute</code>","text":"<pre><code>heading: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.ConsoleMessage.recipient","title":"recipient  <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.ConsoleMessage.sender","title":"sender  <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.create","title":"create","text":"<pre><code>create(app: Runnable, import_string: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>@contextmanager\ndef create(self, app: Runnable, import_string: str) -&gt; Iterator[None]:\n    yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.create_subconversation","title":"create_subconversation","text":"<pre><code>create_subconversation() -&gt; ConsoleUI\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def create_subconversation(self) -&gt; \"ConsoleUI\":\n    sub_conversation = ConsoleUI(self)\n    self.sub_conversations.append(sub_conversation)\n\n    return sub_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]:\n    # logger.info(f\"process_message(): {message=}\")\n    return self.visit(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.start","title":"start","text":"<pre><code>start(\n    *,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def start(\n    self,\n    *,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False,\n) -&gt; None:\n    run_workflow(\n        wf=app.wf,\n        ui=self,\n        name=name,\n        initial_message=initial_message,\n        single_run=single_run,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit","title":"visit","text":"<pre><code>visit(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit(self, message: IOMessage) -&gt; Optional[str]:\n    method_name = f\"visit_{message.type}\"\n    method = getattr(self, method_name, self.visit_default)\n    return method(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_default","title":"visit_default","text":"<pre><code>visit_default(message: IOMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_default(self, message: IOMessage) -&gt; None:\n    content = message.model_dump()[\"content\"]\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=json.dumps(content, indent=2),\n    )\n    self._format_and_print(console_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_function_call_execution","title":"visit_function_call_execution","text":"<pre><code>visit_function_call_execution(\n    message: FunctionCallExecution,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_function_call_execution(\n    self, message: FunctionCallExecution\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_multiple_choice","title":"visit_multiple_choice","text":"<pre><code>visit_multiple_choice(message: MultipleChoice) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_multiple_choice(self, message: MultipleChoice) -&gt; str:\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=f\"{message.prompt} (choices: {', '.join(message.choices)}, default: {message.default})\",\n    )\n\n    prompt = self._format_message(console_msg)\n    prompt = self._indent(prompt)\n    while True:\n        # logger.info(f\"visit_multiple_choice(): {prompt=}\")\n        retval = input(prompt)\n        if retval in message.choices:\n            return retval\n        elif retval == \"\" and message.default:\n            return message.default\n        else:\n            print(f\"Invalid choice ('{retval}'). Please try again.\")  # noqa: T201 `print` found\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_suggested_function_call","title":"visit_suggested_function_call","text":"<pre><code>visit_suggested_function_call(\n    message: SuggestedFunctionCall,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_suggested_function_call(\n    self, message: SuggestedFunctionCall\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_system_message","title":"visit_system_message","text":"<pre><code>visit_system_message(\n    message: SystemMessage,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_system_message(self, message: SystemMessage) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_text_input","title":"visit_text_input","text":"<pre><code>visit_text_input(message: TextInput) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_text_input(self, message: TextInput) -&gt; str:\n    suggestions = (\n        f\" (suggestions: {', '.join(message.suggestions)})\"\n        if message.suggestions\n        else \"\"\n    )\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=f\"{message.prompt}{suggestions}:\",\n    )\n\n    prompt = self._format_message(console_msg)\n    prompt = self._indent(prompt)\n    if message.password:\n        return getpass.getpass(prompt)\n    else:\n        return input(prompt)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_text_message","title":"visit_text_message","text":"<pre><code>visit_text_message(message: TextMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_text_message(self, message: TextMessage) -&gt; None:\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=message.body,\n    )\n    self._format_and_print(console_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_workflow_completed","title":"visit_workflow_completed","text":"<pre><code>visit_workflow_completed(\n    message: WorkflowCompleted,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_workflow_completed(self, message: WorkflowCompleted) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/","title":"MesopUI","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI","title":"fastagency.ui.mesop.MesopUI","text":"<pre><code>MesopUI(super_conversation: Optional[MesopUI] = None)\n</code></pre> <p>               Bases: <code>IOMessageVisitor</code></p> <p>Initialize the console UI object.</p> PARAMETER DESCRIPTION <code>super_conversation</code> <p>The super conversation. Defaults to None.</p> <p> TYPE: <code>Optional[MesopUI]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def __init__(self, super_conversation: \"Optional[MesopUI]\" = None) -&gt; None:\n    \"\"\"Initialize the console UI object.\n\n    Args:\n        super_conversation (Optional[MesopUI], optional): The super conversation. Defaults to None.\n    \"\"\"\n    logger.info(f\"Initializing MesopUI: {self}\")\n    try:\n        self.id: str = uuid4().hex\n        self.super_conversation: Optional[MesopUI] = super_conversation\n        self.sub_conversations: list[MesopUI] = []\n        self._in_queue: Optional[Queue[str]] = None\n        self._out_queue: Optional[Queue[MesopMessage]] = None\n\n        if super_conversation is None:\n            self._in_queue = Queue()\n            self._out_queue = Queue()\n        MesopUI.register(self)\n\n        if MesopUI._me is None:\n            from .main import create_home_page, me\n\n            create_home_page(self)\n            MesopUI._me = me\n\n    except Exception as e:\n        logger.error(e, exc_info=True)\n        raise\n    logger.info(f\"Initialized MesopUI: {self}\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.app","title":"app  <code>property</code>","text":"<pre><code>app: Runnable\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str = hex\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.in_queue","title":"in_queue  <code>property</code>","text":"<pre><code>in_queue: Queue[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.is_root_conversation","title":"is_root_conversation  <code>property</code>","text":"<pre><code>is_root_conversation: bool\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.level","title":"level  <code>property</code>","text":"<pre><code>level: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.out_queue","title":"out_queue  <code>property</code>","text":"<pre><code>out_queue: Queue[MesopMessage]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.root_conversation","title":"root_conversation  <code>property</code>","text":"<pre><code>root_conversation: MesopUI\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.sub_conversations","title":"sub_conversations  <code>instance-attribute</code>","text":"<pre><code>sub_conversations: list[MesopUI] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.super_conversation","title":"super_conversation  <code>instance-attribute</code>","text":"<pre><code>super_conversation: Optional[MesopUI] = super_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.create","title":"create","text":"<pre><code>create(app: Runnable, import_string: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@contextmanager\ndef create(self, app: Runnable, import_string: str) -&gt; Iterator[None]:\n    logger.info(f\"Creating MesopUI with import string: {import_string}\")\n    MesopUI._app = app\n    MesopUI._import_string = import_string\n\n    start_script = \"\"\"import fastagency.ui.mesop.main\"\"\"\n\n    with TemporaryDirectory() as temp_dir:\n        main_path = Path(temp_dir) / \"main.py\"\n        with main_path.open(\"w\") as f:\n            f.write(start_script)\n\n        MESOP_FLAGS.mark_as_parsed()\n        MesopUI._main_path = str(main_path)\n        MesopUI._created_instance = self\n\n        yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.create_subconversation","title":"create_subconversation","text":"<pre><code>create_subconversation() -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def create_subconversation(self) -&gt; \"MesopUI\":\n    sub_conversation = MesopUI(self)\n    self.sub_conversations.append(sub_conversation)\n\n    return sub_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.get_conversation","title":"get_conversation  <code>classmethod</code>","text":"<pre><code>get_conversation(id: str) -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef get_conversation(cls, id: str) -&gt; \"MesopUI\":\n    return cls._registry[id]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.get_created_instance","title":"get_created_instance  <code>classmethod</code>","text":"<pre><code>get_created_instance() -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef get_created_instance(cls) -&gt; \"MesopUI\":\n    created_instance = cls._created_instance\n    if created_instance is None:\n        raise RuntimeError(\"MesopUI has not been created yet.\")\n\n    return created_instance\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.get_message_stream","title":"get_message_stream","text":"<pre><code>get_message_stream() -&gt; Generator[MesopMessage, None, None]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def get_message_stream(self) -&gt; Generator[MesopMessage, None, None]:\n    while True:\n        message = self.out_queue.get()\n        if self._is_stream_braker(message.io_message):\n            yield message\n            break\n        yield message\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.handle_wsgi","title":"handle_wsgi","text":"<pre><code>handle_wsgi(\n    app: Runnable,\n    environ: dict[str, Any],\n    start_response: Callable[..., Any],\n) -&gt; list[bytes]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def handle_wsgi(\n    self,\n    app: \"Runnable\",\n    environ: dict[str, Any],\n    start_response: Callable[..., Any],\n) -&gt; list[bytes]:\n    logger.info(f\"Starting MesopUI using WSGI interface with app: {app}\")\n    MesopUI._created_instance = self\n    MesopUI._app = app\n\n    if MesopUI._me is None:\n        logger.error(\"MesopUI._me is None\")\n        raise RuntimeError(\"MesopUI._me is None\")\n\n    return MesopUI._me(environ, start_response)  # type: ignore[no-any-return]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]:\n    return self.visit(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.register","title":"register  <code>classmethod</code>","text":"<pre><code>register(conversation: MesopUI) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef register(cls, conversation: \"MesopUI\") -&gt; None:\n    cls._registry[conversation.id] = conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.respond","title":"respond","text":"<pre><code>respond(message: str) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def respond(self, message: str) -&gt; None:\n    self.in_queue.put(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.respond_to","title":"respond_to  <code>classmethod</code>","text":"<pre><code>respond_to(\n    conversation_id: str, message: str\n) -&gt; Generator[MesopMessage, None, None]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef respond_to(\n    cls, conversation_id: str, message: str\n) -&gt; Generator[MesopMessage, None, None]:\n    conversation = cls.get_conversation(conversation_id)\n    conversation.respond(message)\n    return conversation.get_message_stream()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.start","title":"start","text":"<pre><code>start(\n    *,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def start(\n    self,\n    *,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False,\n) -&gt; None:\n    logger.info(\n        f\"Starting MesopUI: import_string={self._import_string}, main_path={self._main_path}\"\n    )\n    if single_run:\n        logger.warning(\"single_run parameter is currently not supported in MesopUI\")\n\n    MesopUI._app = app\n\n    mesop_main([\"mesop\", self._main_path])\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.unregister","title":"unregister  <code>classmethod</code>","text":"<pre><code>unregister(conversation: MesopUI) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef unregister(cls, conversation: \"MesopUI\") -&gt; None:\n    del cls._registry[conversation.id]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit","title":"visit","text":"<pre><code>visit(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit(self, message: IOMessage) -&gt; Optional[str]:\n    method_name = f\"visit_{message.type}\"\n    method = getattr(self, method_name, self.visit_default)\n    return method(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_default","title":"visit_default","text":"<pre><code>visit_default(message: IOMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_default(self, message: IOMessage) -&gt; None:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_function_call_execution","title":"visit_function_call_execution","text":"<pre><code>visit_function_call_execution(\n    message: FunctionCallExecution,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_function_call_execution(\n    self, message: FunctionCallExecution\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_multiple_choice","title":"visit_multiple_choice","text":"<pre><code>visit_multiple_choice(message: MultipleChoice) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_multiple_choice(self, message: MultipleChoice) -&gt; str:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n    return self.in_queue.get()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_suggested_function_call","title":"visit_suggested_function_call","text":"<pre><code>visit_suggested_function_call(\n    message: SuggestedFunctionCall,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_suggested_function_call(\n    self, message: SuggestedFunctionCall\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_system_message","title":"visit_system_message","text":"<pre><code>visit_system_message(\n    message: SystemMessage,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_system_message(self, message: SystemMessage) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_text_input","title":"visit_text_input","text":"<pre><code>visit_text_input(message: TextInput) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_text_input(self, message: TextInput) -&gt; str:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n    return self.in_queue.get()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_text_message","title":"visit_text_message","text":"<pre><code>visit_text_message(message: TextMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_text_message(self, message: TextMessage) -&gt; None:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_workflow_completed","title":"visit_workflow_completed","text":"<pre><code>visit_workflow_completed(\n    message: WorkflowCompleted,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_workflow_completed(self, message: WorkflowCompleted) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopMessage/","title":"MesopMessage","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopMessage/#fastagency.ui.mesop.base.MesopMessage","title":"fastagency.ui.mesop.base.MesopMessage  <code>dataclass</code>","text":"<pre><code>MesopMessage(io_message: IOMessage, conversation: MesopUI)\n</code></pre> <p>A Mesop message.</p>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopMessage/#fastagency.ui.mesop.base.MesopMessage.conversation","title":"conversation  <code>instance-attribute</code>","text":"<pre><code>conversation: MesopUI\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopMessage/#fastagency.ui.mesop.base.MesopMessage.io_message","title":"io_message  <code>instance-attribute</code>","text":"<pre><code>io_message: IOMessage\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/","title":"MesopUI","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI","title":"fastagency.ui.mesop.base.MesopUI","text":"<pre><code>MesopUI(super_conversation: Optional[MesopUI] = None)\n</code></pre> <p>               Bases: <code>IOMessageVisitor</code></p> <p>Initialize the console UI object.</p> PARAMETER DESCRIPTION <code>super_conversation</code> <p>The super conversation. Defaults to None.</p> <p> TYPE: <code>Optional[MesopUI]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def __init__(self, super_conversation: \"Optional[MesopUI]\" = None) -&gt; None:\n    \"\"\"Initialize the console UI object.\n\n    Args:\n        super_conversation (Optional[MesopUI], optional): The super conversation. Defaults to None.\n    \"\"\"\n    logger.info(f\"Initializing MesopUI: {self}\")\n    try:\n        self.id: str = uuid4().hex\n        self.super_conversation: Optional[MesopUI] = super_conversation\n        self.sub_conversations: list[MesopUI] = []\n        self._in_queue: Optional[Queue[str]] = None\n        self._out_queue: Optional[Queue[MesopMessage]] = None\n\n        if super_conversation is None:\n            self._in_queue = Queue()\n            self._out_queue = Queue()\n        MesopUI.register(self)\n\n        if MesopUI._me is None:\n            from .main import create_home_page, me\n\n            create_home_page(self)\n            MesopUI._me = me\n\n    except Exception as e:\n        logger.error(e, exc_info=True)\n        raise\n    logger.info(f\"Initialized MesopUI: {self}\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.app","title":"app  <code>property</code>","text":"<pre><code>app: Runnable\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str = hex\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.in_queue","title":"in_queue  <code>property</code>","text":"<pre><code>in_queue: Queue[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.is_root_conversation","title":"is_root_conversation  <code>property</code>","text":"<pre><code>is_root_conversation: bool\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.level","title":"level  <code>property</code>","text":"<pre><code>level: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.out_queue","title":"out_queue  <code>property</code>","text":"<pre><code>out_queue: Queue[MesopMessage]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.root_conversation","title":"root_conversation  <code>property</code>","text":"<pre><code>root_conversation: MesopUI\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.sub_conversations","title":"sub_conversations  <code>instance-attribute</code>","text":"<pre><code>sub_conversations: list[MesopUI] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.super_conversation","title":"super_conversation  <code>instance-attribute</code>","text":"<pre><code>super_conversation: Optional[MesopUI] = super_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.create","title":"create","text":"<pre><code>create(app: Runnable, import_string: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@contextmanager\ndef create(self, app: Runnable, import_string: str) -&gt; Iterator[None]:\n    logger.info(f\"Creating MesopUI with import string: {import_string}\")\n    MesopUI._app = app\n    MesopUI._import_string = import_string\n\n    start_script = \"\"\"import fastagency.ui.mesop.main\"\"\"\n\n    with TemporaryDirectory() as temp_dir:\n        main_path = Path(temp_dir) / \"main.py\"\n        with main_path.open(\"w\") as f:\n            f.write(start_script)\n\n        MESOP_FLAGS.mark_as_parsed()\n        MesopUI._main_path = str(main_path)\n        MesopUI._created_instance = self\n\n        yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.create_subconversation","title":"create_subconversation","text":"<pre><code>create_subconversation() -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def create_subconversation(self) -&gt; \"MesopUI\":\n    sub_conversation = MesopUI(self)\n    self.sub_conversations.append(sub_conversation)\n\n    return sub_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.get_conversation","title":"get_conversation  <code>classmethod</code>","text":"<pre><code>get_conversation(id: str) -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef get_conversation(cls, id: str) -&gt; \"MesopUI\":\n    return cls._registry[id]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.get_created_instance","title":"get_created_instance  <code>classmethod</code>","text":"<pre><code>get_created_instance() -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef get_created_instance(cls) -&gt; \"MesopUI\":\n    created_instance = cls._created_instance\n    if created_instance is None:\n        raise RuntimeError(\"MesopUI has not been created yet.\")\n\n    return created_instance\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.get_message_stream","title":"get_message_stream","text":"<pre><code>get_message_stream() -&gt; Generator[MesopMessage, None, None]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def get_message_stream(self) -&gt; Generator[MesopMessage, None, None]:\n    while True:\n        message = self.out_queue.get()\n        if self._is_stream_braker(message.io_message):\n            yield message\n            break\n        yield message\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.handle_wsgi","title":"handle_wsgi","text":"<pre><code>handle_wsgi(\n    app: Runnable,\n    environ: dict[str, Any],\n    start_response: Callable[..., Any],\n) -&gt; list[bytes]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def handle_wsgi(\n    self,\n    app: \"Runnable\",\n    environ: dict[str, Any],\n    start_response: Callable[..., Any],\n) -&gt; list[bytes]:\n    logger.info(f\"Starting MesopUI using WSGI interface with app: {app}\")\n    MesopUI._created_instance = self\n    MesopUI._app = app\n\n    if MesopUI._me is None:\n        logger.error(\"MesopUI._me is None\")\n        raise RuntimeError(\"MesopUI._me is None\")\n\n    return MesopUI._me(environ, start_response)  # type: ignore[no-any-return]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]:\n    return self.visit(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.register","title":"register  <code>classmethod</code>","text":"<pre><code>register(conversation: MesopUI) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef register(cls, conversation: \"MesopUI\") -&gt; None:\n    cls._registry[conversation.id] = conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.respond","title":"respond","text":"<pre><code>respond(message: str) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def respond(self, message: str) -&gt; None:\n    self.in_queue.put(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.respond_to","title":"respond_to  <code>classmethod</code>","text":"<pre><code>respond_to(\n    conversation_id: str, message: str\n) -&gt; Generator[MesopMessage, None, None]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef respond_to(\n    cls, conversation_id: str, message: str\n) -&gt; Generator[MesopMessage, None, None]:\n    conversation = cls.get_conversation(conversation_id)\n    conversation.respond(message)\n    return conversation.get_message_stream()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.start","title":"start","text":"<pre><code>start(\n    *,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def start(\n    self,\n    *,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n    single_run: bool = False,\n) -&gt; None:\n    logger.info(\n        f\"Starting MesopUI: import_string={self._import_string}, main_path={self._main_path}\"\n    )\n    if single_run:\n        logger.warning(\"single_run parameter is currently not supported in MesopUI\")\n\n    MesopUI._app = app\n\n    mesop_main([\"mesop\", self._main_path])\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.unregister","title":"unregister  <code>classmethod</code>","text":"<pre><code>unregister(conversation: MesopUI) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef unregister(cls, conversation: \"MesopUI\") -&gt; None:\n    del cls._registry[conversation.id]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit","title":"visit","text":"<pre><code>visit(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit(self, message: IOMessage) -&gt; Optional[str]:\n    method_name = f\"visit_{message.type}\"\n    method = getattr(self, method_name, self.visit_default)\n    return method(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_default","title":"visit_default","text":"<pre><code>visit_default(message: IOMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_default(self, message: IOMessage) -&gt; None:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_function_call_execution","title":"visit_function_call_execution","text":"<pre><code>visit_function_call_execution(\n    message: FunctionCallExecution,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_function_call_execution(\n    self, message: FunctionCallExecution\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_multiple_choice","title":"visit_multiple_choice","text":"<pre><code>visit_multiple_choice(message: MultipleChoice) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_multiple_choice(self, message: MultipleChoice) -&gt; str:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n    return self.in_queue.get()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_suggested_function_call","title":"visit_suggested_function_call","text":"<pre><code>visit_suggested_function_call(\n    message: SuggestedFunctionCall,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_suggested_function_call(\n    self, message: SuggestedFunctionCall\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_system_message","title":"visit_system_message","text":"<pre><code>visit_system_message(\n    message: SystemMessage,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_system_message(self, message: SystemMessage) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_text_input","title":"visit_text_input","text":"<pre><code>visit_text_input(message: TextInput) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_text_input(self, message: TextInput) -&gt; str:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n    return self.in_queue.get()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_text_message","title":"visit_text_message","text":"<pre><code>visit_text_message(message: TextMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_text_message(self, message: TextMessage) -&gt; None:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_workflow_completed","title":"visit_workflow_completed","text":"<pre><code>visit_workflow_completed(\n    message: WorkflowCompleted,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_workflow_completed(self, message: WorkflowCompleted) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/run_workflow/","title":"run_workflow","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/base/run_workflow/#fastagency.ui.mesop.base.run_workflow","title":"fastagency.ui.mesop.base.run_workflow","text":"<pre><code>run_workflow(\n    wf: Workflows, name: str, initial_message: str\n) -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def run_workflow(wf: Workflows, name: str, initial_message: str) -&gt; MesopUI:\n    def conversation_worker(ui: MesopUI, subconversation: MesopUI) -&gt; None:\n        ui.process_message(\n            IOMessage.create(\n                sender=\"user\",\n                recipient=\"workflow\",\n                type=\"system_message\",\n                message={\n                    \"heading\": \"Workflow BEGIN\",\n                    \"body\": f\"Starting workflow with initial_message: {initial_message}\",\n                },\n            )\n        )\n\n        try:\n            result = wf.run(\n                name=name,\n                session_id=\"session_id\",\n                ui=subconversation,  # type: ignore[arg-type]\n                initial_message=initial_message,\n            )\n\n        except Exception as ex:\n            ui.process_message(\n                IOMessage.create(\n                    sender=\"user\",\n                    recipient=\"workflow\",\n                    type=\"system_message\",\n                    message={\n                        \"heading\": \"Workflow Exception\",\n                        \"body\": f\"Ending workflow with exception: {ex}\",\n                    },\n                )\n            )\n            ui.process_message(\n                IOMessage.create(\n                    sender=\"user\",\n                    recipient=\"workflow\",\n                    type=\"workflow_completed\",\n                    result=None,\n                )\n            )\n            return\n\n        ui.process_message(\n            IOMessage.create(\n                sender=\"user\",\n                recipient=\"workflow\",\n                type=\"system_message\",\n                message={\n                    \"heading\": \"Workflow END\",\n                    \"body\": f\"Ending workflow with result: {result}\",\n                },\n            )\n        )\n\n        ui.process_message(\n            IOMessage.create(\n                sender=\"user\",\n                recipient=\"workflow\",\n                type=\"workflow_completed\",\n                result=result,\n            )\n        )\n\n    ui = MesopUI()\n    subconversation = ui.create_subconversation()\n    thread = threading.Thread(target=conversation_worker, args=(ui, subconversation))\n    thread.start()\n\n    return subconversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/components/helpers/darken_hex_color/","title":"darken_hex_color","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/components/helpers/darken_hex_color/#fastagency.ui.mesop.components.helpers.darken_hex_color","title":"fastagency.ui.mesop.components.helpers.darken_hex_color","text":"<pre><code>darken_hex_color(\n    hex_color: str, factor: float = 0.8\n) -&gt; str\n</code></pre> <p>Darkens a hex color by a given factor.</p> <p>Args: hex_color: The hex color code (e.g., '#FF0000'). factor: The darkening factor (0.0 to 1.0, where 1.0 is no change and 0.0 is completely dark).</p> <p>Returns: The darkened hex color code.</p> Source code in <code>fastagency/ui/mesop/components/helpers.py</code> <pre><code>def darken_hex_color(hex_color: str, factor: float = 0.8) -&gt; str:\n    \"\"\"Darkens a hex color by a given factor.\n\n    Args:\n    hex_color: The hex color code (e.g., '#FF0000').\n    factor: The darkening factor (0.0 to 1.0, where 1.0 is no change and 0.0 is completely dark).\n\n    Returns:\n    The darkened hex color code.\n    \"\"\"\n    # Remove the '#' prefix if it exists\n    hex_color = hex_color.lstrip(\"#\")\n\n    if len(hex_color) == 3:\n        hex_color = \"\".join(char * 2 for char in hex_color)\n\n    # Convert hex to RGB values\n    rgb = tuple(int(hex_color[i : i + 2], 16) for i in (0, 2, 4))\n\n    # Darken each component\n    darkened_rgb = tuple(int(channel * factor) for channel in rgb)\n\n    # Convert back to hex\n    darkened_hex = \"#{:02X}{:02X}{:02X}\".format(*darkened_rgb)\n\n    return darkened_hex\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/components/inputs/input_text/","title":"input_text","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/components/inputs/input_text/#fastagency.ui.mesop.components.inputs.input_text","title":"fastagency.ui.mesop.components.inputs.input_text","text":"<pre><code>input_text(\n    on_input: Callable[[str], Iterator[None]],\n    *,\n    key: str,\n    disabled: bool = False,\n    value: Optional[str] = None,\n    style: MesopTextInputInnerStyles\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/components/inputs.py</code> <pre><code>def input_text(  # noqa: C901\n    on_input: Callable[[str], Iterator[None]],\n    *,\n    key: str,\n    disabled: bool = False,\n    value: Optional[str] = None,\n    style: MesopTextInputInnerStyles,\n) -&gt; None:\n    def on_click(e: me.ClickEvent) -&gt; Iterator[None]:\n        state = me.state(State)\n        output_key = get_output_key()\n        inp = getattr(state, output_key)\n        clear_in_out()\n        yield from on_input(inp)\n\n    def on_newline(e: me.TextareaShortcutEvent) -&gt; Iterator[None]:\n        state = me.state(State)\n        input_key = get_input_key()\n        setattr(state, input_key, e.value + \"\\n\")\n        yield\n\n    def on_submit(e: me.TextareaShortcutEvent) -&gt; Iterator[None]:\n        clear_in_out()\n        yield from on_input(e.value)\n\n    def on_blur(e: me.InputBlurEvent) -&gt; None:\n        if disabled or e.key != key_num:\n            return\n        state = me.state(State)\n        input_key, output_key = get_in_out_keys()\n        setattr(state, input_key, e.value)\n        setattr(state, output_key, e.value)\n\n    def get_input_key() -&gt; str:\n        return f\"{key}_input\"\n\n    def get_output_key() -&gt; str:\n        return f\"{key}_output\"\n\n    def get_in_out_keys() -&gt; list[str]:\n        return [get_input_key(), get_output_key()]\n\n    def clear_in_out() -&gt; None:\n        input_key, output_key = get_in_out_keys()\n        setattr(state, input_key, \"\")\n        setattr(state, output_key, \"\")\n\n    state = me.state(State)\n    key_num = f\"{key}{len(state.conversation.messages)}\"\n    with me.box(style=style.box):\n        if disabled:\n            in_value = value\n            key_num = f\"{key}disabled{len(state.conversation.messages)}\"\n        else:\n            input_key = get_input_key()\n            in_value = getattr(state, input_key)\n            key_num = f\"{key}{len(state.conversation.messages)}\"\n\n        with me.box(style=me.Style(flex_grow=1)):\n            me.native_textarea(\n                on_blur=on_blur,\n                key=key_num,\n                autosize=True,\n                min_rows=3,\n                max_rows=10,\n                readonly=disabled,\n                shortcuts={\n                    me.Shortcut(key=\"enter\", shift=True): on_newline,\n                    me.Shortcut(key=\"enter\"): on_submit,\n                },\n                style=style.native_textarea,\n                value=in_value,\n            )\n\n        with me.content_button(\n            type=\"icon\",\n            on_click=on_click,\n            disabled=disabled,\n        ):\n            me.icon(\"send\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/","title":"Conversation","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation","title":"fastagency.ui.mesop.data_model.Conversation  <code>dataclass</code>","text":"<pre><code>Conversation(\n    id: str = \"\",\n    title: str = \"\",\n    completed: bool = False,\n    waiting_for_feedback: bool = False,\n    feedback: str = \"\",\n    is_from_the_past: bool = False,\n    messages: list[ConversationMessage] = list(),\n    fastagency: Optional[str] = None,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.completed","title":"completed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>completed: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.fastagency","title":"fastagency  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fastagency: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.feedback","title":"feedback  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>feedback: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.is_from_the_past","title":"is_from_the_past  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_from_the_past: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.messages","title":"messages  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>messages: list[ConversationMessage] = field(\n    default_factory=list\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.title","title":"title  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>title: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.waiting_for_feedback","title":"waiting_for_feedback  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>waiting_for_feedback: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/ConversationMessage/","title":"ConversationMessage","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/ConversationMessage/#fastagency.ui.mesop.data_model.ConversationMessage","title":"fastagency.ui.mesop.data_model.ConversationMessage  <code>dataclass</code>","text":"<pre><code>ConversationMessage(\n    io_message_json: str = \"\",\n    level: int = 0,\n    conversation_id: str = \"\",\n    feedback: list[str] = list(),\n    feedback_completed: bool = False,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/ConversationMessage/#fastagency.ui.mesop.data_model.ConversationMessage.conversation_id","title":"conversation_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conversation_id: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/ConversationMessage/#fastagency.ui.mesop.data_model.ConversationMessage.feedback","title":"feedback  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>feedback: list[str] = field(default_factory=list)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/ConversationMessage/#fastagency.ui.mesop.data_model.ConversationMessage.feedback_completed","title":"feedback_completed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>feedback_completed: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/ConversationMessage/#fastagency.ui.mesop.data_model.ConversationMessage.io_message_json","title":"io_message_json  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>io_message_json: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/ConversationMessage/#fastagency.ui.mesop.data_model.ConversationMessage.level","title":"level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>level: int = 0\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/","title":"State","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State","title":"fastagency.ui.mesop.data_model.State","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State.conversation","title":"conversation  <code>instance-attribute</code>","text":"<pre><code>conversation: Conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State.hide_past","title":"hide_past  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hide_past: bool = True\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State.in_conversation","title":"in_conversation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>in_conversation: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State.past_conversations","title":"past_conversations  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>past_conversations: list[Conversation] = field(\n    default_factory=list\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State.prompt_input","title":"prompt_input  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt_input: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State.prompt_output","title":"prompt_output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt_output: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/MesopHomePage/","title":"MesopHomePage","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/main/MesopHomePage/#fastagency.ui.mesop.main.MesopHomePage","title":"fastagency.ui.mesop.main.MesopHomePage","text":"<pre><code>MesopHomePage(\n    ui: MesopUI,\n    *,\n    params: Optional[MesopHomePageParams] = None,\n    styles: Optional[MesopHomePageStyles] = None,\n    security_policy: Optional[SecurityPolicy] = None\n)\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def __init__(\n    self,\n    ui: \"MesopUI\",\n    *,\n    params: Optional[MesopHomePageParams] = None,\n    styles: Optional[MesopHomePageStyles] = None,\n    security_policy: Optional[me.SecurityPolicy] = None,\n) -&gt; None:\n    self._ui = ui\n    self._params = params or MesopHomePageParams()\n    self._styles = styles or MesopHomePageStyles()\n    self._security_policy = security_policy or DEFAULT_SECURITY_POLICY\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/MesopHomePage/#fastagency.ui.mesop.main.MesopHomePage.build","title":"build","text":"<pre><code>build() -&gt; Callable[[], None]\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def build(self) -&gt; Callable[[], None]:\n    @me.page(  # type: ignore[misc]\n        path=\"/\",\n        stylesheets=self._styles.stylesheets,\n        security_policy=self._security_policy,\n    )\n    def home_page() -&gt; None:\n        self.home_page()\n\n    return home_page  # type: ignore[no-any-return]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/MesopHomePage/#fastagency.ui.mesop.main.MesopHomePage.conversation_box","title":"conversation_box","text":"<pre><code>conversation_box() -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def conversation_box(self) -&gt; None:\n    state = me.state(State)\n    conversation = state.conversation\n    with me.box(style=self._styles.chat_starter):\n        self.header()\n        messages = conversation.messages\n        with me.box(\n            style=self._styles.conv_list,\n        ):\n            me.box(\n                key=\"conversationtop\",\n                style=self._styles.conv_top,\n            )\n            for message in messages:\n                message_box(\n                    message, conversation.is_from_the_past, styles=self._styles\n                )\n            if messages:\n                me.box(\n                    key=\"end_of_messages\",\n                    style=self._styles.conv_top,\n                )\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/MesopHomePage/#fastagency.ui.mesop.main.MesopHomePage.conversation_starter_box","title":"conversation_starter_box","text":"<pre><code>conversation_starter_box() -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def conversation_starter_box(self) -&gt; None:\n    with me.box(style=self._styles.chat_starter):\n        self.header()\n        with me.box(\n            style=self._styles.conv_starter,\n        ):\n            me.text(\n                self._params.conv_starter_text,\n                style=self._styles.conv_starter_text,\n            )\n            input_text(\n                self.send_prompt,\n                key=\"prompt\",\n                disabled=False,\n                style=self._styles.message.text_input_inner,\n            )\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/MesopHomePage/#fastagency.ui.mesop.main.MesopHomePage.header","title":"header","text":"<pre><code>header() -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def header(self) -&gt; None:\n    with me.box(\n        style=self._styles.header,\n    ):\n        me.text(\n            self._ui.app.title,\n            style=self._styles.header_text,\n        )\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/MesopHomePage/#fastagency.ui.mesop.main.MesopHomePage.home_page","title":"home_page","text":"<pre><code>home_page() -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def home_page(self) -&gt; None:\n    try:\n        state = me.state(State)\n        with me.box(style=self._styles.root):\n            self.past_conversations_box()\n            if state.in_conversation:\n                self.conversation_box()\n            else:\n                self.conversation_starter_box()\n    except Exception as e:\n        logger.error(f\"home_page(): Error rendering home page: {e}\")\n        me.text(text=\"Error: Something went wrong, please check logs for details.\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/MesopHomePage/#fastagency.ui.mesop.main.MesopHomePage.past_conversations_box","title":"past_conversations_box","text":"<pre><code>past_conversations_box() -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def past_conversations_box(self) -&gt; None:\n    def conversation_display_title(full_name: str, max_length: int) -&gt; str:\n        if len(full_name) &lt;= max_length:\n            return full_name\n        else:\n            return full_name[: max_length - 3] + \"...\"\n\n    def select_past_conversation(ev: me.ClickEvent) -&gt; Iterator[None]:\n        id = ev.key\n        state = me.state(State)\n        conversations_with_id = list(\n            filter(lambda c: c.id == id, state.past_conversations)\n        )\n        conversation = conversations_with_id[0]\n        state.conversation = conversation\n        state.in_conversation = True\n        yield\n        time.sleep(1)\n        yield\n        me.scroll_into_view(key=\"conversationtop\")\n        yield\n\n    def on_show_hide(ev: me.ClickEvent) -&gt; None:\n        state.hide_past = not state.hide_past\n\n    def on_start_new_conversation(ev: me.ClickEvent) -&gt; None:\n        state.in_conversation = False\n        state.prompt = \"\"\n\n    state = me.state(State)\n    style = (\n        self._styles.past_chats_hide\n        if state.hide_past\n        else self._styles.past_chats_show\n    )\n    with me.box(style=style):\n        with me.box(\n            style=self._styles.past_chats_inner,\n        ):\n            with me.content_button(\n                on_click=on_show_hide, disabled=not state.past_conversations\n            ):\n                me.icon(\"menu\")\n            with me.content_button(\n                on_click=on_start_new_conversation,\n                disabled=not state.conversation.completed,\n            ):\n                me.icon(\"rate_review\")\n        if not state.hide_past:\n            for conversation in state.past_conversations:\n                with me.box(\n                    key=conversation.id,  # they are GUIDs so should not clash with anything other on the page\n                    on_click=select_past_conversation,\n                    style=self._styles.past_chats_conv,\n                ):\n                    me.text(\n                        text=conversation_display_title(conversation.title, 128)\n                    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/MesopHomePage/#fastagency.ui.mesop.main.MesopHomePage.send_prompt","title":"send_prompt","text":"<pre><code>send_prompt(prompt: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def send_prompt(self, prompt: str) -&gt; Iterator[None]:\n    ui = self._ui\n    wf = ui.app.wf\n\n    name = wf.names[0]\n\n    state = me.state(State)\n    # me.navigate(\"/conversation\")\n    conversation = Conversation(\n        title=prompt, completed=False, waiting_for_feedback=False\n    )\n    state.conversation = conversation\n    state.in_conversation = True\n    yield\n    responses = send_prompt_to_autogen(prompt=prompt, wf=wf, name=name)\n    yield from consume_responses(responses)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/MesopHomePageParams/","title":"MesopHomePageParams","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/main/MesopHomePageParams/#fastagency.ui.mesop.main.MesopHomePageParams","title":"fastagency.ui.mesop.main.MesopHomePageParams  <code>dataclass</code>","text":"<pre><code>MesopHomePageParams(\n    conv_starter_text: str = \"Enter a prompt to chat with FastAgency team\",\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/MesopHomePageParams/#fastagency.ui.mesop.main.MesopHomePageParams.conv_starter_text","title":"conv_starter_text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conv_starter_text: str = (\n    \"Enter a prompt to chat with FastAgency team\"\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/create_home_page/","title":"create_home_page","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/main/create_home_page/#fastagency.ui.mesop.main.create_home_page","title":"fastagency.ui.mesop.main.create_home_page","text":"<pre><code>create_home_page(\n    ui: MesopUI,\n    *,\n    styles: Optional[MesopHomePageStyles] = None,\n    security_policy: Optional[SecurityPolicy] = None\n) -&gt; Callable[[], None]\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def create_home_page(\n    ui: \"MesopUI\",\n    *,\n    styles: Optional[MesopHomePageStyles] = None,\n    security_policy: Optional[me.SecurityPolicy] = None,\n) -&gt; Callable[[], None]:\n    mhp = MesopHomePage(ui, security_policy=security_policy)\n\n    return mhp.build()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/","title":"MesopGUIMessageVisitor","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor","title":"fastagency.ui.mesop.message.MesopGUIMessageVisitor","text":"<pre><code>MesopGUIMessageVisitor(\n    level: int,\n    conversation_id: str,\n    conversation_message: ConversationMessage,\n    styles: MesopHomePageStyles,\n    read_only: bool = False,\n)\n</code></pre> <p>               Bases: <code>IOMessageVisitor</code></p> <p>Initialize the MesopGUIMessageVisitor object.</p> PARAMETER DESCRIPTION <code>level</code> <p>The level of the message.</p> <p> TYPE: <code>int</code> </p> <code>conversation_id</code> <p>The ID of the conversation.</p> <p> TYPE: <code>str</code> </p> <code>conversation_message</code> <p>Conversation message that wraps the visited io_message</p> <p> TYPE: <code>ConversationMessage</code> </p> <code>styles</code> <p>Styles for the message</p> <p> TYPE: <code>MesopHomePageStyles</code> </p> <code>read_only</code> <p>Input messages are disabled in read only mode</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def __init__(\n    self,\n    level: int,\n    conversation_id: str,\n    conversation_message: ConversationMessage,\n    styles: MesopHomePageStyles,\n    read_only: bool = False,\n) -&gt; None:\n    \"\"\"Initialize the MesopGUIMessageVisitor object.\n\n    Args:\n        level (int): The level of the message.\n        conversation_id (str): The ID of the conversation.\n        conversation_message (ConversationMessage): Conversation message that wraps the visited io_message\n        styles (MesopHomePageStyles): Styles for the message\n        read_only (bool): Input messages are disabled in read only mode\n    \"\"\"\n    self._level = level\n    self._conversation_id = conversation_id\n    self._readonly = read_only\n    self._conversation_message = conversation_message\n    self._styles = styles\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.message_content_to_markdown","title":"message_content_to_markdown","text":"<pre><code>message_content_to_markdown(msg: IOMessage) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def message_content_to_markdown(self, msg: IOMessage) -&gt; str:\n    d = msg.model_dump()\n    d.pop(\"sender\")\n    d.pop(\"recipient\")\n    d.pop(\"type\")\n\n    return \"\\n\".join([f\"**{k}**: {v} &lt;br&gt;\" for k, v in d[\"content\"].items()])\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]:\n    try:\n        return self.visit(message)\n    except Exception as e:\n        logger.warning(f\"Failed to render message: {e}\")\n        self.render_error_message(e, message)\n        return None\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.render_error_message","title":"render_error_message","text":"<pre><code>render_error_message(\n    e: Exception,\n    message: IOMessage,\n    *,\n    content: Optional[str] = None,\n    style: Optional[MesopMessageStyles] = None\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def render_error_message(\n    self,\n    e: Exception,\n    message: IOMessage,\n    *,\n    content: Optional[str] = None,\n    style: Optional[MesopMessageStyles] = None,\n) -&gt; None:\n    style = self._styles.message.error or self._styles.message.default\n    title = \"[Error] \" + message.type.replace(\"_\", \" \").capitalize()\n\n    with me.box(style=style.box or self._styles.message.default.box):\n        self._header(\n            message,\n            title=title,\n            box_style=style.header_box or self._styles.message.default.header_box,\n            md_style=style.header_md or self._styles.message.default.header_md,\n        )\n\n        content = (\n            \"Failed to render message:\"\n            + dict_to_markdown(message.model_dump())\n            + f\"&lt;br&gt;Error: {e}\"\n        )\n\n        logger.info(f\"render_error_message: {content=}\")\n        me.markdown(content, style=style.md or self._styles.message.default.md)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit","title":"visit","text":"<pre><code>visit(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit(self, message: IOMessage) -&gt; Optional[str]:\n    method_name = f\"visit_{message.type}\"\n    method = getattr(self, method_name, self.visit_default)\n    return method(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_default","title":"visit_default","text":"<pre><code>visit_default(\n    message: IOMessage,\n    *,\n    content: Optional[str] = None,\n    style: Optional[MesopMessageStyles] = None,\n    error: Optional[bool] = False,\n    inner_callback: Optional[Callable[..., None]] = None\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def visit_default(\n    self,\n    message: IOMessage,\n    *,\n    content: Optional[str] = None,\n    style: Optional[MesopMessageStyles] = None,\n    error: Optional[bool] = False,\n    inner_callback: Optional[Callable[..., None]] = None,\n) -&gt; None:\n    logger.info(f\"visit_default: {message=}\")\n    style = style or self._styles.message.default\n    title = message.type.replace(\"_\", \" \").capitalize()\n    title = \"[Error] \" + title if error else title\n    with me.box(style=style.box or self._styles.message.default.box):\n        self._header(\n            message,\n            title=title,\n            box_style=style.header_box,\n            md_style=style.header_md,\n        )\n\n        content = content or self.message_content_to_markdown(message)\n\n        me.markdown(content, style=style.md or self._styles.message.default.md)\n\n        if inner_callback:\n            inner_callback()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_function_call_execution","title":"visit_function_call_execution","text":"<pre><code>visit_function_call_execution(\n    message: FunctionCallExecution,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def visit_function_call_execution(self, message: FunctionCallExecution) -&gt; None:\n    return self.visit_default(\n        message,\n        style=self._styles.message.function_call_execution,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_multiple_choice","title":"visit_multiple_choice","text":"<pre><code>visit_multiple_choice(message: MultipleChoice) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def visit_multiple_choice(self, message: MultipleChoice) -&gt; str:\n    if message.single:\n        return self._visit_single_choice(message)\n    else:\n        return self._visit_many_choices(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_suggested_function_call","title":"visit_suggested_function_call","text":"<pre><code>visit_suggested_function_call(\n    message: SuggestedFunctionCall,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>    def visit_suggested_function_call(self, message: SuggestedFunctionCall) -&gt; None:\n        content = f\"\"\"\n**function_name**: `{message.function_name}`&lt;br&gt;\n**call_id**: `{message.call_id}`&lt;br&gt;\n**arguments**:\n{dict_to_markdown(message.arguments)}\n\"\"\"\n        self.visit_default(\n            message,\n            content=content,\n            style=self._styles.message.suggested_function_call,\n        )\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_system_message","title":"visit_system_message","text":"<pre><code>visit_system_message(message: SystemMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>    def visit_system_message(self, message: SystemMessage) -&gt; None:\n        content = (\n            f\"\"\"#### **{message.message['heading']}**\n\n{message.message['body']}\n\"\"\"\n            if \"heading\" in message.message and \"body\" in message.message\n            else None\n        )\n\n        self.visit_default(\n            message,\n            content=content,\n            style=self._styles.message.system,\n        )\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_text_input","title":"visit_text_input","text":"<pre><code>visit_text_input(message: TextInput) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def visit_text_input(self, message: TextInput) -&gt; str:\n    def on_input(feedback: str) -&gt; Iterator[None]:\n        self._conversation_message.feedback = [feedback]\n        self._conversation_message.feedback_completed = True\n        yield from self._provide_feedback(feedback)\n\n    def value_if_completed() -&gt; Optional[str]:\n        message = self._conversation_message\n        return message.feedback[0] if message.feedback_completed else None\n\n    # base_color = \"#dff\"\n    prompt = message.prompt if message.prompt else \"Please enter a value\"\n    if message.suggestions:\n        suggestions = \",\".join(suggestion for suggestion in message.suggestions)\n        prompt += \"\\n Suggestions: \" + suggestions\n\n    self.visit_default(\n        message,\n        content=prompt,\n        style=self._styles.message.text_input,\n        inner_callback=lambda: input_text(\n            on_input,\n            key=\"prompt\",\n            disabled=self._readonly or self._has_feedback(),\n            value=value_if_completed(),\n            style=self._styles.message.text_input_inner,\n        ),\n    )\n    return \"\"\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_text_message","title":"visit_text_message","text":"<pre><code>visit_text_message(message: TextMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def visit_text_message(self, message: TextMessage) -&gt; None:\n    content = message.body if message.body else \"\"\n    content = content if content.strip() != \"\" else \"*(empty message)*\"\n    self.visit_default(\n        message,\n        content=content,\n        style=self._styles.message.text,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_workflow_completed","title":"visit_workflow_completed","text":"<pre><code>visit_workflow_completed(\n    message: WorkflowCompleted,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_workflow_completed(self, message: WorkflowCompleted) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/consume_responses/","title":"consume_responses","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/message/consume_responses/#fastagency.ui.mesop.message.consume_responses","title":"fastagency.ui.mesop.message.consume_responses","text":"<pre><code>consume_responses(\n    responses: Iterable[MesopMessage],\n) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def consume_responses(responses: Iterable[MesopMessage]) -&gt; Iterator[None]:\n    for message in responses:\n        state = me.state(State)\n        handle_message(state, message)\n        yield\n        me.scroll_into_view(key=\"end_of_messages\")\n        yield\n    yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/dict_to_markdown/","title":"dict_to_markdown","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/message/dict_to_markdown/#fastagency.ui.mesop.message.dict_to_markdown","title":"fastagency.ui.mesop.message.dict_to_markdown","text":"<pre><code>dict_to_markdown(\n    d: dict[str, Any], *, indent: int = 2\n) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def dict_to_markdown(d: dict[str, Any], *, indent: int = 2) -&gt; str:\n    return \"\\n```\\n\" + json.dumps(d, indent=2) + \"\\n```\\n\"\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/handle_message/","title":"handle_message","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/message/handle_message/#fastagency.ui.mesop.message.handle_message","title":"fastagency.ui.mesop.message.handle_message","text":"<pre><code>handle_message(state: State, message: MesopMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def handle_message(state: State, message: MesopMessage) -&gt; None:\n    conversation = state.conversation\n    messages = conversation.messages\n    level = message.conversation.level\n    conversation_id = message.conversation.id\n    io_message = message.io_message\n    message_dict = io_message.model_dump()\n    message_json = json.dumps(message_dict)\n    conversation_message = ConversationMessage(\n        level=level,\n        conversation_id=conversation_id,\n        io_message_json=message_json,\n        feedback=[],\n    )\n    messages.append(conversation_message)\n    conversation.messages = list(messages)\n    if isinstance(io_message, AskingMessage):\n        conversation.waiting_for_feedback = True\n        conversation.completed = False\n    if isinstance(io_message, WorkflowCompleted):\n        conversation.completed = True\n        conversation.waiting_for_feedback = False\n        if not conversation.is_from_the_past:\n            uuid: str = uuid4().hex\n            becomme_past = Conversation(\n                id=uuid,\n                title=conversation.title,\n                messages=conversation.messages,\n                completed=True,\n                is_from_the_past=True,\n                waiting_for_feedback=False,\n            )\n            state.past_conversations.insert(0, becomme_past)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/message_box/","title":"message_box","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/message/message_box/#fastagency.ui.mesop.message.message_box","title":"fastagency.ui.mesop.message.message_box","text":"<pre><code>message_box(\n    message: ConversationMessage,\n    read_only: bool,\n    *,\n    styles: MesopHomePageStyles\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def message_box(\n    message: ConversationMessage, read_only: bool, *, styles: MesopHomePageStyles\n) -&gt; None:\n    io_message_dict = json.loads(message.io_message_json)\n    level = message.level\n    conversation_id = message.conversation_id\n    io_message = IOMessage.create(**io_message_dict)\n    visitor = MesopGUIMessageVisitor(level, conversation_id, message, styles, read_only)\n    visitor.process_message(io_message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/send_prompt/send_prompt_to_autogen/","title":"send_prompt_to_autogen","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/send_prompt/send_prompt_to_autogen/#fastagency.ui.mesop.send_prompt.send_prompt_to_autogen","title":"fastagency.ui.mesop.send_prompt.send_prompt_to_autogen","text":"<pre><code>send_prompt_to_autogen(\n    prompt: str, wf: Workflows, name: str\n) -&gt; Iterable[MesopMessage]\n</code></pre> Source code in <code>fastagency/ui/mesop/send_prompt.py</code> <pre><code>def send_prompt_to_autogen(\n    prompt: str, wf: Workflows, name: str\n) -&gt; Iterable[MesopMessage]:\n    mesop_io = run_workflow(wf, name=name, initial_message=prompt)\n    state = me.state(State)\n    state.conversation.fastagency = mesop_io.id\n    return mesop_io.get_message_stream()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/send_prompt/send_user_feedback_to_autogen/","title":"send_user_feedback_to_autogen","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/send_prompt/send_user_feedback_to_autogen/#fastagency.ui.mesop.send_prompt.send_user_feedback_to_autogen","title":"fastagency.ui.mesop.send_prompt.send_user_feedback_to_autogen","text":"<pre><code>send_user_feedback_to_autogen(\n    user_response: str,\n) -&gt; Iterable[MesopMessage]\n</code></pre> Source code in <code>fastagency/ui/mesop/send_prompt.py</code> <pre><code>def send_user_feedback_to_autogen(user_response: str) -&gt; Iterable[MesopMessage]:\n    state = me.state(State)\n    mesop_id = state.conversation.fastagency\n    mesop_io = MesopUI.get_conversation(mesop_id)\n    mesop_io.respond(user_response)\n    return mesop_io.get_message_stream()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/","title":"MesopHomePageStyles","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles","title":"fastagency.ui.mesop.styles.MesopHomePageStyles  <code>dataclass</code>","text":"<pre><code>MesopHomePageStyles(\n    chat_starter: Style = lambda: CHAT_STARTER_STYLE(),\n    conv_list: Style = lambda: CONV_LIST_STYLE(),\n    conv_msg: Style = lambda: CONV_MSG_STYLE(),\n    conv_top: Style = lambda: CONV_TOP_STYLE(),\n    conv_starter: Style = lambda: CONV_STARTER_STYLE(),\n    conv_starter_text: Style = lambda: CONV_STARTER_TEXT_STYLE(),\n    header: Style = lambda: HEADER_BOX_STYLE(),\n    header_text: Style = lambda: HEADER_TEXT_STYLE(),\n    past_chats_hide: Style = lambda: PAST_CHATS_HIDE_STYLE(),\n    past_chats_show: Style = lambda: PAST_CHATS_SHOW_STYLE(),\n    past_chats_inner: Style = lambda: PAST_CHATS_INNER_STYLE(),\n    past_chats_conv: Style = lambda: PAST_CHATS_CONV_STYLE(),\n    root: Style = lambda: ROOT_BOX_STYLE(),\n    stylesheets: list[str] = lambda: STYLESHEETS(),\n    message: MesopMessagesStyles = lambda: MesopMessagesStyles()(),\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.chat_starter","title":"chat_starter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>chat_starter: Style = field(\n    default_factory=lambda: CHAT_STARTER_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.conv_list","title":"conv_list  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conv_list: Style = field(\n    default_factory=lambda: CONV_LIST_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.conv_msg","title":"conv_msg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conv_msg: Style = field(\n    default_factory=lambda: CONV_MSG_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.conv_starter","title":"conv_starter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conv_starter: Style = field(\n    default_factory=lambda: CONV_STARTER_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.conv_starter_text","title":"conv_starter_text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conv_starter_text: Style = field(\n    default_factory=lambda: CONV_STARTER_TEXT_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.conv_top","title":"conv_top  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conv_top: Style = field(\n    default_factory=lambda: CONV_TOP_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.header","title":"header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header: Style = field(\n    default_factory=lambda: HEADER_BOX_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.header_text","title":"header_text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header_text: Style = field(\n    default_factory=lambda: HEADER_TEXT_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.message","title":"message  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>message: MesopMessagesStyles = field(\n    default_factory=lambda: MesopMessagesStyles()\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.past_chats_conv","title":"past_chats_conv  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>past_chats_conv: Style = field(\n    default_factory=lambda: PAST_CHATS_CONV_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.past_chats_hide","title":"past_chats_hide  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>past_chats_hide: Style = field(\n    default_factory=lambda: PAST_CHATS_HIDE_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.past_chats_inner","title":"past_chats_inner  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>past_chats_inner: Style = field(\n    default_factory=lambda: PAST_CHATS_INNER_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.past_chats_show","title":"past_chats_show  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>past_chats_show: Style = field(\n    default_factory=lambda: PAST_CHATS_SHOW_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.root","title":"root  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>root: Style = field(default_factory=lambda: ROOT_BOX_STYLE)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopHomePageStyles/#fastagency.ui.mesop.styles.MesopHomePageStyles.stylesheets","title":"stylesheets  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stylesheets: list[str] = field(\n    default_factory=lambda: STYLESHEETS\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessageStyles/","title":"MesopMessageStyles","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessageStyles/#fastagency.ui.mesop.styles.MesopMessageStyles","title":"fastagency.ui.mesop.styles.MesopMessageStyles  <code>dataclass</code>","text":"<pre><code>MesopMessageStyles(\n    box: Style = lambda: MSG_DEFAULT_BOX_STYLE(),\n    md: Style = lambda: MSG_DEFAULT_MD_STYLE(),\n    header_box: Style = lambda: MSG_DEFAULT_HEADER_BOX_STYLE(),\n    header_md: Style = lambda: MSG_DEFAULT_HEADER_MD_STYLE(),\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessageStyles/#fastagency.ui.mesop.styles.MesopMessageStyles.box","title":"box  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>box: Style = field(\n    default_factory=lambda: MSG_DEFAULT_BOX_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessageStyles/#fastagency.ui.mesop.styles.MesopMessageStyles.header_box","title":"header_box  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header_box: Style = field(\n    default_factory=lambda: MSG_DEFAULT_HEADER_BOX_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessageStyles/#fastagency.ui.mesop.styles.MesopMessageStyles.header_md","title":"header_md  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header_md: Style = field(\n    default_factory=lambda: MSG_DEFAULT_HEADER_MD_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessageStyles/#fastagency.ui.mesop.styles.MesopMessageStyles.md","title":"md  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>md: Style = field(\n    default_factory=lambda: MSG_DEFAULT_MD_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessagesStyles/","title":"MesopMessagesStyles","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessagesStyles/#fastagency.ui.mesop.styles.MesopMessagesStyles","title":"fastagency.ui.mesop.styles.MesopMessagesStyles  <code>dataclass</code>","text":"<pre><code>MesopMessagesStyles(\n    default: MesopMessageStyles = lambda: MesopMessageStyles()(),\n    error: MesopMessageStyles = lambda: MesopMessageStyles(\n        header_box=MSG_ERROR_HEADER_BOX_STYLE\n    )(),\n    system: MesopMessageStyles = lambda: MesopMessageStyles(\n        header_box=MSG_SYSTEM_HEADER_BOX_STYLE\n    )(),\n    text: MesopMessageStyles = lambda: MesopMessageStyles()(),\n    suggested_function_call: MesopMessageStyles = lambda: MesopMessageStyles(\n        header_box=MSG_SUGESTED_FUNCTION_CALL_HEADER_BOX_STYLE\n    )(),\n    function_call_execution: MesopMessageStyles = lambda: MesopMessageStyles(\n        header_box=MSG_FUNCTION_CALL_EXECUTION_HEADER_BOX_STYLE\n    )(),\n    text_input: MesopMessageStyles = lambda: MesopMessageStyles(\n        header_box=MSG_TEXT_INPUT_HEADER_BOX_STYLE\n    )(),\n    text_input_inner: MesopTextInputInnerStyles = lambda: MesopTextInputInnerStyles()(),\n    single_choice_inner: MesopSingleChoiceInnerStyles = lambda: MesopSingleChoiceInnerStyles()(),\n    multiple_choice_inner: MesopMultipleChoiceInnerStyles = lambda: MesopMultipleChoiceInnerStyles()(),\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessagesStyles/#fastagency.ui.mesop.styles.MesopMessagesStyles.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default: MesopMessageStyles = field(\n    default_factory=lambda: MesopMessageStyles()\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessagesStyles/#fastagency.ui.mesop.styles.MesopMessagesStyles.error","title":"error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>error: MesopMessageStyles = field(\n    default_factory=lambda: MesopMessageStyles(\n        header_box=MSG_ERROR_HEADER_BOX_STYLE\n    )\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessagesStyles/#fastagency.ui.mesop.styles.MesopMessagesStyles.function_call_execution","title":"function_call_execution  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function_call_execution: MesopMessageStyles = field(\n    default_factory=lambda: MesopMessageStyles(\n        header_box=MSG_FUNCTION_CALL_EXECUTION_HEADER_BOX_STYLE\n    )\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessagesStyles/#fastagency.ui.mesop.styles.MesopMessagesStyles.multiple_choice_inner","title":"multiple_choice_inner  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>multiple_choice_inner: MesopMultipleChoiceInnerStyles = (\n    field(\n        default_factory=lambda: MesopMultipleChoiceInnerStyles()\n    )\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessagesStyles/#fastagency.ui.mesop.styles.MesopMessagesStyles.single_choice_inner","title":"single_choice_inner  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>single_choice_inner: MesopSingleChoiceInnerStyles = field(\n    default_factory=lambda: MesopSingleChoiceInnerStyles()\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessagesStyles/#fastagency.ui.mesop.styles.MesopMessagesStyles.suggested_function_call","title":"suggested_function_call  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>suggested_function_call: MesopMessageStyles = field(\n    default_factory=lambda: MesopMessageStyles(\n        header_box=MSG_SUGESTED_FUNCTION_CALL_HEADER_BOX_STYLE\n    )\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessagesStyles/#fastagency.ui.mesop.styles.MesopMessagesStyles.system","title":"system  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>system: MesopMessageStyles = field(\n    default_factory=lambda: MesopMessageStyles(\n        header_box=MSG_SYSTEM_HEADER_BOX_STYLE\n    )\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessagesStyles/#fastagency.ui.mesop.styles.MesopMessagesStyles.text","title":"text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>text: MesopMessageStyles = field(\n    default_factory=lambda: MesopMessageStyles()\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessagesStyles/#fastagency.ui.mesop.styles.MesopMessagesStyles.text_input","title":"text_input  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>text_input: MesopMessageStyles = field(\n    default_factory=lambda: MesopMessageStyles(\n        header_box=MSG_TEXT_INPUT_HEADER_BOX_STYLE\n    )\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMessagesStyles/#fastagency.ui.mesop.styles.MesopMessagesStyles.text_input_inner","title":"text_input_inner  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>text_input_inner: MesopTextInputInnerStyles = field(\n    default_factory=lambda: MesopTextInputInnerStyles()\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMultipleChoiceInnerStyles/","title":"MesopMultipleChoiceInnerStyles","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMultipleChoiceInnerStyles/#fastagency.ui.mesop.styles.MesopMultipleChoiceInnerStyles","title":"fastagency.ui.mesop.styles.MesopMultipleChoiceInnerStyles  <code>dataclass</code>","text":"<pre><code>MesopMultipleChoiceInnerStyles(\n    box: Style = lambda: MULTIPLE_CHOICE_RADIO_STYLE(),\n    checkbox: Style = lambda: MULTIPLE_CHOICE_CHECKBOX_STYLE(),\n    button: Style = lambda: MULTIPLE_CHOICE_BUTTON_STYLE(),\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMultipleChoiceInnerStyles/#fastagency.ui.mesop.styles.MesopMultipleChoiceInnerStyles.box","title":"box  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>box: Style = field(\n    default_factory=lambda: MULTIPLE_CHOICE_RADIO_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMultipleChoiceInnerStyles/#fastagency.ui.mesop.styles.MesopMultipleChoiceInnerStyles.button","title":"button  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>button: Style = field(\n    default_factory=lambda: MULTIPLE_CHOICE_BUTTON_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopMultipleChoiceInnerStyles/#fastagency.ui.mesop.styles.MesopMultipleChoiceInnerStyles.checkbox","title":"checkbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>checkbox: Style = field(\n    default_factory=lambda: MULTIPLE_CHOICE_CHECKBOX_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopSingleChoiceInnerStyles/","title":"MesopSingleChoiceInnerStyles","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopSingleChoiceInnerStyles/#fastagency.ui.mesop.styles.MesopSingleChoiceInnerStyles","title":"fastagency.ui.mesop.styles.MesopSingleChoiceInnerStyles  <code>dataclass</code>","text":"<pre><code>MesopSingleChoiceInnerStyles(\n    radio: Style = lambda: SINGLE_CHOICE_RADIO_STYLE(),\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopSingleChoiceInnerStyles/#fastagency.ui.mesop.styles.MesopSingleChoiceInnerStyles.radio","title":"radio  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>radio: Style = field(\n    default_factory=lambda: SINGLE_CHOICE_RADIO_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopTextInputInnerStyles/","title":"MesopTextInputInnerStyles","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopTextInputInnerStyles/#fastagency.ui.mesop.styles.MesopTextInputInnerStyles","title":"fastagency.ui.mesop.styles.MesopTextInputInnerStyles  <code>dataclass</code>","text":"<pre><code>MesopTextInputInnerStyles(\n    box: Style = lambda: TEXT_INPUT_INNER_BOX_STYLE(),\n    native_textarea: Style = lambda: TEXT_INPUT_NATIVE_TEXTAREA_STYLE(),\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopTextInputInnerStyles/#fastagency.ui.mesop.styles.MesopTextInputInnerStyles.box","title":"box  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>box: Style = field(\n    default_factory=lambda: TEXT_INPUT_INNER_BOX_STYLE\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/styles/MesopTextInputInnerStyles/#fastagency.ui.mesop.styles.MesopTextInputInnerStyles.native_textarea","title":"native_textarea  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>native_textarea: Style = field(\n    default_factory=lambda: TEXT_INPUT_NATIVE_TEXTAREA_STYLE\n)\n</code></pre>","boost":0.5},{"location":"cli/cli/","title":"<code>fastagency</code>","text":"<p>FastAgency CLI - The fastapi command line app. \ud83d\ude0e</p> <p>Manage your FastAgency projects, run your FastAgency apps, and more.</p> <p>Read more in the docs: https://fastagency.ai/latest/.</p> <p>Usage:</p> <pre><code>$ fastagency [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--version</code>: Show the version and exit.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>dev</code>: Run a FastAgency app in <code>development</code> mode.</li> <li><code>run</code>: Run a FastAgency app in <code>production</code> mode.</li> <li><code>version</code>: Display the version of FastAgency</li> </ul>"},{"location":"cli/cli/#fastagency-dev","title":"<code>fastagency dev</code>","text":"<p>Run a FastAgency app in <code>development</code> mode. \ud83d\ude80</p> <p>This is similar to the fastagency run command but with reload enabled and listening on the <code>127.0.0.1</code> address.</p> <p>It automatically detects the Python module or package that needs to be imported based on the file or directory path passed.</p> <p>If no path is passed, it tries with:</p> <ul> <li><code>main.py</code></li> <li><code>app.py</code></li> <li><code>api.py</code></li> <li><code>app/main.py</code></li> <li><code>app/app.py</code></li> <li><code>app/api.py</code></li> </ul> <p>It also detects the directory that needs to be added to the PYTHONPATH to make the app importable and adds it.</p> <p>It detects the FastAgency app object to use. By default it looks in the module or package for an object named:</p> <ul> <li><code>app</code></li> <li><code>api</code></li> </ul> <p>Otherwise, it uses the first FastAgency app found in the imported module or package.</p> <p>Usage:</p> <pre><code>$ fastagency dev [OPTIONS] [PATH]\n</code></pre> <p>Arguments:</p> <ul> <li><code>[PATH]</code>: A path to a Python file or package directory (with <code>init.py</code> files) containing a FastAgency app. If not provided, a default set of paths will be tried.</li> </ul> <p>Options:</p> <ul> <li><code>--app TEXT</code>: The name of the variable that contains the **** app in the imported module or package. If not provided, it is detected automatically.</li> <li><code>-w, --workflow TEXT</code>: The name of the workflow to run. If not provided, the default workflow will be run.</li> <li><code>-i, --initial_message TEXT</code>: The initial message to send to the workflow. If not provided, a default message will be sent.</li> <li><code>--single-run</code>: If set, only a single workflow will be executed.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/cli/#fastagency-run","title":"<code>fastagency run</code>","text":"<p>Run a FastAgency app in <code>production</code> mode. \ud83d\ude80</p> <p>This is similar to the fastagency dev command, but optimized for production environments.</p> <p>It automatically detects the Python module or package that needs to be imported based on the file or directory path passed.</p> <p>If no path is passed, it tries with:</p> <ul> <li><code>main.py</code></li> <li><code>app.py</code></li> <li><code>api.py</code></li> <li><code>app/main.py</code></li> <li><code>app/app.py</code></li> <li><code>app/api.py</code></li> </ul> <p>It also detects the directory that needs to be added to the PYTHONPATH to make the app importable and adds it.</p> <p>It detects the FastAgency app object to use. By default it looks in the module or package for an object named:</p> <ul> <li><code>app</code></li> <li><code>api</code></li> </ul> <p>Otherwise, it uses the first FastAgency app found in the imported module or package.</p> <p>Usage:</p> <pre><code>$ fastagency run [OPTIONS] [PATH]\n</code></pre> <p>Arguments:</p> <ul> <li><code>[PATH]</code>: A path to a Python file or package directory (with <code>init.py</code> files) containing a FastAgency app. If not provided, a default set of paths will be tried.</li> </ul> <p>Options:</p> <ul> <li><code>--app TEXT</code>: The name of the variable that contains the **** app in the imported module or package. If not provided, it is detected automatically.</li> <li><code>-w, --workflow TEXT</code>: The name of the workflow to run. If not provided, the default workflow will be run.</li> <li><code>-i, --initial_message TEXT</code>: The initial message to send to the workflow. If not provided, a default message will be sent.</li> <li><code>--single-run</code>: If set, only a single workflow will be executed.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/cli/#fastagency-version","title":"<code>fastagency version</code>","text":"<p>Display the version of FastAgency</p> <p>Usage:</p> <pre><code>$ fastagency version [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/CONTRIBUTING/","title":"Development Environment Setup","text":"<p>You can set up the development environment using one of two methods:</p> <ol> <li>Using GitHub Codespaces</li> <li>Setting Up Locally with Dev Containers</li> </ol>","boost":3},{"location":"contributing/CONTRIBUTING/#using-github-codespaces","title":"Using GitHub Codespaces","text":"<p>Using GitHub Codespaces is the fastest way to contribute without setting up a local development environment.</p> <p>Follow the steps below to begin contributing using Codespaces.</p>","boost":3},{"location":"contributing/CONTRIBUTING/#1-fork-the-repository","title":"1. Fork the Repository","text":"<ul> <li>Navigate to the FastAgency GitHub repository.</li> <li>Click on the Fork button in the top-right corner to create your own copy of the repository.</li> </ul>","boost":3},{"location":"contributing/CONTRIBUTING/#2-open-a-codespace","title":"2. Open a Codespace","text":"<ul> <li>In your forked repository, navigate to the main page.</li> <li>Ensure you are on the main branch.</li> <li>Click the &lt; &gt; Code button, then select the Codespaces tab.</li> <li>Click on Create codespace on main.</li> </ul>","boost":3},{"location":"contributing/CONTRIBUTING/#advanced-options","title":"Advanced Options","text":"<ul> <li>If you choose to configure advanced options, you will have the opportunity to set optional environment secrets needed for development while starting the codespace.</li> <li>For detailed instructions related to advanced options, refer to the GitHub Codespaces documentation.</li> </ul> <p>Note: If you create the Codespace using the default options, you may not see an option to set environment variables during setup. However, you can set them later in the terminal after starting the Codespace, as needed. For a list of environment variables, please refer to the section below.</p>","boost":3},{"location":"contributing/CONTRIBUTING/#setting-environment-variables-optional","title":"Setting Environment Variables (Optional)","text":"<p>If you choose to configure advanced options when creating the Codespace, you might see a section called Recommended secrets. These are optional and depend on the parts of the codebase you plan to work on.</p>","boost":3},{"location":"contributing/CONTRIBUTING/#working-with-external-apis","title":"Working with External APIs","text":"<p>If your contributions involve interacting with external APIs (e.g., OpenAI), you need to provide your own API keys.</p> <ul> <li>For example, to work with OpenAI services, set the <code>OPENAI_API_KEY</code> environment variable.</li> </ul>","boost":3},{"location":"contributing/CONTRIBUTING/#how-to-set-environment-variables","title":"How to Set Environment Variables","text":"<ul> <li>While creating the Codespace, find the section for Recommended secrets and enter the necessary keys.</li> <li>You can also set the keys as environment variables after starting the Codespace in the terminal.</li> </ul>","boost":3},{"location":"contributing/CONTRIBUTING/#list-of-optional-environment-variables","title":"List of Optional environment variables","text":"<p>The table below provides a list of optional environment variables that you may need to set.</p> Name Description <code>OPENAI_API_KEY</code> Optional; needed if working on OpenAI-related code. Can be set later in the Codespace terminal. <code>TOGETHER_API_KEY</code> Optional; needed if working with Together API-related code. Can be set later in the Codespace terminal. <code>ANTHROPIC_API_KEY</code> Optional; needed if working with Anthropic API-related code. Can be set later in the Codespace terminal. <code>AZURE_OPENAI_API_KEY</code> Optional; required if using Azure's OpenAI services. Also set <code>AZURE_API_ENDPOINT</code>, <code>AZURE_API_VERSION</code>, and at least one Azure model. <code>AZURE_API_ENDPOINT</code> Required with <code>AZURE_OPENAI_API_KEY</code>, <code>AZURE_API_VERSION</code>, and at least one Azure model when using Azure's OpenAI services. Can be set later in the Codespace terminal. <code>AZURE_API_VERSION</code> Required with <code>AZURE_OPENAI_API_KEY</code>, <code>AZURE_API_ENDPOINT</code>, and at least one Azure model when using Azure's OpenAI services. Can be set later in the Codespace terminal. <code>AZURE_GPT35_MODEL</code> Required if using Azure's GPT-3.5 model; must also set other Azure-related keys. Can be configured later as an environment variable. <code>AZURE_GPT4_MODEL</code> Required if using Azure's GPT-4 model; must also set other Azure-related keys. Can be configured later in the Codespace terminal. <code>AZURE_GPT4o_MODEL</code> Required if using Azure's GPT-4o model; must also set other Azure-related keys. Can be configured later as an environment variable. <code>BING_API_KEY</code> Optional; used to enhance WebSurfer agent performance with Bing search and data services. Can be set later as an environment variable.","boost":3},{"location":"contributing/CONTRIBUTING/#3-wait-for-codespace-initialization","title":"3. Wait for Codespace Initialization","text":"<ul> <li>After initiating the Codespace, wait for it to set up. This may take a few minutes.</li> <li>The development environment is configured automatically, including the installation of all dependencies.</li> <li>No manual setup is required on your part.</li> <li>Once the Codespace is ready, you can start coding immediately.</li> </ul>","boost":3},{"location":"contributing/CONTRIBUTING/#setting-up-locally-with-dev-containers","title":"Setting Up Locally with Dev Containers","text":"<p>Our project supports development using Visual Studio Code's Dev Containers feature. This allows contributors to set up a consistent development environment inside a Docker container.</p> <p>Here's how you can use Dev Containers to contribute to our project:</p>","boost":3},{"location":"contributing/CONTRIBUTING/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following installed:</p> <ul> <li>Visual Studio Code: Download and install the latest version from the official website.</li> <li>Dev Containers Extension: Open Visual Studio Code, go to the Extensions view (<code>Ctrl+Shift+X</code> or <code>Cmd+Shift+X</code>), search for \"Dev Containers\" by Microsoft, and install it.</li> <li>Docker: Install Docker Desktop for your operating system from the official website. Docker is required to build and run the dev container.</li> </ul>","boost":3},{"location":"contributing/CONTRIBUTING/#setting-up-the-project","title":"Setting up the project","text":"","boost":3},{"location":"contributing/CONTRIBUTING/#1-fork-the-repository_1","title":"1. Fork the repository","text":"<ul> <li>Navigate to the FastAgency GitHub repository.</li> <li>Click on the Fork button in the top-right corner to create your own copy of the repository.</li> </ul>","boost":3},{"location":"contributing/CONTRIBUTING/#2-clone-the-forked-repository","title":"2. Clone the forked repository","text":"<p>Clone your forked FastAgency repository to your local machine:</p> <pre><code>git clone https://github.com/&lt;your-username&gt;/fastagency.git\n</code></pre> <p>Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p>","boost":3},{"location":"contributing/CONTRIBUTING/#3-open-the-project-in-a-dev-container","title":"3. Open the project in a dev container","text":"<ul> <li>Open Visual Studio Code.</li> <li>Open the cloned repository folder in Visual Studio Code.</li> <li>Visual Studio Code automatically detects that this project uses a dev container and prompts you to reopen the project in the container via a prompt at the bottom right corner of the editor. Click on the Reopen in Container button in this prompt to display the Command Palette, where you can choose a container configuration file from the list of options.</li> <li>Alternatively, you can launch the Command Palette directly by pressing <code>Ctrl+Shift+P</code> (Windows/Linux) or <code>Cmd+Shift+P</code> (macOS) and select Dev Containers: Rebuild and Reopen in Container. This will also prompt you to choose a container configuration file from the list of options.</li> <li>Once you select a configuration file, Visual Studio Code will read the container configuration and reopen the project inside the dev container. You can click on the Show Logs link in the prompt displayed at the bottom right to see the live logs.</li> <li>The development environment is configured automatically, including the installation of all dependencies.</li> <li>No manual setup is required on your part.</li> <li>Once the devcontainer is ready, you can start coding immediately.</li> </ul>","boost":3},{"location":"contributing/CONTRIBUTING/#4-set-optional-environment-variables","title":"4. Set Optional Environment Variables","text":"<p>Depending on your contribution, you may need to set a few optional environment variables. Please refer to the list of optional environment variables for details.</p>","boost":3},{"location":"contributing/CONTRIBUTING/#making-changes-and-submitting-a-pull-request","title":"Making Changes and Submitting a Pull Request","text":"<ol> <li> <p>Create a New Branch</p> <ul> <li>From your main branch, create a new branch for your changes or new features.</li> </ul> </li> <li> <p>Make Your Changes</p> <ul> <li>Implement the necessary changes or add new features in your branch.</li> </ul> </li> <li> <p>Test Your Changes</p> <ul> <li> <p>Ensure your changes work as expected by running the project's tests or manually testing the functionality.</p> </li> <li> <p>To run tests, use:     <pre><code>pytest tests\n</code></pre></p> </li> <li> <p>In the project, you'll find some pytest marks:</p> <ul> <li><code>slow</code></li> <li><code>all</code></li> </ul> </li> <li> <p>By default, running <code>pytest</code> will execute tests not marked as <code>slow</code>.</p> </li> <li>To run all tests, including slow ones, use:     <pre><code>pytest -m 'all'\n</code></pre></li> </ul> </li> <li> <p>Commit and Push Your Changes</p> <ul> <li>After testing, commit your changes to your branch and push them to your forked repository.</li> </ul> </li> <li> <p>Create a Pull Request</p> <ul> <li>Navigate to your forked repository on GitHub.</li> <li>Create a new pull request targeting our project's main branch.</li> <li>Provide a clear title and description for your changes.</li> </ul> </li> </ol> <p>Thank you for your contributions! If you have any questions or need assistance, feel free to open an issue or reach out to the maintainers.</p>","boost":3},{"location":"contributing/docs/","title":"Documentation","text":"","boost":3},{"location":"contributing/docs/#how-to-help","title":"How to help","text":"<p>You will be of invaluable help if you contribute to the documentation.</p> <p>Such a contribution can be:</p> <ul> <li>Indications of inaccuracies, errors, typos</li> <li>Suggestions for editing specific sections</li> <li>Making additions</li> </ul> <p>You can report all this in discussions on GitHub, start issue, or write about it in our discord group.</p> <p>Note</p> <p>Special thanks to those who are ready to offer help with the case and help in developing documentation, as well as translating it into other languages.</p>","boost":3},{"location":"contributing/docs/#how-to-get-started","title":"How to get started","text":"<p>To develop the documentation, you don't even need to install the entire FastAgency project as a whole.</p> <p>Enough:</p> <ol> <li>Clone the project repository</li> <li>Create a virtual environment     <pre><code>python -m venv venv\n</code></pre></li> <li>Activate it     <pre><code>source venv/bin/activate\n</code></pre></li> <li>Install documentation dependencies     <pre><code>pip install \".[devdocs]\"\n</code></pre></li> <li>Go to the <code>docs/</code> directory</li> <li>Start the local documentation server     <pre><code>mkdocs serve\n</code></pre></li> </ol> <p>Now all changes in the documentation files will be reflected on your local version of the site. After making all the changes, you can issue a <code>PR</code> with them - and we will gladly accept it!</p>","boost":3},{"location":"getting-started/","title":"Getting Started with FastAgency","text":"<p>The fastest way to bring multi-agent workflows to production.</p> <p> </p> <p>Welcome to FastAgency! This guide will walk you through the initial setup and usage of FastAgency, a powerful tool that leverages the AutoGen framework to quickly build applications. FastAgency is designed to be flexible and adaptable, and we plan to extend support to additional agentic frameworks such as CrewAI in the near future. This will provide even more options for defining workflows and integrating with various AI tools.</p> <p>With FastAgency, you can create interactive applications using various interfaces such as a console or Mesop.</p>","boost":10},{"location":"getting-started/#supported-interfaces","title":"Supported Interfaces","text":"<p>FastAgency currently supports workflows defined using AutoGen and provides options for different types of applications:</p> <ul> <li>Console: Use the ConsoleUI interface for command-line based interaction. This is ideal for developing and testing workflows in a text-based environment.</li> <li>Mesop: Utilize Mesop with MesopUI for web-based applications. This interface is suitable for creating web applications with a user-friendly interface.</li> </ul> <p>We are also working on adding support for other frameworks, such as CrewAI, to broaden the scope and capabilities of FastAgency. Stay tuned for updates on these integrations.</p>","boost":10},{"location":"getting-started/#quick-start","title":"Quick start","text":"","boost":10},{"location":"getting-started/#install","title":"Install","text":"<p>To get started, you need to install FastAgency. You can do this using <code>pip</code>, Python's package installer. Choose the installation command based on the interface you want to use:</p> ConsoleMesop <pre><code>pip install \"fastagency[autogen]\"\n</code></pre> <p>This command installs FastAgency with support for the Console interface and AutoGen framework.</p> <pre><code>pip install \"fastagency[autogen,mesop]\"\n</code></pre> <p>This command installs FastAgency with support for both the Console and Mesop interfaces, providing a more comprehensive setup.</p> <p>Using older AutoGen version 0.2.x</p> <p>In case you want to use an older version of AutoGen (<code>pyautogen</code> instead of <code>autogen</code> package ), please use the following pip command:</p> ConsoleMesop <pre><code>pip install \"fastagency[pyautogen]\"\n</code></pre> <p>This command installs FastAgency with support for the Console interface and AutoGen framework.</p> <pre><code>pip install \"fastagency[pyautogen,mesop]\"\n</code></pre>","boost":10},{"location":"getting-started/#imports","title":"Imports","text":"<p>Depending on the interface you choose, you'll need to import different modules. These imports set up the necessary components for your application:</p> ConsoleMesop <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.ui.console import ConsoleUI\n</code></pre> <p>For Console applications, import <code>ConsoleUI</code> to handle command-line input and output.</p> <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.ui.mesop import MesopUI\n</code></pre> <p>For Mesop applications, import <code>MesopUI</code> to integrate with the Mesop web interface.</p>","boost":10},{"location":"getting-started/#define-workflow","title":"Define Workflow","text":"<p>You need to define the workflow that your application will use. This is where you specify how the agents interact and what they do. Here's a simple example of a workflow definition:</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_learning\", description=\"Student and teacher learning chat\")\ndef simple_workflow(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student willing to learn.\",\n        llm_config=llm_config,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a math teacher.\",\n        llm_config=llm_config,\n    )\n\n    chat_result = student_agent.initiate_chat(\n        teacher_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre> <p>This code snippet sets up a simple learning chat between a student and a teacher. You define the agents and how they should interact, specifying how the conversation should be summarized.</p>","boost":10},{"location":"getting-started/#define-fastagency-application","title":"Define FastAgency Application","text":"<p>Next, define your FastAgency application. This ties together your workflow and the interface you chose:</p> ConsoleMesop <pre><code>app = FastAgency(wf=wf, ui=ConsoleUI(), title=\"Learning Chat\")\n</code></pre> <p>For Console applications, use <code>ConsoleUI</code> to handle user interaction via the command line.</p> <pre><code>app = FastAgency(wf=wf, ui=MesopUI(), title=\"Learning Chat\")\n</code></pre> <p>For Mesop applications, use <code>MesopUI</code> to enable web-based interactions.</p>","boost":10},{"location":"getting-started/#complete-application-code","title":"Complete Application Code","text":"ConsoleMesop <p> main.py <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.ui.console import ConsoleUI\n\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_learning\", description=\"Student and teacher learning chat\")\ndef simple_workflow(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student willing to learn.\",\n        llm_config=llm_config,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a math teacher.\",\n        llm_config=llm_config,\n    )\n\n    chat_result = student_agent.initiate_chat(\n        teacher_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n\n\napp = FastAgency(wf=wf, ui=ConsoleUI(), title=\"Learning Chat\")\n</code></pre> </p> <p> main.py <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.ui.mesop import MesopUI\n\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_learning\", description=\"Student and teacher learning chat\")\ndef simple_workflow(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student willing to learn.\",\n        llm_config=llm_config,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a math teacher.\",\n        llm_config=llm_config,\n    )\n\n    chat_result = student_agent.initiate_chat(\n        teacher_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=5,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n\n\napp = FastAgency(wf=wf, ui=MesopUI(), title=\"Learning Chat\")\n</code></pre> </p>","boost":10},{"location":"getting-started/#run-application","title":"Run Application","text":"<p>Once everything is set up, you can run your FastAgency application using the following command:</p> ConsoleMesop <pre><code>fastagency run\n</code></pre> <pre><code>fastagency run\n</code></pre> <p>However, the preferred way of running Mesop application is a Python WSGI HTTP Server such as Gunicorn. First, you need to install it using package manager such as <code>pip</code>: <pre><code>pip install gunicorn\n</code></pre> and then you can run it with: <pre><code>gunicorn main:app\n</code></pre></p>","boost":10},{"location":"getting-started/#output","title":"Output","text":"<p>The output will vary based on the interface:</p> ConsoleMesop <pre><code>\u256d\u2500 Python module file \u2500\u256e\n\u2502                      \u2502\n\u2502  \ud83d\udc0d main.py          \u2502\n\u2502                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n\u256d\u2500 Importable FastAgency app \u2500\u256e\n\u2502                             \u2502\n\u2502  from main import app       \u2502\n\u2502                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500 FastAgency -&gt; user [text_input] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 Starting a new workflow 'simple_learning' with the following                 \u2502\n\u2502 description:                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 Student and teacher learning chat                                            \u2502\n\u2502                                                                              \u2502\n\u2502 Please enter an                                                              \u2502\n\u2502 initial message:                                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>For Console applications, you will see a command-line prompt where you can enter the initial message and interact with your workflow.</p> <pre><code>[2024-10-01 16:18:59 +0000] [20390] [INFO] Starting gunicorn 23.0.0\n[2024-10-01 16:18:59 +0000] [20390] [INFO] Listening at: http://127.0.0.1:8000 (20390)\n[2024-10-01 16:18:59 +0000] [20390] [INFO] Using worker: sync\n[2024-10-01 16:18:59 +0000] [20391] [INFO] Booting worker with pid: 20391\n</code></pre> <p></p>","boost":10},{"location":"getting-started/#future-plans","title":"Future Plans","text":"<p>We are actively working on expanding FastAgency\u2019s capabilities. In addition to supporting AutoGen, we plan to integrate support for other frameworks, such as CrewAI, to provide more flexibility and options for building applications. This will allow you to define workflows using a variety of frameworks and leverage their unique features and functionalities.</p>","boost":10},{"location":"getting-started/#stay-in-touch","title":"Stay in touch","text":"<p>Please show your support and stay in touch by:</p> <ul> <li> <p>giving our GitHub repository a star, and</p> </li> <li> <p>joining our Discord server</p> </li> </ul> <p>Your support helps us to stay in touch with you and encourages us to continue developing and improving the framework. Thank you for your support!</p>","boost":10},{"location":"getting-started/#contributors","title":"Contributors","text":"<p>Thanks to all of these amazing people who made the project better!</p> <p> </p>","boost":10},{"location":"tutorial/giphy/","title":"Web Scraping and Giphy API Integration","text":"<p>In this tutorial, we will explore how to leverage the FastAgency framework to create a dynamic and interactive chatbot that integrates two powerful agents:</p> <p>WebSurferAgent \u2013 A web-scraping agent capable of retrieving relevant content from webpages. GiphyAgent \u2013 An agent that interacts with the Giphy API to fetch GIFs based on the user\u2019s request.</p> <p>The chat system will operate between these two agents and the user, allowing them to scrape web content and generate GIFs based on that content, all within a seamless conversation. This tutorial will guide you through setting up these agents and handling user interaction in a secure, structured, and intuitive manner.</p>"},{"location":"tutorial/giphy/#what-youll-learn","title":"What You\u2019ll Learn","text":"<p>By the end of this tutorial, you\u2019ll understand how to:</p> <ul> <li>Integrate external APIs like Giphy with FastAgency.</li> <li>Build and register agents that can autonomously scrape the web for relevant information.</li> <li>Use FastAgency workflows to manage agent interactions and user input.</li> <li>Present scraped content to the user and offer personalized GIF suggestions based on that content.</li> </ul> <p>We will walk through setting up each agent, handling API security, and creating a cohesive conversation that can scrape data, process user input, and generate GIFs in response.</p> <p>Let\u2019s dive into creating a powerful interactive agent system with FastAgency!</p>"},{"location":"tutorial/giphy/#installation-and-api-key-setup","title":"Installation and API Key Setup","text":"<p>Before we dive into building our agents, let\u2019s go over the necessary setup. We will guide you through installing the FastAgency framework and obtaining the API key needed for the Giphy integration.</p>"},{"location":"tutorial/giphy/#installing-fastagency","title":"Installing FastAgency","text":"<p>To get started, you need to install FastAgency with OpenAPI submodule. You can do this using <code>pip</code>, Python's package installer.</p> <pre><code>pip install \"fastagency[autogen,mesop,openapi]\"\n</code></pre>"},{"location":"tutorial/giphy/#api-key-setup","title":"API Key Setup","text":"<p>WebSurferAgent requires an Bing Web Search API key and GiphyAgent requires an API key to interact with Giphy's service. Follow these steps to create your API keys:</p>"},{"location":"tutorial/giphy/#create-bing-web-search-api-key","title":"Create Bing Web Search API Key","text":"<p>To create Bing Web Search API key, follow the guide provided.</p> <p>Note</p> <p>You will need to create Microsoft Azure Account.</p>"},{"location":"tutorial/giphy/#create-a-giphy-account","title":"Create a Giphy Account","text":"<p>Step 1: If you don\u2019t have a Giphy account, you\u2019ll need to sign up:</p> <ul> <li>Go to Giphy Developers</li> <li>Click on Create Account.</li> </ul> <p>Step 2: Navigate to Dashboard</p> <p>Note</p> <p>You may need to wait a few minutes after creating your account before being able to access the Dashboard page.</p> <ul> <li>Click on Create an API key and choose API as the type of app and give it a name (e.g., \"FastAgency Giphy App\").</li> <li>Agree to the terms and click Create App.</li> </ul> <p>Step 3: Get Your API Key After creating the app, you\u2019ll be provided with an API Key.</p> <ul> <li>Copy this key and continue with the following steps.</li> </ul>"},{"location":"tutorial/giphy/#set-up-your-api-keys-in-the-environment","title":"Set Up Your API Keys in the Environment","text":"<p>To securely use the API keys in your project, you should store it in an environment variables.</p> <p>You can set the API keys in your terminal as an environment variable:</p> Linux/macOSWindows <pre><code>export GIPHY_API_KEY=\"your_giphy_api_key\"\nexport BING_API_KEY=\"your_bing_api_key\"\n</code></pre> <pre><code>set GIPHY_API_KEY=\"your_giphy_api_key\"\nset BING_API_KEY=\"your_bing_api_key\"\n</code></pre>"},{"location":"tutorial/giphy/#complete-application-code","title":"Complete Application Code","text":"main.py <pre><code>import os\nfrom typing import Annotated, Any, Optional\n\nfrom autogen import register_function\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.api.openapi.client import OpenAPI\nfrom fastagency.api.openapi.security import APIKeyQuery\nfrom fastagency.base import TextInput\nfrom fastagency.runtime.autogen.agents.websurfer import WebSurferAgent\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\nfrom fastagency.ui.mesop import MesopUI\n\n\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nopenapi_url = \"https://raw.githubusercontent.com/airtai/fastagency/refs/heads/main/examples/openapi/giphy_openapi.json\"\ngiphy_api = OpenAPI.create(openapi_url=openapi_url)\n\ngiphy_api_key = os.getenv(\"GIPHY_API_KEY\")\ngiphy_api.set_security_params(APIKeyQuery.Parameters(value=giphy_api_key))\n\nGIPHY_SYSTEM_MESSAGE = \"\"\"You are an agent in charge to communicate with the user and Giphy API.\nAlways use 'present_completed_task_or_ask_question' to interact with the user.\n- make sure that the 'message' parameter contains all the necessary information for the user!\nInitially, the Web_Surfer_Agent will provide you with some content from the web.\nYou must present this content provided Web_Surfer_Agent to the user by using 'present_completed_task_or_ask_question'.\nAlong with the content, ask the user if he wants you to generate some gifs based on the content.\n- Do NOT generate gifs BEFORE you present the web content to the user, otherwise, you will be penalized!\n\nOnce get the wanted gifs, present them to the user by using 'present_completed_task_or_ask_question' again.\nNote: Use '.gif' files when presenting a gif to the user and format it as a markdown gif -&gt; ![Title](url)\n- Also, make sure to add new lines '\\n\\n' between headlines and gifs for better readability.\ne.g.:\n'''\n# Here are some gifs for you:\n\n## Title 1\n![Title 1](url1)\n\n## Title 2\n![Title 2](url2)\n'''\n\nWrite 'TERMINATE' to end the conversation.\"\"\"\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"giphy_and_websurfer\", description=\"Giphy and Websurfer chat\")\ndef giphy_workflow_with_security(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    def is_termination_msg(msg: dict[str, Any]) -&gt; bool:\n        return msg[\"content\"] is not None and \"TERMINATE\" in msg[\"content\"]\n\n    def present_completed_task_or_ask_question(\n        message: Annotated[str, \"Message for examiner\"],\n    ) -&gt; Optional[str]:\n        try:\n            msg = TextInput(\n                sender=\"giphy_agent\",\n                recipient=\"giphy_agent\",\n                prompt=message,\n            )\n            return ui.process_message(msg)\n        except Exception as e:  # pragma: no cover\n            return f\"present_completed_task_or_ask_question() FAILED! {e}\"\n\n    giphy_agent = ConversableAgent(\n        name=\"Giphy_Agent\",\n        system_message=GIPHY_SYSTEM_MESSAGE,\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n        is_termination_msg=is_termination_msg,\n    )\n    web_surfer = WebSurferAgent(\n        name=\"Web_Surfer_Agent\",\n        llm_config=llm_config,\n        summarizer_llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n        executor=giphy_agent,\n        is_termination_msg=is_termination_msg,\n    )\n\n    register_function(\n        present_completed_task_or_ask_question,\n        caller=giphy_agent,\n        executor=web_surfer,\n        name=\"present_completed_task_or_ask_question\",\n        description=\"\"\"Present completed task or ask question.\nIf you are presenting a completed task, last message should be a question: 'Do yo need anything else?'\"\"\",\n    )\n\n    functions = [\"random_gif\", \"search_gifs\", \"trending_gifs\"]\n    wf.register_api(\n        api=giphy_api,\n        callers=giphy_agent,\n        executors=web_surfer,\n        functions=functions,\n    )\n\n    chat_result = giphy_agent.initiate_chat(\n        web_surfer,\n        message=f\"Users initial message: {initial_message}\",\n        summary_method=\"reflection_with_llm\",\n        max_turns=10,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n\n\napp = FastAgency(wf=wf, ui=MesopUI(), title=\"Giphy and Websurfer chat\")\n</code></pre>"},{"location":"tutorial/giphy/#code-walkthrough","title":"Code Walkthrough","text":"<p>Now we will go over each key part of the code, explaining its function and purpose within the FastAgency framework. Understanding these components is crucial for building a dynamic interaction between the user, the WebSurferAgent, and the GiphyAgent.</p>"},{"location":"tutorial/giphy/#creating-the-giphy-api-instance","title":"Creating the Giphy API Instance","text":"<p>The following lines shows hot to initializes the Giphy API by loading the OpenAPI specification from a URL. The OpenAPI spec defines how to interact with the Giphy API, including endpoints, parameters, and security details.</p> <p>Also, we configure the Giphy API with the GIPHY_API_KEY using set_security_params to authenticate our requests. <pre><code>openapi_url = \"https://raw.githubusercontent.com/airtai/fastagency/refs/heads/main/examples/openapi/giphy_openapi.json\"\ngiphy_api = OpenAPI.create(openapi_url=openapi_url)\n\ngiphy_api_key = os.getenv(\"GIPHY_API_KEY\")\ngiphy_api.set_security_params(APIKeyQuery.Parameters(value=giphy_api_key))\n</code></pre></p> <p>For more information, visit API Integration User Guide.</p>"},{"location":"tutorial/giphy/#registering-the-workflow","title":"Registering the Workflow","text":"<p>Here, we initialize a new workflow using AutoGenWorkflows() and register it under the name \"giphy_and_websurfer\". The @wf.register decorator registers the function to handle chat flow with security enabled, combining both GiphyAgent and WebSurferAgent.</p> <pre><code>@wf.register(name=\"giphy_and_websurfer\", description=\"Giphy and Websurfer chat\")\ndef giphy_workflow_with_security(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n</code></pre>"},{"location":"tutorial/giphy/#interaction-with-the-user","title":"Interaction with the user","text":"<p>This is a core function used by the GiphyAgent to either present the task result or ask a follow-up question to the user. The message is wrapped in a TextInput object, and then ui.process_message() sends it for user interaction.</p> <pre><code>    def present_completed_task_or_ask_question(\n        message: Annotated[str, \"Message for examiner\"],\n    ) -&gt; Optional[str]:\n        try:\n            msg = TextInput(\n                sender=\"giphy_agent\",\n                recipient=\"giphy_agent\",\n                prompt=message,\n            )\n            return ui.process_message(msg)\n        except Exception as e:  # pragma: no cover\n            return f\"present_completed_task_or_ask_question() FAILED! {e}\"\n</code></pre>"},{"location":"tutorial/giphy/#creating-the-giphy-and-websurfer-agents","title":"Creating the Giphy and WebSurfer Agents","text":"<ul> <li>GiphyAgent: A ConversableAgent is created with the name \"Giphy_Agent\". It uses the system message defined earlier and relies on the termination function to end the chat when needed.</li> <li>WebSurferAgent: The WebSurferAgent is responsible for scraping web content and passes the retrieved data to the GiphyAgent. It\u2019s configured with a summarizer to condense web content, which is useful when presenting concise data to the user. For more information, visit WebSurfer User Guide.</li> </ul> <pre><code>    giphy_agent = ConversableAgent(\n        name=\"Giphy_Agent\",\n        system_message=GIPHY_SYSTEM_MESSAGE,\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n        is_termination_msg=is_termination_msg,\n    )\n    web_surfer = WebSurferAgent(\n        name=\"Web_Surfer_Agent\",\n        llm_config=llm_config,\n        summarizer_llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n        executor=giphy_agent,\n        is_termination_msg=is_termination_msg,\n    )\n</code></pre>"},{"location":"tutorial/giphy/#registering-functions","title":"Registering Functions","text":"<p>The function present_completed_task_or_ask_question is registered to allow the GiphyAgent to ask questions or present completed tasks after receiving data from the WebSurferAgent.</p> <pre><code>    register_function(\n        present_completed_task_or_ask_question,\n        caller=giphy_agent,\n        executor=web_surfer,\n        name=\"present_completed_task_or_ask_question\",\n        description=\"\"\"Present completed task or ask question.\nIf you are presenting a completed task, last message should be a question: 'Do yo need anything else?'\"\"\",\n    )\n</code></pre> <p>We specify which Giphy API functions can be used by the GiphyAgent: random_gif, search_gifs, and trending_gifs. These functions allow the agent to generate GIFs based on user input or trending content. <pre><code>    functions = [\"random_gif\", \"search_gifs\", \"trending_gifs\"]\n    wf.register_api(\n        api=giphy_api,\n        callers=giphy_agent,\n        executors=web_surfer,\n        functions=functions,\n    )\n</code></pre></p>"},{"location":"tutorial/giphy/#initiating-the-chat","title":"Initiating the Chat","text":"<p>We initiate the conversation between the user, WebSurferAgent, and GiphyAgent. The user\u2019s initial message is provided, and the system is configured to handle up to 10 turns of interaction. The conversation is summarized using the reflection_with_llm method, which uses a language model to summarize the chat.</p> <p>Once the conversation ends, the summary is returned to the user, wrapping up the session.</p> <pre><code>    chat_result = giphy_agent.initiate_chat(\n        web_surfer,\n        message=f\"Users initial message: {initial_message}\",\n        summary_method=\"reflection_with_llm\",\n        max_turns=10,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre>"},{"location":"tutorial/giphy/#starting-the-application","title":"Starting the Application","text":"<p>The FastAgency app is created, using the registered workflows (wf) and web-based user interface (MesopUI). This makes the conversation between agents and the user interactive.</p> <pre><code>app = FastAgency(wf=wf, ui=MesopUI(), title=\"Giphy and Websurfer chat\")\n</code></pre> <p>For more information, visit Mesop User Guide.</p>"},{"location":"tutorial/giphy/#running-the-application","title":"Running the Application","text":"<p>Once the workflow is set up, you can run the application using the FastAgency CLI. Navigate to the directory where the script is located and run the following command:</p> <pre><code>fastagency run\n</code></pre> <pre><code> \u256d\u2500 Python package file structure \u2500\u2500\u256e\n \u2502                                  \u2502\n \u2502  \ud83d\udcc1 docs                         \u2502\n \u2502  \u251c\u2500\u2500 \ud83d\udc0d __init__.py              \u2502\n \u2502  \u2514\u2500\u2500 \ud83d\udcc1 docs_src                 \u2502\n \u2502      \u251c\u2500\u2500 \ud83d\udc0d __init__.py          \u2502\n \u2502      \u2514\u2500\u2500 \ud83d\udcc1 tutorial             \u2502\n \u2502          \u251c\u2500\u2500 \ud83d\udc0d __init__.py      \u2502\n \u2502          \u2514\u2500\u2500 \ud83d\udcc1 giphy            \u2502\n \u2502              \u251c\u2500\u2500 \ud83d\udc0d __init__.py  \u2502\n \u2502              \u2514\u2500\u2500 \ud83d\udc0d main.py      \u2502\n \u2502                                  \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n/home/vscode/.local/lib/python3.10/site-packages/pydantic/_internal/_config.py:341: UserWarning: Valid config keys have changed in V2:\n* 'keep_untouched' has been renamed to 'ignored_types'\n  warnings.warn(message, UserWarning)\n [INFO] Importing autogen.base.py\n/home/vscode/.local/lib/python3.10/site-packages/pydantic/main.py:214: UserWarning: A custom validator is returning a value other than `self`.\nReturning anything other than `self` from a top level model validator isn't supported when validating via `__init__`.\nSee the `model_validator` docs (https://docs.pydantic.dev/latest/concepts/validators/#model-validators) for more details.\n  warnings.warn(\n\n \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Importable FastAgency app \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502                                                     \u2502\n \u2502  from docs.docs_src.tutorial.giphy.main import app  \u2502\n \u2502                                                     \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n [INFO] Creating MesopUI with import string: docs.docs_src.tutorial.giphy.main:app\n [INFO] Starting MesopUI: import_string=docs.docs_src.tutorial.giphy.main:app, main_path=/tmp/tmpfi8uxdgv/main.py\nRunning with hot reload:\n\nRunning server on: http://localhost:32123\n * Serving Flask app 'mesop.server.server'\n * Debug mode: off\n</code></pre> <p>The command will launch a web interface where users can input their requests and interact with the agents (in this case http://localhost:32123)</p> <p>Note</p> <p>Ensure that your OpenAI API key is set in the environment, as the agents rely on it to interact using GPT-4o. If the API key is not correctly configured, the application may fail to retrieve LLM-powered responses.</p>"},{"location":"tutorial/giphy/#chat-example","title":"Chat Example","text":"<p>In this scenario, the user instructs the agents to scrape BBC Sport for the latest sports news.</p> <p></p> <p>Upon receiving the request, WebSurferAgent initiates the process by scraping the webpage for relevant updates.</p> <p></p> <p></p> <p>Once the scraping is complete, the agents deliver their findings to the user. In the final step, the user asks for a few Premier League GIFs, which GiphyAgent promptly provides.</p> <p></p> <p></p>"},{"location":"tutorial/giphy/#conclusion","title":"Conclusion","text":"<p>In this tutorial, we walked through how to create a simple chatbot using FastAgency that can scrape web content and provide relevant GIFs. By integrating the WebSurferAgent and GiphyAgent, we built a tool that lets users gather information from the web and request GIFs all in one conversation.</p> <p>You\u2019ve learned how to:</p> <ul> <li>Set up and connect external APIs, like Giphy, to your project.</li> <li>Handle API key security.</li> <li>Build an interactive workflow where users can scrape content and get personalized responses.</li> <li>Offer dynamic, engaging conversations with added visuals like GIFs.</li> <li>With these skills, you now have the foundation to expand and add more features to your chatbot, making it even more interactive and useful.</li> </ul>"},{"location":"user-guide/","title":"Introduction to FastAgency","text":"<p>FastAgency is an open-source framework designed to accelerate the transition from prototype to production for multi-agent AI workflows. For developers who use the AutoGen framework, FastAgency enables you to seamlessly scale Jupyter notebook prototypes into fully functional, production-ready applications. With multi-framework support, a unified programming interface, and powerful API integration capabilities, FastAgency streamlines the deployment process, saving time and effort while maintaining flexibility and performance.</p> <p>Whether you're orchestrating complex AI agents or integrating external APIs into workflows, FastAgency provides the tools necessary to quickly transition from concept to production, reducing development cycles and allowing you to focus on optimizing your multi-agent systems.</p>"},{"location":"user-guide/#key-features","title":"Key Features","text":"<ul> <li> <p>Multi-Runtime Support: FastAgency supports multiple agentic runtimes to provide maximum flexibility. Currently, it supports AutoGen and plans to extend support to CrewAI. This ensures that as the AI ecosystem evolves, FastAgency remains a reliable and adaptable framework, capable of leveraging emerging agentic technologies. Developers can easily switch between frameworks, choosing the best one for their project's specific needs.</p> </li> <li> <p>Unified Programming Interface Across UIs: FastAgency features a common programming interface that enables you to develop your core workflows once and reuse them across various user interfaces without rewriting code. This includes support for both console-based applications via <code>ConsoleUI</code> and web-based applications via <code>MesopUI</code>. Whether you need a command-line tool or a fully interactive web app, FastAgency allows you to deploy the same underlying workflows across environments, saving development time and ensuring consistency.</p> </li> <li> <p>Seamless External API Integration: One of FastAgency's standout features is its ability to easily integrate external APIs into your agent workflows. With just a single line of code, you can import an OpenAPI specification, and in only one more line, you can connect it to your agents. This dramatically simplifies the process of enhancing AI agents with real-time data, external processing, or third-party services. For example, you can easily integrate a weather API to provide dynamic, real-time weather updates to your users, making your application more interactive and useful with minimal effort.</p> </li> <li> <p>Tester Class for Continuous Integration: FastAgency also provides a Tester Class that enables developers to write and execute tests for their multi-agent workflows. This feature is crucial for maintaining the reliability and robustness of your application, allowing you to automatically verify agent behavior and interactions. The Tester Class is designed to integrate smoothly with continuous integration (CI) pipelines, helping you catch bugs early and ensure that your workflows remain functional as they scale into production.</p> </li> <li> <p>Command-Line Interface (CLI) for Orchestration: FastAgency includes a powerful command-line interface (CLI) for orchestrating and managing multi-agent applications directly from the terminal. The CLI allows developers to quickly run workflows, pass parameters, and monitor agent interactions without needing a full GUI. This is especially useful for automating deployments and integrating workflows into broader DevOps pipelines, enabling developers to maintain control and flexibility in how they manage AI-driven applications.</p> </li> </ul>"},{"location":"user-guide/#why-fastagency","title":"Why FastAgency?","text":"<p>FastAgency bridges the gap between rapid prototyping and production-ready deployment, empowering developers to bring their multi-agent systems to life quickly and efficiently. By integrating familiar frameworks like AutoGen, providing powerful API integration, and offering robust CI testing tools, FastAgency reduces the complexity and overhead typically associated with deploying AI agents in real-world applications.</p> <p>Whether you\u2019re building interactive console tools, developing fully-featured web apps, or orchestrating large-scale multi-agent systems, FastAgency is built to help you deploy faster, more reliably, and with greater flexibility.</p>"},{"location":"user-guide/#stay-in-touch","title":"\u2b50\u2b50\u2b50 Stay in touch \u2b50\u2b50\u2b50","text":"<p>Stay up to date with new features and integrations by following our documentation and community updates on our Discord server. FastAgency is continually evolving to support new frameworks, APIs, and deployment strategies, ensuring you remain at the forefront of AI-driven development.</p> <p>Last but not least, show us your support by giving a star to our GitHub repository.</p>"},{"location":"user-guide/basics/","title":"Getting Started with FastAgency","text":"<p>The fastest way to bring multi-agent workflows to production.</p> <p> </p> <p>Welcome to FastAgency! This guide will walk you through the initial setup and usage of FastAgency, a powerful tool that leverages the AutoGen framework to quickly build applications. FastAgency is designed to be flexible and adaptable, and we plan to extend support to additional agentic frameworks such as CrewAI in the near future. This will provide even more options for defining workflows and integrating with various AI tools.</p> <p>With FastAgency, you can create interactive applications using various interfaces such as a console or Mesop.</p>","boost":10},{"location":"user-guide/basics/#supported-interfaces","title":"Supported Interfaces","text":"<p>FastAgency currently supports workflows defined using AutoGen and provides options for different types of applications:</p> <ul> <li>Console: Use the ConsoleUI interface for command-line based interaction. This is ideal for developing and testing workflows in a text-based environment.</li> <li>Mesop: Utilize Mesop with MesopUI for web-based applications. This interface is suitable for creating web applications with a user-friendly interface.</li> </ul> <p>We are also working on adding support for other frameworks, such as CrewAI, to broaden the scope and capabilities of FastAgency. Stay tuned for updates on these integrations.</p>","boost":10},{"location":"user-guide/basics/#quick-start","title":"Quick start","text":"","boost":10},{"location":"user-guide/basics/#install","title":"Install","text":"<p>To get started, you need to install FastAgency. You can do this using <code>pip</code>, Python's package installer. Choose the installation command based on the interface you want to use:</p> ConsoleMesop <pre><code>pip install \"fastagency[autogen]\"\n</code></pre> <p>This command installs FastAgency with support for the Console interface and AutoGen framework.</p> <pre><code>pip install \"fastagency[autogen,mesop]\"\n</code></pre> <p>This command installs FastAgency with support for both the Console and Mesop interfaces, providing a more comprehensive setup.</p> <p>Using older AutoGen version 0.2.x</p> <p>In case you want to use an older version of AutoGen (<code>pyautogen</code> instead of <code>autogen</code> package ), please use the following pip command:</p> ConsoleMesop <pre><code>pip install \"fastagency[pyautogen]\"\n</code></pre> <p>This command installs FastAgency with support for the Console interface and AutoGen framework.</p> <pre><code>pip install \"fastagency[pyautogen,mesop]\"\n</code></pre>","boost":10},{"location":"user-guide/basics/#imports","title":"Imports","text":"<p>Depending on the interface you choose, you'll need to import different modules. These imports set up the necessary components for your application:</p> ConsoleMesop <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.ui.console import ConsoleUI\n</code></pre> <p>For Console applications, import <code>ConsoleUI</code> to handle command-line input and output.</p> <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI\nfrom fastagency.runtimes.autogen.base import AutoGenWorkflows\nfrom fastagency.ui.mesop import MesopUI\n\nfrom fastagency import FastAgency\n</code></pre> <p>For Mesop applications, import <code>MesopUI</code> to integrate with the Mesop web interface.</p>","boost":10},{"location":"user-guide/basics/#define-workflow","title":"Define Workflow","text":"<p>You need to define the workflow that your application will use. This is where you specify how the agents interact and what they do. Here's a simple example of a workflow definition:</p> <pre><code>    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_learning\", description=\"Student and teacher learning chat\")\ndef simple_workflow(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student willing to learn.\",\n        llm_config=llm_config,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a math teacher.\",\n        llm_config=llm_config,\n    )\n\n    chat_result = student_agent.initiate_chat(\n        teacher_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre> <p>This code snippet sets up a simple learning chat between a student and a teacher. You define the agents and how they should interact, specifying how the conversation should be summarized.</p>","boost":10},{"location":"user-guide/basics/#define-fastagency-application","title":"Define FastAgency Application","text":"<p>Next, define your FastAgency application. This ties together your workflow and the interface you chose:</p> ConsoleMesop <pre><code>from fastagency.ui.console import ConsoleUI\n\napp = FastAgency(wf=wf, ui=ConsoleUI(), title=\"Learning Chat\")\n</code></pre> <p>For Console applications, use <code>ConsoleUI</code> to handle user interaction via the command line.</p> <pre><code>from fastagency.ui.mesop import MesopUI\n\napp = FastAgency(wf=wf, io=MesopUI())\n</code></pre> <p>For Mesop applications, use <code>MesopUI</code> to enable web-based interactions.</p>","boost":10},{"location":"user-guide/basics/#run-application","title":"Run Application","text":"<p>Once everything is set up, you can run your FastAgency application using the following command:</p> <pre><code>fastagency run\n</code></pre>","boost":10},{"location":"user-guide/basics/#output","title":"Output","text":"<p>The output will vary based on the interface:</p> ConsoleMesop <pre><code>\u256d\u2500 Python module file \u2500\u256e\n\u2502                      \u2502\n\u2502  \ud83d\udc0d main.py          \u2502\n\u2502                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n\u256d\u2500 Importable FastAgency app \u2500\u256e\n\u2502                             \u2502\n\u2502  from main import app       \u2502\n\u2502                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500 FastAgency -&gt; user [text_input] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 Starting a new workflow 'simple_learning' with the following                 \u2502\n\u2502 description:                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 Student and teacher learning chat                                            \u2502\n\u2502                                                                              \u2502\n\u2502 Please enter an                                                              \u2502\n\u2502 initial message:                                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>For Console applications, you will see a command-line prompt where you can enter the initial message and interact with your workflow.</p> <pre><code>\u256d\u2500 Python module file \u2500\u256e\n\u2502                      \u2502\n\u2502  \ud83d\udc0d main_mesop.py    \u2502\n\u2502                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n\u256d\u2500 Importable FastAgency app \u2500\u2500\u256e\n\u2502                              \u2502\n\u2502  from main_mesop import app  \u2502\n\u2502                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nRunning with hot reload:\n\nRunning server on: http://localhost:32123\n* Serving Flask app 'mesop.server.server'\n* Debug mode: off\n</code></pre> <p>For Mesop applications, the output will include a URL where you can access your web-based application.</p>","boost":10},{"location":"user-guide/api/","title":"API Integration","text":"<p>FastAgency makes it easy to integrate external APIs into your multi-agent workflows, allowing agents to access and interact with real-time data. By leveraging FastAgency's API support, developers can automatically create functions properly annotated for use with large language models (LLMs). This functionality allows agents to fetch and process external information seamlessly.</p> <p>Currently, FastAgency supports importing API functionality from OpenAPI specifications, enabling developers to connect their agents with RESTful APIs effortlessly. In addition, we support various types of security for accessing APIs, ensuring your integrations are both functional and secure.</p>"},{"location":"user-guide/api/#api-features-in-fastagency","title":"API Features in FastAgency","text":""},{"location":"user-guide/api/#1-openapi-import","title":"1. OpenAPI Import","text":"<p>FastAgency can automatically generate API functions from OpenAPI specifications, streamlining the process of connecting agents to external services. With just a few lines of code, you can import an API specification, and FastAgency will handle the function generation and LLM integration, making it simple for agents to call external APIs.</p> <p>Learn more about OpenAPI Import \u2192</p>"},{"location":"user-guide/api/#2-api-security","title":"2. API Security","text":"<p>FastAgency supports different types of security for REST APIs, including OAuth, API keys, and more. This ensures that your API integrations are secure and can handle sensitive data. Our API security mechanisms are flexible, allowing you to configure and manage secure communication between your agents and external APIs.</p> <p>Learn more about API Security \u2192</p> <p>FastAgency\u2019s API integration capabilities allow your multi-agent systems to interact with the real world in meaningful ways. Whether you\u2019re pulling data from an external service or managing secure connections, FastAgency provides the tools you need to build powerful, connected applications.</p> <p>For more updates and discussions, join our Discord channel.</p>"},{"location":"user-guide/api/security/","title":"Security","text":"<p>In the previous chapter, we learned how to integrate external REST APIs into <code>AutoGen</code> agents using <code>FastAgency</code>, and we used a weather API route which had no security. However, not all external REST APIs are open to the public; some are behind a paywall and require security parameters for access. This section of the documentation explains how to create an agent that accesses an external REST API with security.</p> <p>For this tutorial, the weather API provides an hourly forecast route that is secured.</p> <p>Note</p> <p>The weather API offers two routes: one for the daily weather forecast, which has no security, and another for the hourly forecast, which is secured. To learn how to access external APIs that are not secured, please refer to the previous chapter.</p>"},{"location":"user-guide/api/security/#install","title":"Install","text":"<p>The installation process is exactly the same as in the previous chapter.</p> <pre><code>pip install \"fastagency[autogen,openapi]\"\n</code></pre>"},{"location":"user-guide/api/security/#imports","title":"Imports","text":"<p>The imports are the same as in the previous chapter, except here we also import <code>APIKeyHeader</code> to set the security value in the header:</p> <pre><code>import os\n\nfrom autogen import UserProxyAgent\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.api.openapi.client import OpenAPI\nfrom fastagency.api.openapi.security import APIKeyHeader\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\nfrom fastagency.ui.console import ConsoleUI\n</code></pre>"},{"location":"user-guide/api/security/#define-workflow","title":"Define Workflow","text":"<p>In this workflow, we create a Python client for the external REST API by passing the URL of the <code>openapi.json</code> to the <code>Client.create</code> method. Then, we register the generated client with the agent using the methods <code>register_for_llm</code> and <code>register_for_execution</code>.</p> <p>Additionally, we set the API key for the API using the <code>set_security_params</code> method:</p> <pre><code># Set global security params for all methods\nweather_api.set_security_params(APIKeyHeader.Parameters(value=\"secure weather key\"))\n</code></pre> <p>Here's a simple example of a workflow definition:</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nWEATHER_OPENAPI_URL = \"https://weather.tools.fastagency.ai/openapi.json\"\nweather_api = OpenAPI.create(openapi_url=WEATHER_OPENAPI_URL)\n\n# Set global security params for all methods\nweather_api.set_security_params(APIKeyHeader.Parameters(value=\"secure weather key\"))\n\n# Set security params for a specific method\n# weather_api.set_security_params(\n#     APIKeyHeader.Parameters(value=\"secure weather key\"),\n#     \"get_daily_weather_daily_get\",\n# )\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(\n    name=\"simple_weather_with_security\", description=\"Weather chat with security\"\n)\ndef weather_workflow_with_security(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    weather_agent = ConversableAgent(\n        name=\"Weather_Agent\",\n        system_message=\"You are a weather agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n\n    wf.register_api(\n        api=weather_api,\n        callers=user_agent,\n        executors=weather_agent,\n    )\n\n    chat_result = user_agent.initiate_chat(\n        weather_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre> <p>This code snippet sets up a simple weather agent that calls an external weather API with security, using the registered functions generated from the <code>openapi.json</code> URL.</p>"},{"location":"user-guide/api/security/#define-fastagency-application","title":"Define FastAgency Application","text":"<p>Next, define your FastAgency application.</p> <pre><code>app = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre>"},{"location":"user-guide/api/security/#complete-application-code","title":"Complete Application Code","text":"main.py <pre><code>import os\n\nfrom autogen import UserProxyAgent\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.api.openapi.client import OpenAPI\nfrom fastagency.api.openapi.security import APIKeyHeader\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\nfrom fastagency.ui.console import ConsoleUI\n\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nWEATHER_OPENAPI_URL = \"https://weather.tools.fastagency.ai/openapi.json\"\nweather_api = OpenAPI.create(openapi_url=WEATHER_OPENAPI_URL)\n\n# Set global security params for all methods\nweather_api.set_security_params(APIKeyHeader.Parameters(value=\"secure weather key\"))\n\n# Set security params for a specific method\n# weather_api.set_security_params(\n#     APIKeyHeader.Parameters(value=\"secure weather key\"),\n#     \"get_daily_weather_daily_get\",\n# )\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(\n    name=\"simple_weather_with_security\", description=\"Weather chat with security\"\n)\ndef weather_workflow_with_security(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    weather_agent = ConversableAgent(\n        name=\"Weather_Agent\",\n        system_message=\"You are a weather agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n\n    wf.register_api(\n        api=weather_api,\n        callers=user_agent,\n        executors=weather_agent,\n    )\n\n    chat_result = user_agent.initiate_chat(\n        weather_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n\n\napp = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre>"},{"location":"user-guide/api/security/#run-application","title":"Run Application","text":"<p>You can run this chapter's FastAgency application using the following command::</p> <pre><code>fastagency run\n</code></pre>"},{"location":"user-guide/api/security/#output","title":"Output","text":"<p>The output will vary based on the city and current weather conditions:</p> <pre><code> \u256d\u2500\u2500\u2500 Python package file structure \u2500\u2500\u2500\u256e\n \u2502                                     \u2502\n \u2502  \ud83d\udcc1 docs                            \u2502\n \u2502  \u251c\u2500\u2500 \ud83d\udc0d __init__.py                 \u2502\n \u2502  \u2514\u2500\u2500 \ud83d\udcc1 docs_src                    \u2502\n \u2502      \u251c\u2500\u2500 \ud83d\udc0d __init__.py             \u2502\n \u2502      \u2514\u2500\u2500 \ud83d\udcc1 tutorial                \u2502\n \u2502          \u251c\u2500\u2500 \ud83d\udc0d __init__.py         \u2502\n \u2502          \u2514\u2500\u2500 \ud83d\udcc1 external_rest_apis  \u2502\n \u2502              \u251c\u2500\u2500 \ud83d\udc0d __init__.py     \u2502\n \u2502              \u2514\u2500\u2500 \ud83d\udc0d security.py     \u2502\n \u2502                                     \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Importable FastAgency app \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502                                                                      \u2502\n \u2502  from docs.docs_src.tutorial.external_rest_apis.security import app  \u2502\n \u2502                                                                      \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500 FastAgency -&gt; user [text_input] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 Starting a new workflow 'simple_weather_with_security' with the              \u2502\n\u2502 following description:                                                       \u2502\n\u2502                                                                              \u2502\n\u2502 Weather chat with security                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 Please enter an                                                              \u2502\n\u2502 initial message:                                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nGet me hourly weather forecast for Chennai city\n    \u256d\u2500 User_Agent -&gt; Weather_Agent [text_message] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 Get me hourly weather forecast for Chennai city                              \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n    \u256d\u2500 Weather_Agent -&gt; User_Agent [suggested_function_call] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 {                                                                            \u2502\n    \u2502   \"function_name\": \"get_hourly_weather_hourly_get\",                          \u2502\n    \u2502   \"call_id\":                                                                 \u2502\n    \u2502 \"call_pAMWHJ1wIlsciSSOMIb4uhst\",                                             \u2502\n    \u2502   \"arguments\": {                                                             \u2502\n    \u2502     \"city\":                                                                  \u2502\n    \u2502 \"Chennai\"                                                                    \u2502\n    \u2502   }                                                                          \u2502\n    \u2502 }                                                                            \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n    \u256d\u2500 User_Agent -&gt; Weather_Agent [function_call_execution] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 {                                                                            \u2502\n    \u2502   \"function_name\": \"get_hourly_weather_hourly_get\",                          \u2502\n    \u2502   \"call_id\":                                                                 \u2502\n    \u2502 \"call_pAMWHJ1wIlsciSSOMIb4uhst\",                                             \u2502\n    \u2502   \"retval\": \"{\\\"city\\\": \\\"Chennai\\\",                                         \u2502\n    \u2502 \\\"temperature\\\": 35, \\\"daily_forecasts\\\": [{\\\"forecast_date\\\":               \u2502\n    \u2502 \\\"2024-09-10\\\", \\\"temperature\\\": 31, \\\"hourly_forecasts\\\":                   \u2502\n    \u2502 [{\\\"forecast_time\\\": \\\"00:00:00\\\", \\\"temperature\\\": 30,                      \u2502\n    \u2502 \\\"description\\\": \\\"Patchy rain nearby\\\"}, {\\\"forecast_time\\\":                \u2502\n    \u2502 \\\"03:00:00\\\", \\\"temperature\\\": 29, \\\"description\\\": \\\"Clear\\\"},              \u2502\n    \u2502 {\\\"forecast_time\\\": \\\"06:00:00\\\", \\\"temperature\\\": 28,                       \u2502\n    \u2502 \\\"description\\\": \\\"Sunny\\\"}, {\\\"forecast_time\\\": \\\"09:00:00\\\",               \u2502\n    \u2502 \\\"temperature\\\": 31, \\\"description\\\": \\\"Sunny\\\"}, {\\\"forecast_time\\\":        \u2502\n    \u2502 \\\"12:00:00\\\", \\\"temperature\\\": 35, \\\"description\\\": \\\"Partly                 \u2502\n    \u2502 cloudy\\\"}, {\\\"forecast_time\\\": \\\"15:00:00\\\", \\\"temperature\\\": 32,            \u2502\n    \u2502 \\\"description\\\": \\\"Patchy light drizzle\\\"}, {\\\"forecast_time\\\":              \u2502\n    \u2502 \\\"18:00:00\\\", \\\"temperature\\\": 30, \\\"description\\\": \\\"Patchy light           \u2502\n    \u2502 drizzle\\\"}, {\\\"forecast_time\\\": \\\"21:00:00\\\", \\\"temperature\\\": 30,           \u2502\n    \u2502 \\\"description\\\": \\\"Patchy rain nearby\\\"}]}, {\\\"forecast_date\\\":              \u2502\n    \u2502 \\\"2024-09-11\\\", \\\"temperature\\\": 30, \\\"hourly_forecasts\\\":                   \u2502\n    \u2502 [{\\\"forecast_time\\\": \\\"00:00:00\\\", \\\"temperature\\\": 29,                      \u2502\n    \u2502 \\\"description\\\": \\\"Patchy rain nearby\\\"}, {\\\"forecast_time\\\":                \u2502\n    \u2502 \\\"03:00:00\\\", \\\"temperature\\\": 29, \\\"description\\\": \\\"Clear\\\"},              \u2502\n    \u2502 {\\\"forecast_time\\\": \\\"06:00:00\\\", \\\"temperature\\\": 28,                       \u2502\n    \u2502 \\\"description\\\": \\\"Sunny\\\"}, {\\\"forecast_time\\\": \\\"09:00:00\\\",               \u2502\n    \u2502 \\\"temperature\\\": 31, \\\"description\\\": \\\"Sunny\\\"}, {\\\"forecast_time\\\":        \u2502\n    \u2502 \\\"12:00:00\\\", \\\"temperature\\\": 34, \\\"description\\\": \\\"Partly                 \u2502\n    \u2502 Cloudy\\\"}, {\\\"forecast_time\\\": \\\"15:00:00\\\", \\\"temperature\\\": 31,            \u2502\n    \u2502 \\\"description\\\": \\\"Cloudy\\\"}, {\\\"forecast_time\\\": \\\"18:00:00\\\",              \u2502\n    \u2502 \\\"temperature\\\": 29, \\\"description\\\": \\\"Partly Cloudy\\\"},                    \u2502\n    \u2502 {\\\"forecast_time\\\": \\\"21:00:00\\\", \\\"temperature\\\": 29,                       \u2502\n    \u2502 \\\"description\\\": \\\"Cloudy\\\"}]}, {\\\"forecast_date\\\": \\\"2024-09-12\\\",          \u2502\n    \u2502 \\\"temperature\\\": 30, \\\"hourly_forecasts\\\": [{\\\"forecast_time\\\":              \u2502\n    \u2502 \\\"00:00:00\\\", \\\"temperature\\\": 29, \\\"description\\\": \\\"Patchy rain            \u2502\n    \u2502 nearby\\\"}, {\\\"forecast_time\\\": \\\"03:00:00\\\", \\\"temperature\\\": 29,            \u2502\n    \u2502 \\\"description\\\": \\\"Clear\\\"}, {\\\"forecast_time\\\": \\\"06:00:00\\\",               \u2502\n    \u2502 \\\"temperature\\\": 28, \\\"description\\\": \\\"Sunny\\\"}, {\\\"forecast_time\\\":        \u2502\n    \u2502 \\\"09:00:00\\\", \\\"temperature\\\": 31, \\\"description\\\": \\\"Sunny\\\"},              \u2502\n    \u2502 {\\\"forecast_time\\\": \\\"12:00:00\\\", \\\"temperature\\\": 34,                       \u2502\n    \u2502 \\\"description\\\": \\\"Partly Cloudy\\\"}, {\\\"forecast_time\\\": \\\"15:00:00\\\",       \u2502\n    \u2502  \\\"temperature\\\": 31, \\\"description\\\": \\\"Partly Cloudy\\\"},                   \u2502\n    \u2502 {\\\"forecast_time\\\": \\\"18:00:00\\\", \\\"temperature\\\": 29,                       \u2502\n    \u2502 \\\"description\\\": \\\"Overcast\\\"}, {\\\"forecast_time\\\": \\\"21:00:00\\\",            \u2502\n    \u2502 \\\"temperature\\\": 29, \\\"description\\\": \\\"Partly Cloudy\\\"}]}]}\\n\"              \u2502\n    \u2502 }                                                                            \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n    \u256d\u2500 Weather_Agent -&gt; User_Agent [text_message] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 Here is the hourly weather forecast for Chennai:                             \u2502\n    \u2502                                                                              \u2502\n    \u2502 ### September 10,                                                            \u2502\n    \u2502 2024                                                                         \u2502\n    \u2502 - **00:00** - Temperature: 30\u00b0C, Description: Patchy rain nearby             \u2502\n    \u2502                                                                              \u2502\n    \u2502 - **03:00** - Temperature: 29\u00b0C, Description: Clear                          \u2502\n    \u2502 - **06:00** -                                                                \u2502\n    \u2502 Temperature: 28\u00b0C, Description: Sunny                                        \u2502\n    \u2502 - **09:00** - Temperature: 31\u00b0C,                                             \u2502\n    \u2502  Description: Sunny                                                          \u2502\n    \u2502 - **12:00** - Temperature: 35\u00b0C, Description:                                \u2502\n    \u2502 Partly cloudy                                                                \u2502\n    \u2502 - **15:00** - Temperature: 32\u00b0C, Description: Patchy                         \u2502\n    \u2502 light drizzle                                                                \u2502\n    \u2502 - **18:00** - Temperature: 30\u00b0C, Description: Patchy                         \u2502\n    \u2502 light drizzle                                                                \u2502\n    \u2502 - **21:00** - Temperature: 30\u00b0C, Description: Patchy                         \u2502\n    \u2502 rain nearby                                                                  \u2502\n    \u2502                                                                              \u2502\n    \u2502 ### September 11, 2024                                                       \u2502\n    \u2502 - **00:00** - Temperature: 29\u00b0C,                                             \u2502\n    \u2502 Description: Patchy rain nearby                                              \u2502\n    \u2502 - **03:00** - Temperature: 29\u00b0C,                                             \u2502\n    \u2502 Description: Clear                                                           \u2502\n    \u2502 - **06:00** - Temperature: 28\u00b0C, Description: Sunny                          \u2502\n    \u2502                                                                              \u2502\n    \u2502 - **09:00** - Temperature: 31\u00b0C, Description: Sunny                          \u2502\n    \u2502 - **12:00** -                                                                \u2502\n    \u2502 Temperature: 34\u00b0C, Description: Partly Cloudy                                \u2502\n    \u2502 - **15:00** -                                                                \u2502\n    \u2502 Temperature: 31\u00b0C, Description: Cloudy                                       \u2502\n    \u2502 - **18:00** - Temperature:                                                   \u2502\n    \u2502 29\u00b0C, Description: Partly Cloudy                                             \u2502\n    \u2502 - **21:00** - Temperature: 29\u00b0C,                                             \u2502\n    \u2502 Description: Cloudy                                                          \u2502\n    \u2502                                                                              \u2502\n    \u2502 ### September 12, 2024                                                       \u2502\n    \u2502 - **00:00** - Temperature:                                                   \u2502\n    \u2502  29\u00b0C, Description: Patchy rain nearby                                       \u2502\n    \u2502 - **03:00** - Temperature:                                                   \u2502\n    \u2502 29\u00b0C, Description: Clear                                                     \u2502\n    \u2502 - **06:00** - Temperature: 28\u00b0C, Description:                                \u2502\n    \u2502  Sunny                                                                       \u2502\n    \u2502 - **09:00** - Temperature: 31\u00b0C, Description: Sunny                          \u2502\n    \u2502 - **12:00**                                                                  \u2502\n    \u2502  - Temperature: 34\u00b0C, Description: Partly Cloudy                             \u2502\n    \u2502 - **15:00** -                                                                \u2502\n    \u2502 Temperature: 31\u00b0C, Description: Partly Cloudy                                \u2502\n    \u2502 - **18:00** -                                                                \u2502\n    \u2502 Temperature: 29\u00b0C, Description: Overcast                                     \u2502\n    \u2502 - **21:00** - Temperature:                                                   \u2502\n    \u2502 29\u00b0C, Description: Partly Cloudy                                             \u2502\n    \u2502                                                                              \u2502\n    \u2502 Feel free to ask if you need more                                            \u2502\n    \u2502 information!                                                                 \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"user-guide/api/openapi/","title":"OpenAPI","text":"<p>FastAgency can automatically create functions properly annotated for use with LLM-s from OpenAPI specification.</p> <p>This example demonstrates how to integrate external REST API calls into <code>AutoGen</code> agents using <code>FastAgency</code>. We'll create a weather agent that interacts with a weather REST API and a user agent to facilitate the conversation. This example will help you understand how to set up agents and facilitate agent communication through an external REST API. To interact with the REST API, the AutoGen agent needs to understand the available routes, so it requires the OpenAPI specification (<code>openapi.json</code> file) for the external REST API.</p> <p>In this example, we'll use a simple weather API and its specification available at https://weather.tools.fastagency.ai/openapi.json.</p> <p>Note</p> <p>The weather API has two routes: one for the daily weather forecast, which has no security, and another for the hourly forecast, which is secured. We will learn how to access external APIs that are secured in the next chapter.</p>"},{"location":"user-guide/api/openapi/#install","title":"Install","text":"<p>To get started, you need to install FastAgency with OpenAPI submodule. You can do this using <code>pip</code>, Python's package installer.</p> <pre><code>pip install \"fastagency[autogen,openapi]\"\n</code></pre>"},{"location":"user-guide/api/openapi/#imports","title":"Imports","text":"<p>These imports are similar to the imports section we have already covered, with the only difference being the additional imports of the <code>OpenAPI</code> Client and <code>UserProxyAgent</code>:</p> <pre><code>import os\n\nfrom autogen import UserProxyAgent\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.api.openapi import OpenAPI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\nfrom fastagency.ui.console import ConsoleUI\n</code></pre>"},{"location":"user-guide/api/openapi/#define-workflow","title":"Define Workflow","text":"<p>In this workflow, the only difference is that we create a Python client for the external REST API by passing the URL of the <code>openapi.json</code> to the <code>Client.create</code> method. Then, we register the generated client with the agent using the methods <code>register_for_llm</code> and <code>register_for_execution</code>. Here's a simple example of a workflow definition:</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nWEATHER_OPENAPI_URL = \"https://weather.tools.fastagency.ai/openapi.json\"\nweather_api = OpenAPI.create(openapi_url=WEATHER_OPENAPI_URL)\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_weather\", description=\"Weather chat\")\ndef weather_workflow(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    weather_agent = ConversableAgent(\n        name=\"Weather_Agent\",\n        system_message=\"You are a weather agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n\n    wf.register_api(\n        api=weather_api,\n        callers=user_agent,\n        executors=weather_agent,\n    )\n\n    chat_result = user_agent.initiate_chat(\n        weather_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre> <p>This code snippet sets up a simple weather agent that calls an external weather API using the registered functions generated from the <code>openapi.json</code> URL.</p>"},{"location":"user-guide/api/openapi/#define-fastagency-application","title":"Define FastAgency Application","text":"<p>Next, define your FastAgency application.</p> <pre><code>app = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre>"},{"location":"user-guide/api/openapi/#complete-application-code","title":"Complete Application Code","text":"main.py <pre><code>import os\n\nfrom autogen import UserProxyAgent\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.api.openapi import OpenAPI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\nfrom fastagency.ui.console import ConsoleUI\n\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nWEATHER_OPENAPI_URL = \"https://weather.tools.fastagency.ai/openapi.json\"\nweather_api = OpenAPI.create(openapi_url=WEATHER_OPENAPI_URL)\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_weather\", description=\"Weather chat\")\ndef weather_workflow(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    weather_agent = ConversableAgent(\n        name=\"Weather_Agent\",\n        system_message=\"You are a weather agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n\n    wf.register_api(\n        api=weather_api,\n        callers=user_agent,\n        executors=weather_agent,\n    )\n\n    chat_result = user_agent.initiate_chat(\n        weather_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n\n\napp = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre>"},{"location":"user-guide/api/openapi/#run-application","title":"Run Application","text":"<p>You can run this chapter's FastAgency application using the following command:</p> <pre><code>fastagency run\n</code></pre>"},{"location":"user-guide/api/openapi/#output","title":"Output","text":"<p>The output will vary based on the city and the current weather conditions:</p> <pre><code> \u256d\u2500\u2500\u2500 Python package file structure \u2500\u2500\u2500\u256e\n \u2502                                     \u2502\n \u2502  \ud83d\udcc1 docs                            \u2502\n \u2502  \u251c\u2500\u2500 \ud83d\udc0d __init__.py                 \u2502\n \u2502  \u2514\u2500\u2500 \ud83d\udcc1 docs_src                    \u2502\n \u2502      \u251c\u2500\u2500 \ud83d\udc0d __init__.py             \u2502\n \u2502      \u2514\u2500\u2500 \ud83d\udcc1 tutorial                \u2502\n \u2502          \u251c\u2500\u2500 \ud83d\udc0d __init__.py         \u2502\n \u2502          \u2514\u2500\u2500 \ud83d\udcc1 external_rest_apis  \u2502\n \u2502              \u251c\u2500\u2500 \ud83d\udc0d __init__.py     \u2502\n \u2502              \u2514\u2500\u2500 \ud83d\udc0d main.py         \u2502\n \u2502                                     \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Importable FastAgency app \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502                                                                  \u2502\n \u2502  from docs.docs_src.tutorial.external_rest_apis.main import app  \u2502\n \u2502                                                                  \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500 FastAgency -&gt; user [text_input] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 Starting a new workflow 'simple_weather' with the following                  \u2502\n\u2502 description:                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 Weather chat                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 Please enter an initial message:                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nGet me daily weather forecast for Chennai city\n\n    \u256d\u2500 User_Agent -&gt; Weather_Agent [text_message] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 Get me daily weather forecast for Chennai city                               \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n    \u256d\u2500 Weather_Agent -&gt; User_Agent [suggested_function_call] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 {                                                                            \u2502\n    \u2502   \"function_name\": \"get_daily_weather_daily_get\",                            \u2502\n    \u2502   \"call_id\":                                                                 \u2502\n    \u2502 \"call_VZ19VFNcTE9n8BnXa9aiMzFA\",                                             \u2502\n    \u2502   \"arguments\": {                                                             \u2502\n    \u2502     \"city\":                                                                  \u2502\n    \u2502 \"Chennai\"                                                                    \u2502\n    \u2502   }                                                                          \u2502\n    \u2502 }                                                                            \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n    \u256d\u2500 User_Agent -&gt; Weather_Agent [function_call_execution] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 {                                                                            \u2502\n    \u2502   \"function_name\": \"get_daily_weather_daily_get\",                            \u2502\n    \u2502   \"call_id\":                                                                 \u2502\n    \u2502 \"call_VZ19VFNcTE9n8BnXa9aiMzFA\",                                             \u2502\n    \u2502   \"retval\": \"{\\\"city\\\": \\\"Chennai\\\",                                         \u2502\n    \u2502 \\\"temperature\\\": 31, \\\"daily_forecasts\\\": [{\\\"forecast_date\\\":               \u2502\n    \u2502 \\\"2024-09-10\\\", \\\"temperature\\\": 31, \\\"hourly_forecasts\\\": null},            \u2502\n    \u2502 {\\\"forecast_date\\\": \\\"2024-09-11\\\", \\\"temperature\\\": 30,                     \u2502\n    \u2502 \\\"hourly_forecasts\\\": null}, {\\\"forecast_date\\\": \\\"2024-09-12\\\",             \u2502\n    \u2502 \\\"temperature\\\": 30, \\\"hourly_forecasts\\\": null}]}\\n\"                        \u2502\n    \u2502 }                                                                            \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n    \u256d\u2500 Weather_Agent -&gt; User_Agent [text_message] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 The daily weather forecast for Chennai is as follows:                        \u2502\n    \u2502                                                                              \u2502\n    \u2502 - **September                                                                \u2502\n    \u2502 10, 2024**: Temperature - 31\u00b0C                                               \u2502\n    \u2502 - **September 11, 2024**: Temperature -                                      \u2502\n    \u2502  30\u00b0C                                                                        \u2502\n    \u2502 - **September 12, 2024**: Temperature - 30\u00b0C                                 \u2502\n    \u2502                                                                              \u2502\n    \u2502 If you need more                                                             \u2502\n    \u2502 details or forecasts for more days, feel free to ask!                        \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"user-guide/cli/","title":"CLI","text":""},{"location":"user-guide/cli/#example-usage","title":"Example Usage","text":""},{"location":"user-guide/cli/#running-a-fastagency-app-in-development-mode","title":"Running a FastAgency App in Development Mode","text":"<pre><code>fastagency dev path/to/app.py\n</code></pre> <p>Explanation: This command runs the FastAgency app in development mode. It automatically detects the FastAgency app within the specified Python file and runs it with live reload enabled. This is useful for making changes to your code and seeing updates in real-time without needing to restart the server manually. If no file path is provided, FastAgency will try to locate common file names such as <code>main.py</code>, <code>app.py</code>, or <code>api.py</code>.</p>"},{"location":"user-guide/cli/#running-a-fastagency-app-with-a-specific-workflow","title":"Running a FastAgency App with a Specific Workflow","text":"<pre><code>fastagency run path/to/app.py --workflow simple_workflow\n</code></pre> <p>Explanation: This command runs the FastAgency app in production mode and specifies a particular workflow (<code>simple_workflow</code>) to execute. This is helpful when you have multiple workflows in your app, and you want to run a specific one. The app can automatically detect the workflow unless you explicitly name it with the <code>--workflow</code> option.</p>"},{"location":"user-guide/cli/#setting-an-initial-message","title":"Setting an Initial Message","text":"<pre><code>fastagency run path/to/app.py --initial_message \"Hello, let's start!\"\n</code></pre> <p>Explanation: This command allows you to run the app and provide a custom initial message to send to the workflow when it starts. The <code>--initial_message</code> option is useful when you want to test how your agents respond to different starting inputs, simulating various conversation scenarios. If no message is provided, a default message will be sent.</p> <p>For more information, visit the CLI documentation.</p>"},{"location":"user-guide/runtime/","title":"Runtimes in FastAgency","text":"<p>FastAgency is a flexible, open-source framework designed to accelerate the transition from prototype to production for multi-agent AI workflows. If you're a developer working with agentic frameworks like AutoGen, FastAgency provides the tools to rapidly scale your projects into fully operational applications. A key feature of FastAgency is its support for multiple runtimes, allowing developers to switch between or combine various frameworks based on project needs. With multi-framework compatibility, FastAgency ensures that your workflows are not only optimized for today\u2019s needs but also future-proofed as new frameworks emerge.</p>"},{"location":"user-guide/runtime/#autogen","title":"AutoGen","text":"<p>The AutoGen runtime is central to FastAgency\u2019s architecture and provides a powerful foundation for multi-agent workflows. AutoGen allows developers to define workflows in Python, leveraging large language models (LLMs) such as GPT to handle communication and collaboration between agents. It enables rapid prototyping and deployment of workflows that involve tasks like decision-making, customer service, or research.</p> <p>FastAgency seamlessly integrates with AutoGen, helping you transition from development in Jupyter notebooks to fully deployed applications. Whether you're managing conversational agents or orchestrating task automation, the AutoGen runtime in FastAgency helps you streamline the path from prototype to production.</p> <p>For more information on using AutoGen within FastAgency, visit the AutoGen section.</p>"},{"location":"user-guide/runtime/#crewai-coming-soon","title":"CrewAI (coming soon)","text":"<p>The CrewAI runtime is an upcoming integration designed to further expand FastAgency\u2019s capabilities. CrewAI offers a highly modular approach, providing greater flexibility for building more complex and dynamic workflows where agents need to collaborate autonomously. Its role-based design, combined with autonomous task delegation, makes CrewAI particularly suitable for projects involving a large number of specialized agents working in tandem.</p> <p>As the AI ecosystem continues to evolve, FastAgency\u2019s support for CrewAI ensures that your workflows remain adaptable and ready for future innovations. This planned integration allows you to harness the advanced features of CrewAI, offering more options for scaling your multi-agent applications.</p> <p>For future updates and documentation on CrewAI, please visit the CrewAI section.</p> <p>With support for multiple runtimes, FastAgency enables developers to easily switch between frameworks like AutoGen and CrewAI, providing unmatched flexibility when building and deploying AI workflows. Whether you are utilizing the established features of AutoGen or preparing to explore CrewAI\u2019s advanced capabilities, FastAgency ensures that your AI solutions are future-ready and capable of evolving alongside new technologies.</p>"},{"location":"user-guide/runtime/autogen/","title":"AutoGen in FastAgency","text":"<p>The AutoGen runtime is a key component of FastAgency, empowering developers to create intelligent, multi-agent systems powered by large language models (LLMs). AutoGen allows agents to communicate, collaborate, and perform complex tasks autonomously while easily integrating with external APIs for real-time data and functionality.</p> <p>In this example, we will create a simple weather chatbot using AutoGen in FastAgency. The chatbot will enable a user to interact with a weather agent that fetches real-time weather information from an external API using OpenAPI specifications.</p>"},{"location":"user-guide/runtime/autogen/#installation","title":"Installation","text":"<p>Before getting started, make sure you have installed FastAgency with support for the AutoGen runtime by running the following command:</p> <pre><code>pip install \"fastagency[autogen,openapi]\"\n</code></pre> <p>This installation includes the AutoGen runtime, allowing you to build multi-agent workflows and integrate external APIs seamlessly.</p>"},{"location":"user-guide/runtime/autogen/#example-integrating-a-weather-api-with-autogen","title":"Example: Integrating a Weather API with AutoGen","text":""},{"location":"user-guide/runtime/autogen/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":""},{"location":"user-guide/runtime/autogen/#1-import-required-modules","title":"1. Import Required Modules","text":"<p>The example starts by importing the necessary modules from AutoGen and FastAgency. These imports lay the foundation for building and running multi-agent workflows.</p> <pre><code>import os\n\nfrom autogen import UserProxyAgent\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency\nfrom fastagency.api.openapi import OpenAPI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\nfrom fastagency.ui.console import ConsoleUI\n</code></pre>"},{"location":"user-guide/runtime/autogen/#2-configure-the-language-model-llm","title":"2. Configure the Language Model (LLM)","text":"<p>Here, the large language model is configured to use the <code>gpt-4o</code> model, and the API key is retrieved from the environment. This setup ensures that both the user and weather agents can interact effectively.</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n</code></pre>"},{"location":"user-guide/runtime/autogen/#3-set-up-the-weather-api","title":"3. Set Up the Weather API","text":"<p>We define the OpenAPI specification URL for the weather service. This API will later be used by the weather agent to fetch real-time weather data.</p> <pre><code>openapi_url = \"https://weather.tools.fastagency.ai/openapi.json\"\n\nweather_api = OpenAPI.create(openapi_url=openapi_url)\n</code></pre>"},{"location":"user-guide/runtime/autogen/#4-define-the-workflow-and-agents","title":"4. Define the Workflow and Agents","text":"<p>In this step, we create two agents:</p> <ul> <li> <p>UserProxyAgent: This agent simulates the user interacting with the system.</p> </li> <li> <p>ConversableAgent: This agent acts as the weather agent, responsible for fetching weather data from the API.</p> </li> </ul> <p>The workflow is registered using AutoGenWorkflows.</p> <pre><code>@wf.register(name=\"simple_weather\", description=\"Weather chat\")  # type: ignore[type-var]\ndef weather_workflow(\n    wf: AutoGenWorkflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    weather_agent = ConversableAgent(\n        name=\"Weather_Agent\",\n        system_message=\"You are a weather agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n</code></pre>"},{"location":"user-guide/runtime/autogen/#5-register-api-functions-with-the-agents","title":"5. Register API Functions with the Agents","text":"<p>In this step, we register the weather API functions to ensure that the weather agent can call the correct functions, such as <code>get_daily_weather</code> and <code>get_daily_weather_weekly_get</code>, to retrieve the required weather data.</p> <pre><code>    wf.register_api(  # type: ignore[attr-defined]\n        api=weather_api,\n        callers=[user_agent],\n        executors=[weather_agent],\n        functions=[\n            {\n                \"get_daily_weather_daily_get\": {\n                    \"name\": \"get_daily_weather\",\n                    \"description\": \"Get the daily weather\",\n                }\n            },\n            \"get_hourly_weather_hourly_get\",\n        ],\n    )\n</code></pre>"},{"location":"user-guide/runtime/autogen/#6-enable-agent-interaction-and-chat","title":"6. Enable Agent Interaction and Chat","text":"<p>Here, the user agent initiates a chat with the weather agent, which queries the API and returns the weather information. The conversation is summarized using a method provided by the LLM.</p> <pre><code>    chat_result = user_agent.initiate_chat(\n        weather_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre>"},{"location":"user-guide/runtime/autogen/#7-create-and-run-the-application","title":"7. Create and Run the Application","text":"<p>Finally, we create the FastAgency application and launch it using the console interface.</p> <pre><code>app = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre>"},{"location":"user-guide/runtime/autogen/#complete-application-code","title":"Complete Application Code","text":"main.py <pre><code>import os\n\nfrom autogen import UserProxyAgent\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency\nfrom fastagency.api.openapi import OpenAPI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\nfrom fastagency.ui.console import ConsoleUI\n\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nopenapi_url = \"https://weather.tools.fastagency.ai/openapi.json\"\n\nweather_api = OpenAPI.create(openapi_url=openapi_url)\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_weather\", description=\"Weather chat\")  # type: ignore[type-var]\ndef weather_workflow(\n    wf: AutoGenWorkflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    weather_agent = ConversableAgent(\n        name=\"Weather_Agent\",\n        system_message=\"You are a weather agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n\n    wf.register_api(  # type: ignore[attr-defined]\n        api=weather_api,\n        callers=[user_agent],\n        executors=[weather_agent],\n        functions=[\n            {\n                \"get_daily_weather_daily_get\": {\n                    \"name\": \"get_daily_weather\",\n                    \"description\": \"Get the daily weather\",\n                }\n            },\n            \"get_hourly_weather_hourly_get\",\n        ],\n    )\n\n    chat_result = user_agent.initiate_chat(\n        weather_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n\n\napp = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre>"},{"location":"user-guide/runtime/autogen/#running-the-application","title":"Running the Application","text":"<pre><code>fastagency run\n</code></pre> <p>Ensure you have set your OpenAI API key in the environment and that the weather API URL is accessible. The command will launch a console interface where users can input their requests and interact with the weather agent.</p> <p>This example demonstrates the power of the AutoGen runtime within FastAgency, showing how easy it is to integrate LLM-powered agents with real-time API services. By leveraging FastAgency, developers can quickly create interactive, scalable applications that interact with external data sources in real-time.</p> <p>For more detailed documentation, visit the AutoGen Reference.</p>"},{"location":"user-guide/runtime/autogen/interactions/","title":"Custom User Interactions","text":"<p>In this example, we'll demonstrate how to create custom interaction with the user using <code>UI</code> protocol and its <code>process_message</code> method.</p>"},{"location":"user-guide/runtime/autogen/interactions/#install","title":"Install","text":"<p>To get started, you need to install FastAgency. You can do this using <code>pip</code>, Python's package installer.</p> <pre><code>pip install \"fastagency[autogen]\"\n</code></pre>"},{"location":"user-guide/runtime/autogen/interactions/#define-interaction","title":"Define Interaction","text":"<p>This section describes how to define functions for the <code>ConversableAgent</code> instances representing the student and teacher. We will also explain the differences between <code>MultipleChoice</code>, <code>SystemMessage</code>, and <code>TextInput</code>, which are used for communication between the user and agents.</p> <p>Let's define three functions which will be available to the agents:</p>"},{"location":"user-guide/runtime/autogen/interactions/#free-textual-tnput","title":"Free Textual Tnput","text":"<p><code>TextInput</code> is suitable for free-form text messages, ideal for open-ended queries and dialogues. This function allows the student to request exam questions from the teacher and provides some suggestions using <code>TextInput</code>.</p> <pre><code>def retrieve_exam_questions(\n    message: Annotated[str, \"Message for examiner\"],\n) -&gt; Optional[str]:\n    try:\n        msg = TextInput(\n            sender=\"student\",\n            recipient=\"teacher\",\n            prompt=message,\n            suggestions=[\n                \"1) Mona Lisa\",\n                \"2) Innovations\",\n                \"3) Florence at the time of Leonardo\",\n                \"4) The Last Supper\",\n                \"5) Vitruvian Man\",\n            ],\n        return ui.process_message(msg)\n    except Exception as e:  # pragma: no cover\n        return f\"retrieve_exam_questions() FAILED! {e}\"\n</code></pre>"},{"location":"user-guide/runtime/autogen/interactions/#system-info-messages","title":"System Info Messages","text":"<p><code>SystemMessage</code> is used for operational or system-related instructions, such as logging data, and is not part of the agent dialogue. This function logs the final answers after the student completes the discussion using <code>SystemMessage</code> to log the event.</p> <pre><code>def write_final_answers(message: Annotated[str, \"Message for examiner\"]) -&gt; str:\n    try:\n        msg = SystemMessage(\n            sender=\"function call logger\",\n            recipient=\"system\",\n            message={\n                \"operation\": \"storing final answers\",\n                \"content\": message,\n            },\n        )\n        ui.process_message(msg)\n        return \"Final answers stored.\"\n    except Exception as e:  # pragma: no cover\n        return f\"write_final_answers() FAILED! {e}\"\n</code></pre>"},{"location":"user-guide/runtime/autogen/interactions/#multiple-choice","title":"Multiple Choice","text":"<p><code>MultipleChoice</code> is used for structured responses where the user must select one of several predefined options. This function retrieves the final grade for the student's submitted answers using <code>MultipleChoice</code>, presenting the user with grading options.</p> <pre><code>def get_final_grade(\n    message: Annotated[str, \"Message for examiner\"],\n) -&gt; Optional[str]:\n    try:\n        msg = MultipleChoice(\n            sender=\"student\",\n            recipient=\"teacher\",\n            prompt=message,\n            choices=[\"A\", \"B\", \"C\", \"D\", \"F\"],\n        )\n    except Exception as e:  # pragma: no cover\n        return f\"get_final_grade() FAILED! {e}\"\n</code></pre>"},{"location":"user-guide/runtime/autogen/interactions/#other-types-of-messages","title":"Other Types of Messages","text":"<p>All supported messages are subclasses of the IOMessage base class.</p>"},{"location":"user-guide/runtime/autogen/interactions/#registering-the-functions","title":"Registering the Functions","text":"<p>We now register these functions with the workflow, linking the <code>student_agent</code> as the caller and the <code>teacher_agent</code> as the executor.</p> <pre><code>register_function(\n    retrieve_exam_questions,\n    caller=student_agent,\n    executor=teacher_agent,\n    name=\"retrieve_exam_questions\",\n    description=\"Get exam questions from examiner\",\n)\n\nregister_function(\n    write_final_answers,\n    caller=student_agent,\n    executor=teacher_agent,\n    name=\"write_final_answers\",\n    description=\"Write a final answers to exam questions to examiner, but only after discussing with the tutor first.\",\n)\n\nregister_function(\n    get_final_grade,\n    caller=student_agent,\n    executor=teacher_agent,\n    name=\"get_final_grade\",\n    description=\"Get the final grade after submitting the answers.\",\n)\n</code></pre>"},{"location":"user-guide/runtime/autogen/interactions/#complete-application-code","title":"Complete Application Code","text":"main.py <pre><code>import os\nfrom typing import Annotated, Any, Optional\n\nfrom autogen import register_function\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.base import MultipleChoice, SystemMessage, TextInput\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\nfrom fastagency.ui.console import ConsoleUI\n\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"exam_practice\", description=\"Student and teacher chat\")\ndef exam_learning(wf: Workflows, ui: UI, initial_message: str, session_id: str) -&gt; str:\n    def is_termination_msg(msg: dict[str, Any]) -&gt; bool:\n        return msg[\"content\"] is not None and \"TERMINATE\" in msg[\"content\"]\n\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student writing a practice test. Your task is as follows:\\n\"\n        \"  1) Retrieve exam questions by calling a function.\\n\"\n        \"  2) Write a draft of proposed answers and engage in dialogue with your tutor.\\n\"\n        \"  3) Once you are done with the dialogue, register the final answers by calling a function.\\n\"\n        \"  4) Retrieve the final grade by calling a function.\\n\"\n        \"Finally, terminate the chat by saying 'TERMINATE'.\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n        is_termination_msg=is_termination_msg,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a teacher.\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n        is_termination_msg=is_termination_msg,\n    )\n\n    def retrieve_exam_questions(\n        message: Annotated[str, \"Message for examiner\"],\n    ) -&gt; Optional[str]:\n        try:\n            msg = TextInput(\n                sender=\"student\",\n                recipient=\"teacher\",\n                prompt=message,\n                suggestions=[\n                    \"1) Mona Lisa\",\n                    \"2) Innovations\",\n                    \"3) Florence at the time of Leonardo\",\n                    \"4) The Last Supper\",\n                    \"5) Vitruvian Man\",\n                ],\n            )\n            return ui.process_message(msg)\n        except Exception as e:  # pragma: no cover\n            return f\"retrieve_exam_questions() FAILED! {e}\"\n\n    def write_final_answers(message: Annotated[str, \"Message for examiner\"]) -&gt; str:\n        try:\n            msg = SystemMessage(\n                sender=\"function call logger\",\n                recipient=\"system\",\n                message={\n                    \"operation\": \"storing final answers\",\n                    \"content\": message,\n                },\n            )\n            ui.process_message(msg)\n            return \"Final answers stored.\"\n        except Exception as e:  # pragma: no cover\n            return f\"write_final_answers() FAILED! {e}\"\n\n    def get_final_grade(\n        message: Annotated[str, \"Message for examiner\"],\n    ) -&gt; Optional[str]:\n        try:\n            msg = MultipleChoice(\n                sender=\"student\",\n                recipient=\"teacher\",\n                prompt=message,\n                choices=[\"A\", \"B\", \"C\", \"D\", \"F\"],\n            )\n            return ui.process_message(msg)\n        except Exception as e:  # pragma: no cover\n            return f\"get_final_grade() FAILED! {e}\"\n\n    register_function(\n        retrieve_exam_questions,\n        caller=student_agent,\n        executor=teacher_agent,\n        name=\"retrieve_exam_questions\",\n        description=\"Get exam questions from examiner\",\n    )\n\n    register_function(\n        write_final_answers,\n        caller=student_agent,\n        executor=teacher_agent,\n        name=\"write_final_answers\",\n        description=\"Write a final answers to exam questions to examiner, but only after discussing with the tutor first.\",\n    )\n\n    register_function(\n        get_final_grade,\n        caller=student_agent,\n        executor=teacher_agent,\n        name=\"get_final_grade\",\n        description=\"Get the final grade after submitting the answers.\",\n    )\n\n    chat_result = teacher_agent.initiate_chat(\n        student_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=10,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n\n\napp = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre>"},{"location":"user-guide/runtime/autogen/interactions/#run-application","title":"Run Application","text":"<p>Once everything is set up, you can run your FastAgency application using the following command:</p> <pre><code>fastagency run\n</code></pre>"},{"location":"user-guide/runtime/autogen/websurfer/","title":"WebSurfer","text":"<p>FastAgency allows you to quickly create workflows with capabilities like live browsing, automatic data retrieval, and tasks requiring up-to-date web information, making it easy to integrate web functionality.</p>"},{"location":"user-guide/runtime/autogen/websurfer/#adding-web-surfing-capabilities-to-agents","title":"Adding Web Surfing Capabilities to Agents","text":"<p>FastAgency provides two ways to add web surfing capabilities to agents. You can either:</p> <ol> <li>Use a WebSurferAgent, which comes with built-in web surfing capabilities (recommended)</li> <li>Enhance an existing agent with web surfing capability</li> </ol> <p>In this guide, we'll demonstrate both methods with a real-world example. We\u2019ll create a workflow where agents search the web for real-time data.</p> <p>We\u2019ll build agents and assign them the task: \u201cSearch for information about Microsoft AutoGen and summarize the results\u201d to showcase its ability to browse and gather real-time data in action.</p>"},{"location":"user-guide/runtime/autogen/websurfer/#installation","title":"Installation","text":"<p>Before getting started, make sure you have installed FastAgency with support for the AutoGen runtime by running the following command:</p> <pre><code>pip install \"fastagency[autogen]\"\n</code></pre> <p>This command installs FastAgency with support for the Console interface and AutoGen framework.</p>"},{"location":"user-guide/runtime/autogen/websurfer/#example-search-for-information-about-microsoft-autogen-and-summarize-the-results","title":"Example: Search for information about Microsoft AutoGen and summarize the results","text":""},{"location":"user-guide/runtime/autogen/websurfer/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":""},{"location":"user-guide/runtime/autogen/websurfer/#1-import-required-modules","title":"1. Import Required Modules","text":"<p>The example starts by importing the necessary modules from AutoGen and FastAgency. These imports lay the foundation for building and running multi-agent workflows.</p> Using WebSurferAgentEnhancing an existing agent <pre><code>import os\n\nfrom autogen import UserProxyAgent\n\nfrom fastagency import UI, FastAgency\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.runtime.autogen.agents.websurfer import WebSurferAgent\nfrom fastagency.ui.console import ConsoleUI\n</code></pre> <p>To create a new web surfing agent, simply import <code>WebSurferAgent</code>, which comes with built-in web surfing capabilities, and use it as needed.</p> <pre><code>import os\n\nfrom autogen import UserProxyAgent\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.runtime.autogen.tools import WebSurferTool\nfrom fastagency.ui.console import ConsoleUI\n</code></pre> <p>To enhance existing agents with web surfing capability, import <code>WebSurferTool</code> from FastAgency and <code>ConversableAgent</code> from AutoGen.</p>"},{"location":"user-guide/runtime/autogen/websurfer/#2-configure-the-language-model-llm","title":"2. Configure the Language Model (LLM)","text":"<p>Here, the large language model is configured to use the <code>gpt-4o</code> model, and the API key is retrieved from the environment. This setup ensures that both the user and websurfer agents can interact effectively.</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n</code></pre>"},{"location":"user-guide/runtime/autogen/websurfer/#3-define-the-workflow-and-agents","title":"3. Define the Workflow and Agents","text":"Using WebSurferAgentEnhancing an existing agent <p>In this step, we are going to create two agents:</p> <ul> <li> <p>UserProxyAgent: This agent simulates the user interacting with the system.</p> </li> <li> <p>WebSurferAgent: This agent functions as a web surfer, with built-in capability to browse the web and fetch real-time data as required.</p> </li> </ul> <pre><code>wf = AutoGenWorkflows()\n\n@wf.register(name=\"simple_websurfer\", description=\"WebSurfer chat\")  # type: ignore[type-var]\ndef websurfer_workflow(\n    wf: AutoGenWorkflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    web_surfer = WebSurferAgent(\n        name=\"Assistant_Agent\",\n        llm_config=llm_config,\n        summarizer_llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n        executor=user_agent,\n    )\n</code></pre> <p>When initiating the <code>WebSurferAgent</code>, the executor parameter must be provided. This can be either a single instance of <code>ConversableAgent</code> or a <code>list of ConversableAgent</code> instances.</p> <p>The <code>WebSurferAgent</code> relies on the executor agent(s) to execute the web surfing tasks. In this example, the <code>web_surfer</code> agent will call the <code>user_agent</code> agent with the necessary instructions when web surfing is required, and the <code>user_agent</code> will execute those instructions.</p> <p>In this step, we create two agents and a web surfer tool:</p> <ul> <li> <p>UserProxyAgent: This agent simulates the user interacting with the system.</p> </li> <li> <p>ConversableAgent: This is the conversable agent to which we will be adding web surfing capabilities.</p> </li> <li> <p>WebSurferTool: The tool that gives the ConversableAgent the ability to browse the web after it has been registered.</p> </li> </ul> <pre><code>wf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_websurfer\", description=\"WebSurfer chat\")  # type: ignore[type-var]\ndef websurfer_workflow(\n    wf: AutoGenWorkflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    assistant_agent = ConversableAgent(\n        name=\"Assistant_Agent\",\n        system_message=\"You are a useful assistant\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n\n    web_surfer = WebSurferTool(\n        name_prefix=\"Web_Surfer\",\n        llm_config=llm_config,\n        summarizer_llm_config=llm_config,\n    )\n</code></pre> <p>Now, we need to register the WebSurferAgent with a caller and executor. This setup allows the caller to use the WebSurferAgent for performing real-time web interactions.</p> <pre><code>    web_surfer.register(\n        caller=assistant_agent,\n        executor=user_agent,\n    )\n</code></pre> <p>The <code>executor</code> can be either a single instance of <code>ConversableAgent</code> or a <code>list of ConversableAgent</code> instances.</p> <p>The <code>caller</code> relies on the executor agent(s) to execute the web surfing tasks. In this example, the <code>assistant_agent</code> agent will call the <code>user_agent</code> agent with the necessary instructions when web surfing is required, and the <code>user_agent</code> will execute those instructions.</p>"},{"location":"user-guide/runtime/autogen/websurfer/#4-enable-agent-interaction-and-chat","title":"4. Enable Agent Interaction and Chat","text":"<p>Here, the user agent starts a conversation with the websurfer agent, which performs a web search and returns summarized information. The conversation is then summarized using a method provided by the LLM.</p> Using WebSurferAgentEnhancing an existing agent <pre><code>chat_result = user_agent.initiate_chat(\n    web_surfer,\n    message=initial_message,\n    summary_method=\"reflection_with_llm\",\n    max_turns=3,\n)\n\nreturn chat_result.summary  # type: ignore[no-any-return]\n</code></pre> <pre><code>chat_result = user_agent.initiate_chat(\n    assistant_agent,\n    message=initial_message,\n    summary_method=\"reflection_with_llm\",\n    max_turns=3,\n)\n\nreturn chat_result.summary  # type: ignore[no-any-return]\n</code></pre>"},{"location":"user-guide/runtime/autogen/websurfer/#5-create-and-run-the-application","title":"5. Create and Run the Application","text":"<p>Finally, we create the FastAgency application and launch it using the console interface.</p> <pre><code>app = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre>"},{"location":"user-guide/runtime/autogen/websurfer/#complete-application-code","title":"Complete Application Code","text":"Using WebSurferAgentEnhancing an existing agent <p> websurfer_agent.py <pre><code>import os\n\nfrom autogen import UserProxyAgent\n\nfrom fastagency import UI, FastAgency\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.runtime.autogen.agents.websurfer import WebSurferAgent\nfrom fastagency.ui.console import ConsoleUI\n\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n\n@wf.register(name=\"simple_websurfer\", description=\"WebSurfer chat\")  # type: ignore[type-var]\ndef websurfer_workflow(\n    wf: AutoGenWorkflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    web_surfer = WebSurferAgent(\n        name=\"Assistant_Agent\",\n        llm_config=llm_config,\n        summarizer_llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n        executor=user_agent,\n    )\n\n    chat_result = user_agent.initiate_chat(\n        web_surfer,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n\n\napp = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre> </p> <p> websurfer_tool.py <pre><code>import os\n\nfrom autogen import UserProxyAgent\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.runtime.autogen.tools import WebSurferTool\nfrom fastagency.ui.console import ConsoleUI\n\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_websurfer\", description=\"WebSurfer chat\")  # type: ignore[type-var]\ndef websurfer_workflow(\n    wf: AutoGenWorkflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    assistant_agent = ConversableAgent(\n        name=\"Assistant_Agent\",\n        system_message=\"You are a useful assistant\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n\n    web_surfer = WebSurferTool(\n        name_prefix=\"Web_Surfer\",\n        llm_config=llm_config,\n        summarizer_llm_config=llm_config,\n    )\n\n    web_surfer.register(\n        caller=assistant_agent,\n        executor=user_agent,\n    )\n\n    chat_result = user_agent.initiate_chat(\n        assistant_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n\n\napp = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre> </p>"},{"location":"user-guide/runtime/autogen/websurfer/#running-the-application","title":"Running the Application","text":"Using WebSurferAgentEnhancing an existing agent <pre><code>fastagency run websurfer_agent.py\n</code></pre> <pre><code>fastagency run websurfer_tool.py\n</code></pre> <p>Ensure you have set your OpenAI API key in the environment. The command will launch a console interface where users can input their requests and interact with the websurfer agent.</p>"},{"location":"user-guide/runtime/autogen/websurfer/#output","title":"Output","text":"<p>Once you run it, FastAgency automatically detects the appropriate app to execute and runs it. The application will then prompt you with: \"Please enter an initial message:\".</p> Using WebSurferAgentEnhancing an existing agent <pre><code>\u256d\u2500\u2500 Python module file \u2500\u2500\u2500\u256e\n\u2502                         \u2502\n\u2502  \ud83d\udc0d websurfer_agent.py  \u2502\n\u2502                         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n[INFO] Importing autogen.base.py\n\n\u256d\u2500\u2500\u2500\u2500 Importable FastAgency app \u2500\u2500\u2500\u2500\u256e\n\u2502                                   \u2502\n\u2502  from websurfer_agent import app  \u2502\n\u2502                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500 FastAgency -&gt; user [text_input] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 Starting a new workflow 'simple_websurfer' with the following                \u2502\n\u2502 description:                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 WebSurfer chat                                                               \u2502\n\u2502                                                                              \u2502\n\u2502 Please enter an initial message:                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>\u256d\u2500\u2500 Python module file \u2500\u2500\u256e\n\u2502                        \u2502\n\u2502  \ud83d\udc0d websurfer_tool.py  \u2502\n\u2502                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n[INFO] Importing autogen.base.py\n\n\u256d\u2500\u2500\u2500 Importable FastAgency app \u2500\u2500\u2500\u2500\u256e\n\u2502                                  \u2502\n\u2502  from websurfer_tool import app  \u2502\n\u2502                                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500 FastAgency -&gt; user [text_input] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 Starting a new workflow 'simple_websurfer' with the following                \u2502\n\u2502 description:                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 WebSurfer chat                                                               \u2502\n\u2502                                                                              \u2502\n\u2502 Please enter an initial message:                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>In the prompt, type Search for information about Microsoft AutoGen and summarize the results and press Enter.</p> <p>This will initiate the task, allowing you to see the real-time conversation between the agents as they collaborate to complete it. Once the task is finished, you\u2019ll see an output similar to the one below.</p> <pre><code>\u256d\u2500 workflow -&gt; user [workflow_completed] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 {                                                                            \u2502\n\u2502   \"result\": \"Microsoft AutoGen is an open-source framework designed          \u2502\n\u2502 to simplify the orchestration, optimization, and automation of large         \u2502\n\u2502 language model (LLM) workflows. It features customizable agents,             \u2502\n\u2502 multi-agent conversations, tool integration, and human involvement,          \u2502\n\u2502 making it suitable for complex AI applications. Key resources include        \u2502\n\u2502 the Microsoft Research Blog and the GitHub repository for AutoGen.\"          \u2502\n\u2502 }                                                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500 FastAgency -&gt; user [text_input] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 Starting a new workflow 'simple_websurfer' with the following                \u2502\n\u2502 description:                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 WebSurfer chat                                                               \u2502\n\u2502                                                                              \u2502\n\u2502 Please enter an initial message:                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>The agent will summarize its findings and then prompt you again with \"Please enter an initial message:\", allowing you to continue the conversation with the web surfer agent.</p> <p>This example demonstrates the power of the AutoGen runtime within FastAgency, showcasing how easily LLM-powered agents can be integrated with browsing capabilities to fetch and process real-time information. By leveraging FastAgency, developers can quickly build interactive, scalable applications that interact with live data sources.</p>"},{"location":"user-guide/runtime/crewai/basics/","title":"CrewAI in FastAgency (Coming Soon)","text":"<p>The CrewAI runtime is an exciting upcoming feature in FastAgency, designed to expand the framework\u2019s capabilities for building sophisticated multi-agent workflows. CrewAI will enable agents to collaborate in dynamic and scalable environments, allowing for more complex use cases that involve multiple agents working together to achieve shared goals.</p> <p>Stay tuned for more updates on CrewAI as it is integrated into FastAgency. Once released, it will provide a powerful new option for building intelligent, multi-agent applications.</p> <p>Check back soon for detailed documentation and usage examples! For real-time updates and to join the discussion, visit our Discord channel.</p>"},{"location":"user-guide/testing/","title":"Testing (Coming Soon)","text":"<p>FastAgency is working on introducing a comprehensive testing framework to help developers ensure the reliability and correctness of their multi-agent workflows. This upcoming feature will allow you to write and execute tests for your workflows, ensuring agents behave as expected under various scenarios. The testing tools will seamlessly integrate into your development pipeline, enabling continuous integration (CI) support and ensuring that your applications remain robust and reliable as they scale.</p>"},{"location":"user-guide/testing/#key-features-planned","title":"Key Features (Planned):","text":"<ul> <li> <p>Automated Workflow Testing: Define tests to simulate agent interactions and verify correct behavior.</p> </li> <li> <p>CI Integration: Easily integrate tests into your continuous integration pipelines for automated validation.</p> </li> <li> <p>Mocking External APIs: Simulate external API responses to test how agents handle external data sources.</p> </li> </ul> <p>Stay tuned for more updates! To get the latest news and join the discussion, visit our Discord channel.</p> <p>Check back soon for detailed documentation and examples once the testing framework is available!</p>"},{"location":"user-guide/ui/","title":"User Interfaces","text":"<p>FastAgency provides multiple ways to interact with and manage your multi-agent workflows through various user interface (UI) options. These interfaces enable developers to interact with agents in different environments\u2014whether it\u2019s a simple text-based console interface for quick testing or a web-based interface for more user-friendly interaction. Each UI option is designed to suit different development needs, from early-stage prototyping to fully deployed web applications.</p> <p>Below is an overview of the supported UIs, with links to their respective pages for more detailed information.</p>"},{"location":"user-guide/ui/#available-user-interfaces","title":"Available User Interfaces","text":""},{"location":"user-guide/ui/#1-consoleui","title":"1. ConsoleUI","text":"<p>The ConsoleUI provides a command-line interface for interacting with FastAgency's agent workflows. It\u2019s an ideal choice for developers who need to quickly test and prototype workflows directly in the terminal.</p> <p>Learn more about ConsoleUI \u2192</p>"},{"location":"user-guide/ui/#2-mesopui","title":"2. MesopUI","text":"<p>The MesopUI is a web-based interface that enables users to interact with agents through a browser. This UI is designed for applications that need a more graphical and interactive experience for users.</p> <p>Learn more about MesopUI \u2192</p>"},{"location":"user-guide/ui/#3-fastapi-ui-coming-soon","title":"3. FastAPI UI (Coming Soon)","text":"<p>FastAgency will soon introduce FastAPI UI support, which will allow you to build multi-agent systems with a FastAPI backend. This will enable seamless integration with RESTful APIs for modern web applications.</p> <p>Learn more about FastAPI UI (Coming Soon) \u2192</p> <p>Each of these UI options is designed to cater to different stages of the development lifecycle, providing flexibility whether you're prototyping or deploying a production-ready application. Stay tuned for updates, and if you have any questions or want to join the community, visit our Discord channel.</p>"},{"location":"user-guide/ui/console/basics/","title":"Console","text":"<p>ConsoleUI in FastAgency provides a text-based interface for interacting with multi-agent workflows directly from the command line. This interface allows developers to quickly test and prototype workflows without needing to set up a graphical or web-based interface, making it an excellent tool for early-stage development and debugging.</p> <p>Below is an example that demonstrates how to set up a simple learning conversation between a student and a teacher using ConsoleUI.</p>"},{"location":"user-guide/ui/console/basics/#example-student-and-teacher-learning-chat","title":"Example: Student and Teacher Learning Chat","text":"<p>This example demonstrates how to create a workflow where a student agent interacts with a teacher agent. The student asks questions, and the teacher provides responses, simulating a learning environment. The interaction is facilitated through the console using ConsoleUI.</p>"},{"location":"user-guide/ui/console/basics/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":""},{"location":"user-guide/ui/console/basics/#1-import-required-modules","title":"1. Import Required Modules","text":"<p>We begin by importing the necessary modules from FastAgency and AutoGen. These imports provide the essential building blocks for creating agents, workflows, and integrating the ConsoleUI.</p> <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.ui.console import ConsoleUI\n</code></pre> <ul> <li>ConversableAgent: This class allows the creation of agents that can engage in conversational tasks.</li> <li>FastAgency: The core class responsible for orchestrating workflows and connecting them with UIs.</li> <li>UI and ConsoleUI: These classes define the user interface for interaction, with ConsoleUI providing a text-based interface.</li> <li>AutoGenWorkflows: Manages the creation and execution of multi-agent workflows.</li> </ul>"},{"location":"user-guide/ui/console/basics/#2-configure-the-language-model-llm","title":"2. Configure the Language Model (LLM)","text":"<p>Next, we configure the language model that will power the agents. In this case, we're using GPT-4o, and the API key is retrieved from the environment.</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n</code></pre> <ul> <li>Explanation: The configuration specifies the LLM model and API key used for powering the conversation between agents. The temperature is set to <code>0.0</code> to ensure deterministic responses from the agents, making interactions consistent and reliable. This is particularly useful for scenarios where repeatability and predictability are required, such as testing.</li> </ul>"},{"location":"user-guide/ui/console/basics/#3-define-the-workflow-and-agents","title":"3. Define the Workflow and Agents","text":"<p>Here, we define a simple workflow where the Student Agent interacts with the Teacher Agent. The student asks questions, and the teacher responds as a math teacher. The workflow is registered using AutoGenWorkflows.</p> <pre><code>@wf.register(name=\"simple_learning\", description=\"Student and teacher learning chat\")\ndef simple_workflow(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student willing to learn.\",\n        llm_config=llm_config,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a math teacher.\",\n        llm_config=llm_config,\n    )\n\n    chat_result = student_agent.initiate_chat(\n        teacher_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre> <ul> <li>Agent Overview: The Student Agent is configured with a system message, \"You are a student willing to learn,\" and will initiate questions during the interaction. The Teacher Agent, on the other hand, is set up as a math teacher and will respond to the student's questions.</li> <li>Workflow Registration: The workflow is registered under the name <code>simple_learning</code>. The ConversableAgent class is used to represent both the student and teacher agents, allowing them to communicate with each other up to 5 turns before summarizing the conversation using the <code>reflection_with_llm</code> method.</li> </ul>"},{"location":"user-guide/ui/console/basics/#4-using-consoleui","title":"4. Using ConsoleUI","text":"<p>Finally, we instantiate ConsoleUI to link the workflow to a text-based console interface. This allows the user to interact with the agents via the terminal.</p> <pre><code>app = FastAgency(wf=wf, ui=ConsoleUI(), title=\"Learning Chat\")\n</code></pre> <ul> <li>Explanation: Here, we set up the ConsoleUI as the user interface for the workflow, which will allow the entire agent interaction to take place within the terminal.</li> </ul>"},{"location":"user-guide/ui/console/basics/#complete-application-code","title":"Complete Application Code","text":"main.py <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.ui.console import ConsoleUI\n\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_learning\", description=\"Student and teacher learning chat\")\ndef simple_workflow(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student willing to learn.\",\n        llm_config=llm_config,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a math teacher.\",\n        llm_config=llm_config,\n    )\n\n    chat_result = student_agent.initiate_chat(\n        teacher_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n\n\napp = FastAgency(wf=wf, ui=ConsoleUI(), title=\"Learning Chat\")\n</code></pre>"},{"location":"user-guide/ui/console/basics/#running-the-application","title":"Running the Application","text":"<p>Once the workflow is set up, you can run the application using the FastAgency CLI. Navigate to the directory where the script is located and run the following command:</p> <pre><code>fastagency run\n</code></pre> <p>This will launch the console interface, allowing you to input messages as the student and observe how the teacher agent responds.</p> <p>Note</p> <p>Ensure that your OpenAI API key is set in the environment, as the agents rely on it to interact using GPT-4o. If the API key is not correctly configured, the application may fail to retrieve LLM-powered responses.</p>"},{"location":"user-guide/ui/console/basics/#debugging-tips","title":"Debugging Tips","text":"<p>If you encounter issues running the application, ensure that:</p> <ul> <li>The OpenAI API key is correctly set in your environment variables.</li> <li>All necessary packages are installed, especially the <code>fastagency[autogen]</code> dependencies.</li> <li>The API connection to GPT-4o is functional and responds as expected.</li> </ul> <p>By using ConsoleUI, developers can rapidly test and deploy multi-agent workflows in a simple, text-based environment. The flexibility of this interface makes it ideal for prototyping agent interactions before scaling them into more complex applications. You can extend this workflow or modify the agents for various use cases, such as tutoring, customer support, or information retrieval.</p>"},{"location":"user-guide/ui/fastapi/basics/","title":"FastAPI (Coming Soon)","text":"<p>FastAgency is expanding its capabilities with support for FastAPI! This upcoming feature will allow developers to build multi-agent applications with a powerful, fully-fledged FastAPI backend, making it even easier to integrate agents into modern web applications.</p> <p>With FastAPI, you will be able to:</p> <ul> <li> <p>Seamlessly integrate FastAgency's agent workflows with FastAPI endpoints.</p> </li> <li> <p>Create RESTful APIs that interact with multi-agent systems.</p> </li> <li> <p>Build scalable, high-performance web applications powered by FastAgency agents.</p> </li> </ul> <p>Stay tuned for more updates as this feature is being developed. To get the latest news and join the discussion, visit our Discord channel.</p> <p>Check back soon for detailed documentation and usage examples!</p>"},{"location":"user-guide/ui/mesop/basics/","title":"Mesop","text":"<p>MesopUI in FastAgency offers a web-based interface for interacting with multi-agent workflows. Unlike the ConsoleUI, which is text-based and runs in the command line, MesopUI provides a user-friendly browser interface, making it ideal for applications that need a more engaging, graphical interaction. MesopUI is perfect for building interactive web applications and enabling users to interact with agents in a more intuitive way.</p> <p>To install FastAgency with MesopUI support, use the following command:</p> <pre><code>pip install \"fastagency[autogen,mesop]\"\n</code></pre> <p>This command ensures that the required dependencies for both AutoGen and MesopUI are installed.</p> <p>Below, we\u2019ll demonstrate how to set up a basic student-teacher conversation using MesopUI.</p>"},{"location":"user-guide/ui/mesop/basics/#example-student-and-teacher-learning-chat","title":"Example: Student and Teacher Learning Chat","text":"<p>This example shows how to create a simple learning chat where a student agent interacts with a teacher agent. The student asks questions, and the teacher provides responses, simulating a learning environment. The conversation is facilitated through the web interface using MesopUI.</p>"},{"location":"user-guide/ui/mesop/basics/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":""},{"location":"user-guide/ui/mesop/basics/#1-import-required-modules","title":"1. Import Required Modules","text":"<p>We begin by importing the necessary modules from FastAgency and AutoGen. These imports provide the essential building blocks for creating agents, workflows, and integrating MesopUI.</p> <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.ui.mesop import MesopUI\n</code></pre> <ul> <li>ConversableAgent: This class allows the creation of agents that can engage in conversational tasks.</li> <li>FastAgency: The core class responsible for orchestrating workflows and connecting them with UIs.</li> <li>UI and MesopUI: These classes define the user interface for interaction, with MesopUI enabling a web-based interaction.</li> <li>AutoGenWorkflows: Manages the creation and execution of multi-agent workflows.</li> </ul>"},{"location":"user-guide/ui/mesop/basics/#2-configure-the-language-model-llm","title":"2. Configure the Language Model (LLM)","text":"<p>Next, we configure the language model that powers the agents. In this case, we're using GPT-4o, and the API key is retrieved from the environment.</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n</code></pre> <ul> <li>Explanation: The configuration specifies the LLM model and API key used for powering the conversation between agents. The temperature is set to <code>0.0</code> to ensure deterministic responses from the agents, making interactions consistent and reliable.</li> </ul>"},{"location":"user-guide/ui/mesop/basics/#3-define-the-workflow-and-agents","title":"3. Define the Workflow and Agents","text":"<p>Here, we define a simple workflow where the Student Agent interacts with the Teacher Agent. The student asks questions, and the teacher responds as a math teacher. The workflow is registered using AutoGenWorkflows.</p> <pre><code>@wf.register(name=\"simple_learning\", description=\"Student and teacher learning chat\")\ndef simple_workflow(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student willing to learn.\",\n        llm_config=llm_config,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a math teacher.\",\n        llm_config=llm_config,\n    )\n\n    chat_result = student_agent.initiate_chat(\n        teacher_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=5,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre> <ul> <li>Agent Overview: The Student Agent is configured with a system message, \"You are a student willing to learn,\" and will initiate questions during the interaction. The Teacher Agent, on the other hand, is set up as a math teacher and will respond to the student's questions.</li> <li>Workflow Registration: The workflow is registered under the name <code>simple_learning</code>. The ConversableAgent class is used to represent both the student and teacher agents, allowing them to communicate with each other up to 5 turns before summarizing the conversation using the <code>reflection_with_llm</code> method.</li> </ul>"},{"location":"user-guide/ui/mesop/basics/#4-using-mesopui","title":"4. Using MesopUI","text":"<p>Finally, we instantiate MesopUI to link the workflow to a web-based interface. This allows the user to interact with the agents through a web browser.</p> <pre><code>from fastagency.ui.mesop import MesopUI\napp = FastAgency(wf=wf, ui=MesopUI())\n</code></pre> <ul> <li>Explanation: Here, we set up the MesopUI as the user interface for the workflow, which will allow the entire agent interaction to take place through a web-based platform.</li> </ul>"},{"location":"user-guide/ui/mesop/basics/#complete-application-code","title":"Complete Application Code","text":"main.py <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI, FastAgency, Workflows\nfrom fastagency.runtime.autogen import AutoGenWorkflows\nfrom fastagency.ui.mesop import MesopUI\n\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_learning\", description=\"Student and teacher learning chat\")\ndef simple_workflow(\n    wf: Workflows, ui: UI, initial_message: str, session_id: str\n) -&gt; str:\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student willing to learn.\",\n        llm_config=llm_config,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a math teacher.\",\n        llm_config=llm_config,\n    )\n\n    chat_result = student_agent.initiate_chat(\n        teacher_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=5,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n\n\napp = FastAgency(wf=wf, ui=MesopUI(), title=\"Learning Chat\")\n</code></pre>"},{"location":"user-guide/ui/mesop/basics/#running-the-application","title":"Running the Application","text":"<p>Once the workflow is set up, you can run the application either:</p> <ul> <li> <p>locally using the FastAgency CLI, or</p> </li> <li> <p>publicly using the WSGI HTTP Server such as Gunicorn.</p> </li> </ul> Local deploymentPublic deployment <p>Navigate to the directory where the script is located and run the following command:</p> <pre><code>fastagency run\n</code></pre> <p>This will launch a local web server, and you will be able to access the MesopUI interface through your browser. The web interface will display the interaction between the student and teacher agents, allowing you to input questions and see the teacher\u2019s responses.</p> <p>Assuming that you installed gunicorn first using something like this:</p> <pre><code>pip install \"fastagency[autogen,mesop]\" gunicorn\n</code></pre> <p>you can start the Mesop app by navigating to the directory where the script <code>main.py</code> is located and running the following command:</p> <pre><code>gunicorn --bind 0.0.0.0:8080 main:app\n</code></pre> <p>This will launch a publicly available web server, and you will be able to access the MesopUI interface through your browser. The web interface will display the interaction between the student and teacher agents, allowing you to input questions and see the teacher\u2019s responses.</p> <p>Note</p> <p>Ensure that your OpenAI API key is set in the environment, as the agents rely on it to interact using GPT-4o. If the API key is not correctly configured, the application may fail to retrieve LLM-powered responses.</p>"},{"location":"user-guide/ui/mesop/basics/#debugging-tips","title":"Debugging Tips","text":"<p>If you encounter issues running the application, ensure that:</p> <ul> <li>The OpenAI API key is correctly set in your environment variables.</li> <li>All necessary packages are installed, especially the <code>fastagency[autogen,mesop]</code> dependencies.</li> <li>The MesopUI web interface is accessible from the browser, and no firewall is blocking the connection.</li> </ul> <p>By using MesopUI, developers can create interactive, web-based multi-agent applications with ease. This interface is ideal for building user-friendly, browser-accessible systems, enabling users to interact with agents in a more engaging and visual environment. You can extend this workflow for more complex scenarios, such as tutoring systems, customer support, or real-time information retrieval.</p>"}]}