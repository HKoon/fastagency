{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAgency","text":""},{"location":"release/","title":"Release Notes","text":"","boost":2},{"location":"release/#v001","title":"v0.0.1","text":"","boost":2},{"location":"release/#whats-changed","title":"What's Changed","text":"<ul> <li>Change social icon and update release notes by @davorrunje in #131</li> <li>Add LFS to Deploy docs workflow by @davorrunje in #132</li> <li>Description added to project by @davorrunje in #133</li> <li>Create Tutorial page by @rjambrecic in #154</li> <li>Minor updates after the v.0.0.0 release by @davorrunje in #157</li> <li>Fix for human mode set to value other than NEVER in user proxy by @davorrunje in #158</li> <li>Chore: fix spelling by @davorrunje in #160</li> <li>Move code to docs src by @rjambrecic in #159</li> <li>Publish coverage to smokeshow when pushed to main branch by @kumaranvpl in #161</li> <li>Bump version to 0.0.1rc0 by @davorrunje in #162</li> <li>Enable codecoverage badge by @kumaranvpl in #163</li> <li>PyPi dev status classifier changed from alpha to beta by @davorrunje in #164</li> <li>Bump version to 0.0.1 by @davorrunje in #167</li> </ul> <p>Full Changelog: #v0.0.0...v0.0.1</p>","boost":2},{"location":"release/#v000","title":"v0.0.0","text":"","boost":2},{"location":"release/#initial-release","title":"Initial release","text":"<p>FastAgency enables developers to quickly build testing or production-grade chat applications based on multi-agent workflow. This initial release supports AutoGen runtime for agentic workflows and simple console and Mesop applications.</p>","boost":2},{"location":"release/#new-contributors","title":"New Contributors","text":"<ul> <li>@davorrunje made their first contribution in https://github.com/airtai/fastagency/pull/2</li> <li>@kumaranvpl made their first contribution in https://github.com/airtai/fastagency/pull/3</li> <li>@harishmohanraj made their first contribution in https://github.com/airtai/fastagency/pull/66</li> <li>@rjambrecic made their first contribution in https://github.com/airtai/fastagency/pull/128</li> <li>@davorinrusevljan made their first contribution in https://github.com/airtai/fastagency/pull/129</li> </ul> <p>Full Changelog: https://github.com/airtai/fastagency/commits/v0.0.0</p>","boost":2},{"location":"api/fastagency/FastAgency/","title":"FastAgency","text":"","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency","title":"fastagency.FastAgency","text":"<pre><code>FastAgency(wf: Workflows, ui: UI)\n</code></pre> <p>Initialize the FastAgency object.</p> PARAMETER DESCRIPTION <code>wf</code> <p>The workflows object to use</p> <p> TYPE: <code>Workflows</code> </p> <code>ui</code> <p>The UI object to use</p> <p> TYPE: <code>UI</code> </p> Source code in <code>fastagency/app.py</code> <pre><code>def __init__(self, wf: Workflows, ui: UI) -&gt; None:\n    \"\"\"Initialize the FastAgency object.\n\n    Args:\n        wf (Workflows): The workflows object to use\n        ui (UI): The UI object to use\n    \"\"\"\n    self._wf = wf\n    self._ui = ui\n</code></pre>","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency.ui","title":"ui  <code>property</code>","text":"<pre><code>ui: UI\n</code></pre> <p>Return the UI object.</p>","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency.wf","title":"wf  <code>property</code>","text":"<pre><code>wf: Workflows\n</code></pre> <p>Return the workflows object.</p>","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency.create","title":"create","text":"<pre><code>create(import_string: str) -&gt; Generator[None, None, None]\n</code></pre> <p>Create the FastAgency.</p> Source code in <code>fastagency/app.py</code> <pre><code>@contextmanager\ndef create(self, import_string: str) -&gt; Generator[None, None, None]:\n    \"\"\"Create the FastAgency.\"\"\"\n    with self._ui.create(app=self, import_string=import_string):\n        yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/FastAgency/#fastagency.FastAgency.start","title":"start","text":"<pre><code>start(\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>Start the FastAgency.</p> Source code in <code>fastagency/app.py</code> <pre><code>def start(\n    self,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Start the FastAgency.\"\"\"\n    self.ui.start(\n        app=self,\n        import_string=import_string,\n        name=name,\n        initial_message=initial_message,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/","title":"FunctionCallExecution","text":"","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution","title":"fastagency.FunctionCallExecution  <code>dataclass</code>","text":"<pre><code>FunctionCallExecution(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    function_name: Optional[str] = None,\n    call_id: Optional[str] = None,\n    retval: Any = None,\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.call_id","title":"call_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>call_id: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.function_name","title":"function_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function_name: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.retval","title":"retval  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>retval: Any = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/FunctionCallExecution/#fastagency.FunctionCallExecution.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/IOMessage/","title":"IOMessage","text":"","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage","title":"fastagency.IOMessage  <code>dataclass</code>","text":"<pre><code>IOMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p>","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/IOMessage/#fastagency.IOMessage.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/","title":"MultipleChoice","text":"","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice","title":"fastagency.MultipleChoice  <code>dataclass</code>","text":"<pre><code>MultipleChoice(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    prompt: Optional[str] = None,\n    choices: list[str] = list(),\n    default: Optional[str] = None,\n    single: bool = True,\n)\n</code></pre> <p>               Bases: <code>AskingMessage</code></p>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.choices","title":"choices  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>choices: list[str] = field(default_factory=list)\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.prompt","title":"prompt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.single","title":"single  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>single: bool = True\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/MultipleChoice/#fastagency.MultipleChoice.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/","title":"SuggestedFunctionCall","text":"","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall","title":"fastagency.SuggestedFunctionCall  <code>dataclass</code>","text":"<pre><code>SuggestedFunctionCall(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    function_name: Optional[str] = None,\n    call_id: Optional[str] = None,\n    arguments: dict[str, Any] = dict(),\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.arguments","title":"arguments  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>arguments: dict[str, Any] = field(default_factory=dict)\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.call_id","title":"call_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>call_id: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.function_name","title":"function_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function_name: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/SuggestedFunctionCall/#fastagency.SuggestedFunctionCall.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/","title":"TextInput","text":"","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput","title":"fastagency.TextInput  <code>dataclass</code>","text":"<pre><code>TextInput(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    prompt: Optional[str] = None,\n    suggestions: list[str] = list(),\n    password: bool = False,\n)\n</code></pre> <p>               Bases: <code>AskingMessage</code></p>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.password","title":"password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.prompt","title":"prompt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.suggestions","title":"suggestions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>suggestions: list[str] = field(default_factory=list)\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextInput/#fastagency.TextInput.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/","title":"TextMessage","text":"","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage","title":"fastagency.TextMessage  <code>dataclass</code>","text":"<pre><code>TextMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    body: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.body","title":"body  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>body: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/TextMessage/#fastagency.TextMessage.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/UI/","title":"UI","text":"","boost":0.5},{"location":"api/fastagency/UI/#fastagency.UI","title":"fastagency.UI","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/UI/#fastagency.UI.create","title":"create","text":"<pre><code>create(app: Runnable, import_string: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@contextmanager\ndef create(self, app: \"Runnable\", import_string: str) -&gt; Iterator[None]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/UI/#fastagency.UI.create_subconversation","title":"create_subconversation","text":"<pre><code>create_subconversation() -&gt; UI\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def create_subconversation(self) -&gt; \"UI\": ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/UI/#fastagency.UI.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/UI/#fastagency.UI.start","title":"start","text":"<pre><code>start(\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def start(\n    self,\n    app: \"Runnable\",\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/Workflows/","title":"Workflows","text":"","boost":0.5},{"location":"api/fastagency/Workflows/#fastagency.Workflows","title":"fastagency.Workflows","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/Workflows/#fastagency.Workflows.names","title":"names  <code>property</code>","text":"<pre><code>names: list[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/Workflows/#fastagency.Workflows.get_description","title":"get_description","text":"<pre><code>get_description(name: str) -&gt; str\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def get_description(self, name: str) -&gt; str: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/Workflows/#fastagency.Workflows.register","title":"register","text":"<pre><code>register(\n    name: str, description: str\n) -&gt; Callable[[Workflow], Workflow]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def register(\n    self, name: str, description: str\n) -&gt; Callable[[Workflow], Workflow]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/Workflows/#fastagency.Workflows.run","title":"run","text":"<pre><code>run(\n    name: str, session_id: str, ui: UI, initial_message: str\n) -&gt; str\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def run(self, name: str, session_id: str, ui: UI, initial_message: str) -&gt; str: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/","title":"OpenAPI","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI","title":"fastagency.api.openapi.OpenAPI","text":"<pre><code>OpenAPI(\n    servers: list[dict[str, Any]],\n    title: Optional[str] = None,\n    **kwargs: Any\n)\n</code></pre> <p>Proxy class to generate client from OpenAPI schema.</p> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def __init__(\n    self, servers: list[dict[str, Any]], title: Optional[str] = None, **kwargs: Any\n) -&gt; None:\n    \"\"\"Proxy class to generate client from OpenAPI schema.\"\"\"\n    self.servers = servers\n    self.title = title\n    self.kwargs = kwargs\n    self.registered_funcs: list[Callable[..., Any]] = []\n    self.globals: dict[str, Any] = {}\n\n    self.security: dict[str, BaseSecurity] = {}\n    self.security_params: dict[Optional[str], BaseSecurityParameters] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.globals","title":"globals  <code>instance-attribute</code>","text":"<pre><code>globals: dict[str, Any] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.kwargs","title":"kwargs  <code>instance-attribute</code>","text":"<pre><code>kwargs = kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.registered_funcs","title":"registered_funcs  <code>instance-attribute</code>","text":"<pre><code>registered_funcs: list[Callable[..., Any]] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.security","title":"security  <code>instance-attribute</code>","text":"<pre><code>security: dict[str, BaseSecurity] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.security_params","title":"security_params  <code>instance-attribute</code>","text":"<pre><code>security_params: dict[\n    Optional[str], BaseSecurityParameters\n] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.servers","title":"servers  <code>instance-attribute</code>","text":"<pre><code>servers = servers\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title = title\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(\n    openapi_json: Optional[str] = None,\n    openapi_url: Optional[str] = None,\n) -&gt; OpenAPI\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>@classmethod\ndef create(\n    cls, openapi_json: Optional[str] = None, openapi_url: Optional[str] = None\n) -&gt; \"OpenAPI\":\n    if openapi_json is None and openapi_url is None:\n        raise ValueError(\"Either openapi_json or openapi_url should be provided\")\n\n    if openapi_json is None and openapi_url is not None:\n        with requests.get(openapi_url, timeout=10) as response:\n            response.raise_for_status()\n            openapi_json = response.text\n\n    with tempfile.TemporaryDirectory() as temp_dir:\n        td = Path(temp_dir)\n        suffix = td.name\n\n        main_name = cls.generate_code(\n            input_text=openapi_json,  # type: ignore [arg-type]\n            output_dir=td,\n        )\n        # add td to sys.path\n        try:\n            sys.path.append(str(td))\n            main = importlib.import_module(main_name, package=td.name)  # nosemgrep\n        finally:\n            sys.path.remove(str(td))\n\n        client: OpenAPI = main.app  # type: ignore [attr-defined]\n        client.set_globals(main, suffix=suffix)\n\n        return client\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.delete","title":"delete","text":"<pre><code>delete(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def delete(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"delete\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.generate_code","title":"generate_code  <code>classmethod</code>","text":"<pre><code>generate_code(\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n    custom_visitors: Optional[list[Path]] = None,\n) -&gt; str\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>@classmethod\ndef generate_code(\n    cls,\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n    custom_visitors: Optional[list[Path]] = None,\n) -&gt; str:\n    if custom_visitors is None:\n        custom_visitors = []\n    custom_visitors.append(Path(__file__).parent / \"security_schema_visitor.py\")\n\n    with patch_get_parameter_type():\n        generate_code(\n            input_name=\"openapi.json\",\n            input_text=input_text,\n            encoding=\"utf-8\",\n            output_dir=output_dir,\n            template_dir=cls._get_template_dir(),\n            disable_timestamp=disable_timestamp,\n            custom_visitors=custom_visitors,\n        )\n        # Use unique file name for main.py\n        main_name = f\"main_{output_dir.name}\"\n        main_path = output_dir / f\"{main_name}.py\"\n        shutil.move(output_dir / \"main.py\", main_path)\n\n        # Change \"from models import\" to \"from models_unique_name import\"\n        with open(main_path) as f:  # noqa: PTH123\n            main_py_code = f.read()\n        main_py_code = main_py_code.replace(\n            \"from .models import\", f\"from models_{output_dir.name} import\"\n        )\n        with open(main_path, \"w\") as f:  # noqa: PTH123\n            f.write(main_py_code)\n\n        # Use unique file name for models.py\n        models_name = f\"models_{output_dir.name}\"\n        models_path = output_dir / f\"{models_name}.py\"\n        shutil.move(output_dir / \"models.py\", models_path)\n\n        return main_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.get","title":"get","text":"<pre><code>get(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def get(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"get\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.post","title":"post","text":"<pre><code>post(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def post(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"post\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.put","title":"put","text":"<pre><code>put(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def put(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"put\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.register_for_execution","title":"register_for_execution","text":"<pre><code>register_for_execution(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def register_for_execution(self, agent: \"ConversableAgent\") -&gt; None:\n    for f in self.registered_funcs:\n        agent.register_for_execution()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.register_for_llm","title":"register_for_llm","text":"<pre><code>register_for_llm(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def register_for_llm(self, agent: \"ConversableAgent\") -&gt; None:\n    with add_to_globals(self.globals):\n        for f in self.registered_funcs:\n            agent.register_for_llm()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.set_globals","title":"set_globals","text":"<pre><code>set_globals(main: ModuleType, suffix: str) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def set_globals(self, main: ModuleType, suffix: str) -&gt; None:\n    xs = {k: v for k, v in main.__dict__.items() if not k.startswith(\"__\")}\n    self.globals = {\n        k: v\n        for k, v in xs.items()\n        if hasattr(v, \"__module__\")\n        and v.__module__ in [f\"models_{suffix}\", \"typing\"]\n    }\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/OpenAPI/#fastagency.api.openapi.OpenAPI.set_security_params","title":"set_security_params","text":"<pre><code>set_security_params(\n    security_params: BaseSecurityParameters,\n    name: Optional[str] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def set_security_params(\n    self, security_params: BaseSecurityParameters, name: Optional[str] = None\n) -&gt; None:\n    if name is not None:\n        security = self.security.get(name)\n        if security is None:\n            raise ValueError(f\"Security is not set for '{name}'\")\n\n        if not security.accept(security_params):\n            raise ValueError(\n                f\"Security parameters {security_params} do not match security {security}\"\n            )\n\n    self.security_params[name] = security_params\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/","title":"OpenAPI","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI","title":"fastagency.api.openapi.client.OpenAPI","text":"<pre><code>OpenAPI(\n    servers: list[dict[str, Any]],\n    title: Optional[str] = None,\n    **kwargs: Any\n)\n</code></pre> <p>Proxy class to generate client from OpenAPI schema.</p> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def __init__(\n    self, servers: list[dict[str, Any]], title: Optional[str] = None, **kwargs: Any\n) -&gt; None:\n    \"\"\"Proxy class to generate client from OpenAPI schema.\"\"\"\n    self.servers = servers\n    self.title = title\n    self.kwargs = kwargs\n    self.registered_funcs: list[Callable[..., Any]] = []\n    self.globals: dict[str, Any] = {}\n\n    self.security: dict[str, BaseSecurity] = {}\n    self.security_params: dict[Optional[str], BaseSecurityParameters] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.globals","title":"globals  <code>instance-attribute</code>","text":"<pre><code>globals: dict[str, Any] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.kwargs","title":"kwargs  <code>instance-attribute</code>","text":"<pre><code>kwargs = kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.registered_funcs","title":"registered_funcs  <code>instance-attribute</code>","text":"<pre><code>registered_funcs: list[Callable[..., Any]] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.security","title":"security  <code>instance-attribute</code>","text":"<pre><code>security: dict[str, BaseSecurity] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.security_params","title":"security_params  <code>instance-attribute</code>","text":"<pre><code>security_params: dict[\n    Optional[str], BaseSecurityParameters\n] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.servers","title":"servers  <code>instance-attribute</code>","text":"<pre><code>servers = servers\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title = title\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(\n    openapi_json: Optional[str] = None,\n    openapi_url: Optional[str] = None,\n) -&gt; OpenAPI\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>@classmethod\ndef create(\n    cls, openapi_json: Optional[str] = None, openapi_url: Optional[str] = None\n) -&gt; \"OpenAPI\":\n    if openapi_json is None and openapi_url is None:\n        raise ValueError(\"Either openapi_json or openapi_url should be provided\")\n\n    if openapi_json is None and openapi_url is not None:\n        with requests.get(openapi_url, timeout=10) as response:\n            response.raise_for_status()\n            openapi_json = response.text\n\n    with tempfile.TemporaryDirectory() as temp_dir:\n        td = Path(temp_dir)\n        suffix = td.name\n\n        main_name = cls.generate_code(\n            input_text=openapi_json,  # type: ignore [arg-type]\n            output_dir=td,\n        )\n        # add td to sys.path\n        try:\n            sys.path.append(str(td))\n            main = importlib.import_module(main_name, package=td.name)  # nosemgrep\n        finally:\n            sys.path.remove(str(td))\n\n        client: OpenAPI = main.app  # type: ignore [attr-defined]\n        client.set_globals(main, suffix=suffix)\n\n        return client\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.delete","title":"delete","text":"<pre><code>delete(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def delete(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"delete\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.generate_code","title":"generate_code  <code>classmethod</code>","text":"<pre><code>generate_code(\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n    custom_visitors: Optional[list[Path]] = None,\n) -&gt; str\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>@classmethod\ndef generate_code(\n    cls,\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n    custom_visitors: Optional[list[Path]] = None,\n) -&gt; str:\n    if custom_visitors is None:\n        custom_visitors = []\n    custom_visitors.append(Path(__file__).parent / \"security_schema_visitor.py\")\n\n    with patch_get_parameter_type():\n        generate_code(\n            input_name=\"openapi.json\",\n            input_text=input_text,\n            encoding=\"utf-8\",\n            output_dir=output_dir,\n            template_dir=cls._get_template_dir(),\n            disable_timestamp=disable_timestamp,\n            custom_visitors=custom_visitors,\n        )\n        # Use unique file name for main.py\n        main_name = f\"main_{output_dir.name}\"\n        main_path = output_dir / f\"{main_name}.py\"\n        shutil.move(output_dir / \"main.py\", main_path)\n\n        # Change \"from models import\" to \"from models_unique_name import\"\n        with open(main_path) as f:  # noqa: PTH123\n            main_py_code = f.read()\n        main_py_code = main_py_code.replace(\n            \"from .models import\", f\"from models_{output_dir.name} import\"\n        )\n        with open(main_path, \"w\") as f:  # noqa: PTH123\n            f.write(main_py_code)\n\n        # Use unique file name for models.py\n        models_name = f\"models_{output_dir.name}\"\n        models_path = output_dir / f\"{models_name}.py\"\n        shutil.move(output_dir / \"models.py\", models_path)\n\n        return main_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.get","title":"get","text":"<pre><code>get(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def get(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"get\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.post","title":"post","text":"<pre><code>post(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def post(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"post\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.put","title":"put","text":"<pre><code>put(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def put(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"put\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.register_for_execution","title":"register_for_execution","text":"<pre><code>register_for_execution(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def register_for_execution(self, agent: \"ConversableAgent\") -&gt; None:\n    for f in self.registered_funcs:\n        agent.register_for_execution()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.register_for_llm","title":"register_for_llm","text":"<pre><code>register_for_llm(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def register_for_llm(self, agent: \"ConversableAgent\") -&gt; None:\n    with add_to_globals(self.globals):\n        for f in self.registered_funcs:\n            agent.register_for_llm()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.set_globals","title":"set_globals","text":"<pre><code>set_globals(main: ModuleType, suffix: str) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def set_globals(self, main: ModuleType, suffix: str) -&gt; None:\n    xs = {k: v for k, v in main.__dict__.items() if not k.startswith(\"__\")}\n    self.globals = {\n        k: v\n        for k, v in xs.items()\n        if hasattr(v, \"__module__\")\n        and v.__module__ in [f\"models_{suffix}\", \"typing\"]\n    }\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/OpenAPI/#fastagency.api.openapi.client.OpenAPI.set_security_params","title":"set_security_params","text":"<pre><code>set_security_params(\n    security_params: BaseSecurityParameters,\n    name: Optional[str] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def set_security_params(\n    self, security_params: BaseSecurityParameters, name: Optional[str] = None\n) -&gt; None:\n    if name is not None:\n        security = self.security.get(name)\n        if security is None:\n            raise ValueError(f\"Security is not set for '{name}'\")\n\n        if not security.accept(security_params):\n            raise ValueError(\n                f\"Security parameters {security_params} do not match security {security}\"\n            )\n\n    self.security_params[name] = security_params\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/client/add_to_globals/","title":"add_to_globals","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/client/add_to_globals/#fastagency.api.openapi.client.add_to_globals","title":"fastagency.api.openapi.client.add_to_globals","text":"<pre><code>add_to_globals(\n    new_globals: dict[str, Any]\n) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>@contextmanager\ndef add_to_globals(new_globals: dict[str, Any]) -&gt; Iterator[None]:\n    old_globals: dict[str, Any] = {}\n    try:\n        for key, value in new_globals.items():\n            if key in globals():\n                old_globals[key] = globals()[key]\n            globals()[key] = value\n        yield\n    finally:\n        for key, value in old_globals.items():\n            globals()[key] = value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/fastapi_code_generator_helpers/ArgumentWithDescription/","title":"ArgumentWithDescription","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/fastapi_code_generator_helpers/ArgumentWithDescription/#fastagency.api.openapi.fastapi_code_generator_helpers.ArgumentWithDescription","title":"fastagency.api.openapi.fastapi_code_generator_helpers.ArgumentWithDescription","text":"<p>               Bases: <code>Argument</code></p>","boost":0.5},{"location":"api/fastagency/api/openapi/fastapi_code_generator_helpers/ArgumentWithDescription/#fastagency.api.openapi.fastapi_code_generator_helpers.ArgumentWithDescription.argument","title":"argument  <code>cached</code> <code>property</code>","text":"<pre><code>argument: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/fastapi_code_generator_helpers/ArgumentWithDescription/#fastagency.api.openapi.fastapi_code_generator_helpers.ArgumentWithDescription.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/fastapi_code_generator_helpers/patch_get_parameter_type/","title":"patch_get_parameter_type","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/fastapi_code_generator_helpers/patch_get_parameter_type/#fastagency.api.openapi.fastapi_code_generator_helpers.patch_get_parameter_type","title":"fastagency.api.openapi.fastapi_code_generator_helpers.patch_get_parameter_type","text":"<pre><code>patch_get_parameter_type() -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/api/openapi/fastapi_code_generator_helpers.py</code> <pre><code>@contextmanager\ndef patch_get_parameter_type() -&gt; Iterator[None]:\n    original_get_parameter_type = OpenAPIParser.get_parameter_type\n\n    def get_parameter_type(\n        self: OpenAPIParser,\n        parameters: Union[ReferenceObject, ParameterObject],\n        snake_case: bool,\n        path: list[str],\n    ) -&gt; Optional[Argument]:\n        # get the original argument\n        argument = original_get_parameter_type(self, parameters, snake_case, path)\n\n        # add description to the argument\n        parameters = self.resolve_object(parameters, ParameterObject)\n        argument_with_description = ArgumentWithDescription(\n            description=parameters.description, **argument.model_dump()\n        )\n        return argument_with_description\n\n    OpenAPIParser.get_parameter_type = get_parameter_type\n\n    try:\n        yield\n    finally:\n        OpenAPIParser.get_parameter_type = original_get_parameter_type\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/","title":"APIKeyCookie","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie","title":"fastagency.api.openapi.security.APIKeyCookie","text":"<p>               Bases: <code>BaseSecurity</code></p> <p>API Key Cookie security class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.in_value","title":"in_value  <code>class-attribute</code>","text":"<pre><code>in_value: Literal['cookie'] = 'cookie'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.type","title":"type  <code>class-attribute</code>","text":"<pre><code>type: Literal['apiKey'] = 'apiKey'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.Parameters","title":"Parameters","text":"<p>               Bases: <code>BaseModel</code></p> <p>API Key Cookie security parameters class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.Parameters.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.Parameters.apply","title":"apply","text":"<pre><code>apply(\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def apply(\n    self,\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None:\n    api_key_cookie: APIKeyCookie = security  # type: ignore[assignment]\n\n    if \"cookies\" not in body_dict:\n        body_dict[\"cookies\"] = {}\n\n    body_dict[\"cookies\"][api_key_cookie.name] = self.value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.Parameters.get_security_class","title":"get_security_class","text":"<pre><code>get_security_class() -&gt; type[BaseSecurity]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def get_security_class(self) -&gt; type[BaseSecurity]:\n    return APIKeyCookie\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.accept","title":"accept","text":"<pre><code>accept(security_params: BaseSecurityParameters) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def accept(self, security_params: \"BaseSecurityParameters\") -&gt; bool:\n    return isinstance(self, security_params.get_security_class())\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.get_security_class","title":"get_security_class  <code>classmethod</code>","text":"<pre><code>get_security_class(\n    type: str, in_value: str\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef get_security_class(cls, type: str, in_value: str) -&gt; Optional[str]:\n    sub_classes = cls.__subclasses__()\n\n    for sub_class in sub_classes:\n        if sub_class.is_supported(type, in_value):\n            return sub_class.__name__\n    else:\n        logger.error(\n            f\"Unsupported type '{type}' and in_value '{in_value}' combination\"\n        )\n        return None\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyCookie/#fastagency.api.openapi.security.APIKeyCookie.is_supported","title":"is_supported  <code>classmethod</code>","text":"<pre><code>is_supported(type: str, in_value: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef is_supported(cls, type: str, in_value: str) -&gt; bool:\n    return type == cls.type and in_value == cls.in_value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/","title":"APIKeyHeader","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader","title":"fastagency.api.openapi.security.APIKeyHeader","text":"<p>               Bases: <code>BaseSecurity</code></p> <p>API Key Header security class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.in_value","title":"in_value  <code>class-attribute</code>","text":"<pre><code>in_value: Literal['header'] = 'header'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.type","title":"type  <code>class-attribute</code>","text":"<pre><code>type: Literal['apiKey'] = 'apiKey'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.Parameters","title":"Parameters","text":"<p>               Bases: <code>BaseModel</code></p> <p>API Key Header security parameters class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.Parameters.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.Parameters.apply","title":"apply","text":"<pre><code>apply(\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def apply(\n    self,\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None:\n    api_key_header: APIKeyHeader = security  # type: ignore[assignment]\n\n    if \"headers\" not in body_dict:\n        body_dict[\"headers\"] = {}\n\n    body_dict[\"headers\"][api_key_header.name] = self.value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.Parameters.get_security_class","title":"get_security_class","text":"<pre><code>get_security_class() -&gt; type[BaseSecurity]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def get_security_class(self) -&gt; type[BaseSecurity]:\n    return APIKeyHeader\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.accept","title":"accept","text":"<pre><code>accept(security_params: BaseSecurityParameters) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def accept(self, security_params: \"BaseSecurityParameters\") -&gt; bool:\n    return isinstance(self, security_params.get_security_class())\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.get_security_class","title":"get_security_class  <code>classmethod</code>","text":"<pre><code>get_security_class(\n    type: str, in_value: str\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef get_security_class(cls, type: str, in_value: str) -&gt; Optional[str]:\n    sub_classes = cls.__subclasses__()\n\n    for sub_class in sub_classes:\n        if sub_class.is_supported(type, in_value):\n            return sub_class.__name__\n    else:\n        logger.error(\n            f\"Unsupported type '{type}' and in_value '{in_value}' combination\"\n        )\n        return None\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyHeader/#fastagency.api.openapi.security.APIKeyHeader.is_supported","title":"is_supported  <code>classmethod</code>","text":"<pre><code>is_supported(type: str, in_value: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef is_supported(cls, type: str, in_value: str) -&gt; bool:\n    return type == cls.type and in_value == cls.in_value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/","title":"APIKeyQuery","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery","title":"fastagency.api.openapi.security.APIKeyQuery","text":"<p>               Bases: <code>BaseSecurity</code></p> <p>API Key Query security class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.in_value","title":"in_value  <code>class-attribute</code>","text":"<pre><code>in_value: Literal['query'] = 'query'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.type","title":"type  <code>class-attribute</code>","text":"<pre><code>type: Literal['apiKey'] = 'apiKey'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.Parameters","title":"Parameters","text":"<p>               Bases: <code>BaseModel</code></p> <p>API Key Query security parameters class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.Parameters.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.Parameters.apply","title":"apply","text":"<pre><code>apply(\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def apply(\n    self,\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None:\n    api_key_query: APIKeyQuery = security  # type: ignore[assignment]\n\n    q_params[api_key_query.name] = self.value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.Parameters.get_security_class","title":"get_security_class","text":"<pre><code>get_security_class() -&gt; type[BaseSecurity]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def get_security_class(self) -&gt; type[BaseSecurity]:\n    return APIKeyQuery\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.accept","title":"accept","text":"<pre><code>accept(security_params: BaseSecurityParameters) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def accept(self, security_params: \"BaseSecurityParameters\") -&gt; bool:\n    return isinstance(self, security_params.get_security_class())\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.get_security_class","title":"get_security_class  <code>classmethod</code>","text":"<pre><code>get_security_class(\n    type: str, in_value: str\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef get_security_class(cls, type: str, in_value: str) -&gt; Optional[str]:\n    sub_classes = cls.__subclasses__()\n\n    for sub_class in sub_classes:\n        if sub_class.is_supported(type, in_value):\n            return sub_class.__name__\n    else:\n        logger.error(\n            f\"Unsupported type '{type}' and in_value '{in_value}' combination\"\n        )\n        return None\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/APIKeyQuery/#fastagency.api.openapi.security.APIKeyQuery.is_supported","title":"is_supported  <code>classmethod</code>","text":"<pre><code>is_supported(type: str, in_value: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef is_supported(cls, type: str, in_value: str) -&gt; bool:\n    return type == cls.type and in_value == cls.in_value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/","title":"BaseSecurity","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity","title":"fastagency.api.openapi.security.BaseSecurity","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for security classes.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity.in_value","title":"in_value  <code>class-attribute</code>","text":"<pre><code>in_value: Literal[\n    \"header\", \"query\", \"cookie\", \"bearer\", \"basic\", \"tls\"\n]\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity.type","title":"type  <code>class-attribute</code>","text":"<pre><code>type: Literal[\n    \"apiKey\", \"http\", \"mutualTLS\", \"oauth2\", \"openIdConnect\"\n]\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity.accept","title":"accept","text":"<pre><code>accept(security_params: BaseSecurityParameters) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def accept(self, security_params: \"BaseSecurityParameters\") -&gt; bool:\n    return isinstance(self, security_params.get_security_class())\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity.get_security_class","title":"get_security_class  <code>classmethod</code>","text":"<pre><code>get_security_class(\n    type: str, in_value: str\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef get_security_class(cls, type: str, in_value: str) -&gt; Optional[str]:\n    sub_classes = cls.__subclasses__()\n\n    for sub_class in sub_classes:\n        if sub_class.is_supported(type, in_value):\n            return sub_class.__name__\n    else:\n        logger.error(\n            f\"Unsupported type '{type}' and in_value '{in_value}' combination\"\n        )\n        return None\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurity/#fastagency.api.openapi.security.BaseSecurity.is_supported","title":"is_supported  <code>classmethod</code>","text":"<pre><code>is_supported(type: str, in_value: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef is_supported(cls, type: str, in_value: str) -&gt; bool:\n    return type == cls.type and in_value == cls.in_value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurityParameters/","title":"BaseSecurityParameters","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurityParameters/#fastagency.api.openapi.security.BaseSecurityParameters","title":"fastagency.api.openapi.security.BaseSecurityParameters","text":"<p>               Bases: <code>Protocol</code></p> <p>Base class for security parameters.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurityParameters/#fastagency.api.openapi.security.BaseSecurityParameters.apply","title":"apply","text":"<pre><code>apply(\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def apply(\n    self,\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/BaseSecurityParameters/#fastagency.api.openapi.security.BaseSecurityParameters.get_security_class","title":"get_security_class","text":"<pre><code>get_security_class() -&gt; type[BaseSecurity]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def get_security_class(self) -&gt; type[BaseSecurity]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/","title":"HTTPBearer","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer","title":"fastagency.api.openapi.security.HTTPBearer","text":"<p>               Bases: <code>BaseSecurity</code></p> <p>HTTP Bearer security class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.in_value","title":"in_value  <code>class-attribute</code>","text":"<pre><code>in_value: Literal['bearer'] = 'bearer'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.type","title":"type  <code>class-attribute</code>","text":"<pre><code>type: Literal['http'] = 'http'\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.Parameters","title":"Parameters","text":"<p>               Bases: <code>BaseModel</code></p> <p>HTTP Bearer security parameters class.</p>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.Parameters.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.Parameters.apply","title":"apply","text":"<pre><code>apply(\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def apply(\n    self,\n    q_params: dict[str, Any],\n    body_dict: dict[str, Any],\n    security: BaseSecurity,\n) -&gt; None:\n    if \"headers\" not in body_dict:\n        body_dict[\"headers\"] = {}\n\n    body_dict[\"headers\"][\"Authorization\"] = f\"Bearer {self.value}\"\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.Parameters.get_security_class","title":"get_security_class","text":"<pre><code>get_security_class() -&gt; type[BaseSecurity]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def get_security_class(self) -&gt; type[BaseSecurity]:\n    return HTTPBearer\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.accept","title":"accept","text":"<pre><code>accept(security_params: BaseSecurityParameters) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>def accept(self, security_params: \"BaseSecurityParameters\") -&gt; bool:\n    return isinstance(self, security_params.get_security_class())\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.get_security_class","title":"get_security_class  <code>classmethod</code>","text":"<pre><code>get_security_class(\n    type: str, in_value: str\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef get_security_class(cls, type: str, in_value: str) -&gt; Optional[str]:\n    sub_classes = cls.__subclasses__()\n\n    for sub_class in sub_classes:\n        if sub_class.is_supported(type, in_value):\n            return sub_class.__name__\n    else:\n        logger.error(\n            f\"Unsupported type '{type}' and in_value '{in_value}' combination\"\n        )\n        return None\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security/HTTPBearer/#fastagency.api.openapi.security.HTTPBearer.is_supported","title":"is_supported  <code>classmethod</code>","text":"<pre><code>is_supported(type: str, in_value: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/api/openapi/security.py</code> <pre><code>@classmethod\ndef is_supported(cls, type: str, in_value: str) -&gt; bool:\n    return type == cls.type and in_value == cls.in_value\n</code></pre>","boost":0.5},{"location":"api/fastagency/api/openapi/security_schema_visitor/custom_visitor/","title":"custom_visitor","text":"","boost":0.5},{"location":"api/fastagency/api/openapi/security_schema_visitor/custom_visitor/#fastagency.api.openapi.security_schema_visitor.custom_visitor","title":"fastagency.api.openapi.security_schema_visitor.custom_visitor","text":"<pre><code>custom_visitor(\n    parser: OpenAPIParser, model_path: Path\n) -&gt; dict[str, object]\n</code></pre> Source code in <code>fastagency/api/openapi/security_schema_visitor.py</code> <pre><code>def custom_visitor(parser: OpenAPIParser, model_path: Path) -&gt; dict[str, object]:\n    if \"securitySchemes\" not in parser.raw_obj[\"components\"]:\n        return {}\n    security_schemes = parser.raw_obj[\"components\"][\"securitySchemes\"]\n\n    # for k, v in security_schemes.items():\n    #     security_schemes[k][\"in_value\"] = security_schemes[k].pop(\"in\")\n\n    security_classes = []\n    security_parameters = {}\n    for k, v in security_schemes.items():\n        if \"in\" not in v:\n            in_value = v[\"scheme\"] if \"scheme\" in v and v[\"type\"] == \"http\" else None\n        else:\n            in_value = v[\"in\"]\n        security_class = BaseSecurity.get_security_class(\n            type=v[\"type\"], in_value=in_value\n        )\n        if security_class is None:\n            continue\n        security_classes.append(security_class)\n        name = v.get(\"name\", None)\n        security_parameters[k] = f'{security_class}(name=\"{name}\")'\n\n    return {\n        \"security_schemes\": security_schemes,\n        \"security_classes\": security_classes,\n        \"security_parameters\": security_parameters,\n    }\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/FastAgency/","title":"FastAgency","text":"","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency","title":"fastagency.app.FastAgency","text":"<pre><code>FastAgency(wf: Workflows, ui: UI)\n</code></pre> <p>Initialize the FastAgency object.</p> PARAMETER DESCRIPTION <code>wf</code> <p>The workflows object to use</p> <p> TYPE: <code>Workflows</code> </p> <code>ui</code> <p>The UI object to use</p> <p> TYPE: <code>UI</code> </p> Source code in <code>fastagency/app.py</code> <pre><code>def __init__(self, wf: Workflows, ui: UI) -&gt; None:\n    \"\"\"Initialize the FastAgency object.\n\n    Args:\n        wf (Workflows): The workflows object to use\n        ui (UI): The UI object to use\n    \"\"\"\n    self._wf = wf\n    self._ui = ui\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency.ui","title":"ui  <code>property</code>","text":"<pre><code>ui: UI\n</code></pre> <p>Return the UI object.</p>","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency.wf","title":"wf  <code>property</code>","text":"<pre><code>wf: Workflows\n</code></pre> <p>Return the workflows object.</p>","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency.create","title":"create","text":"<pre><code>create(import_string: str) -&gt; Generator[None, None, None]\n</code></pre> <p>Create the FastAgency.</p> Source code in <code>fastagency/app.py</code> <pre><code>@contextmanager\ndef create(self, import_string: str) -&gt; Generator[None, None, None]:\n    \"\"\"Create the FastAgency.\"\"\"\n    with self._ui.create(app=self, import_string=import_string):\n        yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/app/FastAgency/#fastagency.app.FastAgency.start","title":"start","text":"<pre><code>start(\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>Start the FastAgency.</p> Source code in <code>fastagency/app.py</code> <pre><code>def start(\n    self,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Start the FastAgency.\"\"\"\n    self.ui.start(\n        app=self,\n        import_string=import_string,\n        name=name,\n        initial_message=initial_message,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/","title":"AskingMessage","text":"","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage","title":"fastagency.base.AskingMessage  <code>dataclass</code>","text":"<pre><code>AskingMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/AskingMessage/#fastagency.base.AskingMessage.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/","title":"FunctionCallExecution","text":"","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution","title":"fastagency.base.FunctionCallExecution  <code>dataclass</code>","text":"<pre><code>FunctionCallExecution(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    function_name: Optional[str] = None,\n    call_id: Optional[str] = None,\n    retval: Any = None,\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.call_id","title":"call_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>call_id: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.function_name","title":"function_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function_name: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.retval","title":"retval  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>retval: Any = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/FunctionCallExecution/#fastagency.base.FunctionCallExecution.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessage/","title":"IOMessage","text":"","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage","title":"fastagency.base.IOMessage  <code>dataclass</code>","text":"<pre><code>IOMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p>","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessage/#fastagency.base.IOMessage.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/","title":"IOMessageVisitor","text":"","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor","title":"fastagency.base.IOMessageVisitor","text":"<p>               Bases: <code>ABC</code></p>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit","title":"visit","text":"<pre><code>visit(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit(self, message: IOMessage) -&gt; Optional[str]:\n    method_name = f\"visit_{message.type}\"\n    method = getattr(self, method_name, self.visit_default)\n    return method(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_default","title":"visit_default  <code>abstractmethod</code>","text":"<pre><code>visit_default(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@abstractmethod\ndef visit_default(self, message: IOMessage) -&gt; Optional[str]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_function_call_execution","title":"visit_function_call_execution","text":"<pre><code>visit_function_call_execution(\n    message: FunctionCallExecution,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_function_call_execution(\n    self, message: FunctionCallExecution\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_multiple_choice","title":"visit_multiple_choice","text":"<pre><code>visit_multiple_choice(\n    message: MultipleChoice,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_multiple_choice(self, message: MultipleChoice) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_suggested_function_call","title":"visit_suggested_function_call","text":"<pre><code>visit_suggested_function_call(\n    message: SuggestedFunctionCall,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_suggested_function_call(\n    self, message: SuggestedFunctionCall\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_system_message","title":"visit_system_message","text":"<pre><code>visit_system_message(\n    message: SystemMessage,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_system_message(self, message: SystemMessage) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_text_input","title":"visit_text_input","text":"<pre><code>visit_text_input(message: TextInput) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_text_input(self, message: TextInput) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_text_message","title":"visit_text_message","text":"<pre><code>visit_text_message(message: TextMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_text_message(self, message: TextMessage) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/IOMessageVisitor/#fastagency.base.IOMessageVisitor.visit_workflow_completed","title":"visit_workflow_completed","text":"<pre><code>visit_workflow_completed(\n    message: WorkflowCompleted,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_workflow_completed(self, message: WorkflowCompleted) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/","title":"MultipleChoice","text":"","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice","title":"fastagency.base.MultipleChoice  <code>dataclass</code>","text":"<pre><code>MultipleChoice(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    prompt: Optional[str] = None,\n    choices: list[str] = list(),\n    default: Optional[str] = None,\n    single: bool = True,\n)\n</code></pre> <p>               Bases: <code>AskingMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.choices","title":"choices  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>choices: list[str] = field(default_factory=list)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.prompt","title":"prompt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.single","title":"single  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>single: bool = True\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/MultipleChoice/#fastagency.base.MultipleChoice.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Runnable/","title":"Runnable","text":"","boost":0.5},{"location":"api/fastagency/base/Runnable/#fastagency.base.Runnable","title":"fastagency.base.Runnable","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/base/Runnable/#fastagency.base.Runnable.ui","title":"ui  <code>property</code>","text":"<pre><code>ui: UI\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Runnable/#fastagency.base.Runnable.wf","title":"wf  <code>property</code>","text":"<pre><code>wf: Workflows\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Runnable/#fastagency.base.Runnable.create","title":"create","text":"<pre><code>create(import_string: str) -&gt; Generator[None, None, None]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@contextmanager\ndef create(self, import_string: str) -&gt; Generator[None, None, None]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Runnable/#fastagency.base.Runnable.start","title":"start","text":"<pre><code>start(\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def start(\n    self,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/","title":"SuggestedFunctionCall","text":"","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall","title":"fastagency.base.SuggestedFunctionCall  <code>dataclass</code>","text":"<pre><code>SuggestedFunctionCall(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    function_name: Optional[str] = None,\n    call_id: Optional[str] = None,\n    arguments: dict[str, Any] = dict(),\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.arguments","title":"arguments  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>arguments: dict[str, Any] = field(default_factory=dict)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.call_id","title":"call_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>call_id: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.function_name","title":"function_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function_name: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SuggestedFunctionCall/#fastagency.base.SuggestedFunctionCall.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/","title":"SystemMessage","text":"","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage","title":"fastagency.base.SystemMessage  <code>dataclass</code>","text":"<pre><code>SystemMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    message: dict[str, Any] = dict(),\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.message","title":"message  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>message: dict[str, Any] = field(default_factory=dict)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/SystemMessage/#fastagency.base.SystemMessage.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/","title":"TextInput","text":"","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput","title":"fastagency.base.TextInput  <code>dataclass</code>","text":"<pre><code>TextInput(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    prompt: Optional[str] = None,\n    suggestions: list[str] = list(),\n    password: bool = False,\n)\n</code></pre> <p>               Bases: <code>AskingMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.password","title":"password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.prompt","title":"prompt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.suggestions","title":"suggestions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>suggestions: list[str] = field(default_factory=list)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextInput/#fastagency.base.TextInput.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/","title":"TextMessage","text":"","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage","title":"fastagency.base.TextMessage  <code>dataclass</code>","text":"<pre><code>TextMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    body: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.body","title":"body  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>body: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/TextMessage/#fastagency.base.TextMessage.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/UI/","title":"UI","text":"","boost":0.5},{"location":"api/fastagency/base/UI/#fastagency.base.UI","title":"fastagency.base.UI","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/base/UI/#fastagency.base.UI.create","title":"create","text":"<pre><code>create(app: Runnable, import_string: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@contextmanager\ndef create(self, app: \"Runnable\", import_string: str) -&gt; Iterator[None]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/UI/#fastagency.base.UI.create_subconversation","title":"create_subconversation","text":"<pre><code>create_subconversation() -&gt; UI\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def create_subconversation(self) -&gt; \"UI\": ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/UI/#fastagency.base.UI.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/UI/#fastagency.base.UI.start","title":"start","text":"<pre><code>start(\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def start(\n    self,\n    app: \"Runnable\",\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/","title":"WorkflowCompleted","text":"","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted","title":"fastagency.base.WorkflowCompleted  <code>dataclass</code>","text":"<pre><code>WorkflowCompleted(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    auto_reply: bool = False,\n    result: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>IOMessage</code></p>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.result","title":"result  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>result: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.type","title":"type  <code>property</code>","text":"<pre><code>type: MessageType\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    type: Optional[MessageType] = None, **kwargs: Any\n) -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>@staticmethod\ndef create(type: Optional[MessageType] = None, **kwargs: Any) -&gt; \"IOMessage\":\n    cls = IOMessage._get_message_class(type)\n\n    content = kwargs.pop(\"content\", {})\n    kwargs.update(content)\n\n    return cls(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/WorkflowCompleted/#fastagency.base.WorkflowCompleted.model_dump","title":"model_dump","text":"<pre><code>model_dump() -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def model_dump(self) -&gt; dict[str, Any]:\n    params_names = IOMessage._get_parameters_names()\n    d = asdict(self)\n    content = {k: v for k, v in d.items() if k not in params_names}\n    retval = {k: v for k, v in d.items() if k in params_names}\n    retval[\"content\"] = content\n    retval[\"type\"] = self.type\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Workflows/","title":"Workflows","text":"","boost":0.5},{"location":"api/fastagency/base/Workflows/#fastagency.base.Workflows","title":"fastagency.base.Workflows","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/base/Workflows/#fastagency.base.Workflows.names","title":"names  <code>property</code>","text":"<pre><code>names: list[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Workflows/#fastagency.base.Workflows.get_description","title":"get_description","text":"<pre><code>get_description(name: str) -&gt; str\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def get_description(self, name: str) -&gt; str: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Workflows/#fastagency.base.Workflows.register","title":"register","text":"<pre><code>register(\n    name: str, description: str\n) -&gt; Callable[[Workflow], Workflow]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def register(\n    self, name: str, description: str\n) -&gt; Callable[[Workflow], Workflow]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/Workflows/#fastagency.base.Workflows.run","title":"run","text":"<pre><code>run(\n    name: str, session_id: str, ui: UI, initial_message: str\n) -&gt; str\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def run(self, name: str, session_id: str, ui: UI, initial_message: str) -&gt; str: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/base/run_workflow/","title":"run_workflow","text":"","boost":0.5},{"location":"api/fastagency/base/run_workflow/#fastagency.base.run_workflow","title":"fastagency.base.run_workflow","text":"<pre><code>run_workflow(\n    wf: Workflows,\n    ui: UI,\n    name: Optional[str],\n    initial_message: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>Run a workflow.</p> PARAMETER DESCRIPTION <code>wf</code> <p>The workflows object to use.</p> <p> TYPE: <code>Workflows</code> </p> <code>ui</code> <p>The UI object to use.</p> <p> TYPE: <code>UI</code> </p> <code>name</code> <p>The name of the workflow to run. If not provided, the default workflow will be run.</p> <p> TYPE: <code>Optional[str]</code> </p> <code>initial_message</code> <p>The initial message to send to the workflow. If not provided, a default message will be sent. Defaults to None.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/base.py</code> <pre><code>def run_workflow(\n    wf: Workflows,\n    ui: UI,\n    name: Optional[str],\n    initial_message: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Run a workflow.\n\n    Args:\n        wf (Workflows): The workflows object to use.\n        ui (UI): The UI object to use.\n        name (Optional[str]): The name of the workflow to run. If not provided, the default workflow will be run.\n        initial_message (Optional[str], optional): The initial message to send to the workflow. If not provided, a default message will be sent. Defaults to None.\n    \"\"\"\n    while True:\n        name = wf.names[0] if name is None else name\n        description = wf.get_description(name)\n\n        if initial_message is None:\n            initial_message = ui.process_message(\n                TextInput(\n                    sender=\"FastAgency\",\n                    recipient=\"user\",\n                    prompt=(\n                        f\"Starting a new workflow '{name}' with the following description:\"\n                        + \"\\n\\n\"\n                        + f\"{description}\"\n                        + \"\\n\\nPlease enter an initial message\"\n                    ),\n                )\n            )\n        else:\n            ui.process_message(\n                SystemMessage(\n                    sender=\"FastAgency\",\n                    recipient=\"user\",\n                    message={\n                        \"body\": (\n                            f\"Starting a new workflow '{name}' with the following description:\"\n                            + \"\\n\\n\"\n                            + textwrap.indent(description, prefix=\" \" * 2)\n                            + \"\\n\\nand using the following initial message:\"\n                            + textwrap.indent(initial_message, prefix=\" \" * 2)\n                        )\n                    },\n                )\n            )\n\n        result = wf.run(\n            name=name,\n            session_id=\"session_id\",\n            ui=ui.create_subconversation(),\n            initial_message=\"Hi!\" if initial_message is None else initial_message,\n        )\n\n        ui.process_message(\n            WorkflowCompleted(\n                sender=\"workflow\",\n                recipient=\"user\",\n                result=result,\n            )\n        )\n\n        initial_message = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/cli/callback/","title":"callback","text":"","boost":0.5},{"location":"api/fastagency/cli/cli/callback/#fastagency.cli.cli.callback","title":"fastagency.cli.cli.callback","text":"<pre><code>callback(version: Optional[bool] = None) -&gt; None\n</code></pre> <p>FastAgency CLI - The [bold]fastapi[/bold] command line app. \ud83d\ude0e</p> <p>Manage your [bold]FastAgency[/bold] projects, run your FastAgency apps, and more.</p> <p>Read more in the docs: [link]https://fastagency.ai/latest/[/link].</p> Source code in <code>fastagency/cli/cli.py</code> <pre><code>@app.callback()\ndef callback(\n    version: Annotated[\n        Optional[bool],\n        typer.Option(\n            \"--version\", help=\"Show the version and exit.\", callback=version_callback\n        ),\n    ] = None,\n) -&gt; None:\n    \"\"\"FastAgency CLI - The [bold]fastapi[/bold] command line app. \ud83d\ude0e\n\n    Manage your [bold]FastAgency[/bold] projects, run your FastAgency apps, and more.\n\n    Read more in the docs: [link]https://fastagency.ai/latest/[/link].\n    \"\"\"  # noqa: D415\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/cli/dev/","title":"dev","text":"","boost":0.5},{"location":"api/fastagency/cli/cli/dev/#fastagency.cli.cli.dev","title":"fastagency.cli.cli.dev","text":"<pre><code>dev(\n    path: Optional[Path] = None,\n    *,\n    app: Optional[str] = None,\n    workflow: Optional[str] = None,\n    initial_message: Optional[str] = None\n) -&gt; None\n</code></pre> Source code in <code>fastagency/cli/cli.py</code> <pre><code>@app.command(**_get_help_messages(False))  # type: ignore[arg-type]\ndef dev(\n    path: Annotated[\n        Optional[Path],\n        typer.Argument(\n            help=\"A path to a Python file or package directory (with [blue]__init__.py[/blue] files) containing a [bold]FastAgency[/bold] app. If not provided, a default set of paths will be tried.\"\n        ),\n    ] = None,\n    *,\n    app: Annotated[\n        Optional[str],\n        typer.Option(\n            help=\"The name of the variable that contains the [bold][/bold] app in the imported module or package. If not provided, it is detected automatically.\"\n        ),\n    ] = None,\n    workflow: Annotated[\n        Optional[str],\n        typer.Option(\n            \"--workflow\",\n            \"-w\",\n            help=\"The name of the workflow to run. If not provided, the default workflow will be run.\",\n        ),\n    ] = None,\n    initial_message: Annotated[\n        Optional[str],\n        typer.Option(\n            \"--initial_message\",\n            \"-i\",\n            help=\"The initial message to send to the workflow. If not provided, a default message will be sent.\",\n        ),\n    ] = None,\n) -&gt; None:\n    dev_mode = True\n    _run_app(\n        path=path,\n        app=app,\n        workflow=workflow,\n        initial_message=initial_message,\n        dev_mode=dev_mode,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/cli/main/","title":"main","text":"","boost":0.5},{"location":"api/fastagency/cli/cli/main/#fastagency.cli.cli.main","title":"fastagency.cli.cli.main","text":"<pre><code>main() -&gt; None\n</code></pre> Source code in <code>fastagency/cli/cli.py</code> <pre><code>def main() -&gt; None:\n    app()\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/cli/run/","title":"run","text":"","boost":0.5},{"location":"api/fastagency/cli/cli/run/#fastagency.cli.cli.run","title":"fastagency.cli.cli.run","text":"<pre><code>run(\n    path: Optional[Path] = None,\n    *,\n    app: Optional[str] = None,\n    workflow: Optional[str] = None,\n    initial_message: Optional[str] = None\n) -&gt; None\n</code></pre> Source code in <code>fastagency/cli/cli.py</code> <pre><code>@app.command(**_get_help_messages(False))  # type: ignore[arg-type]\ndef run(\n    path: Annotated[\n        Optional[Path],\n        typer.Argument(\n            help=\"A path to a Python file or package directory (with [blue]__init__.py[/blue] files) containing a [bold]FastAgency[/bold] app. If not provided, a default set of paths will be tried.\"\n        ),\n    ] = None,\n    *,\n    app: Annotated[\n        Optional[str],\n        typer.Option(\n            help=\"The name of the variable that contains the [bold][/bold] app in the imported module or package. If not provided, it is detected automatically.\"\n        ),\n    ] = None,\n    workflow: Annotated[\n        Optional[str],\n        typer.Option(\n            \"--workflow\",\n            \"-w\",\n            help=\"The name of the workflow to run. If not provided, the default workflow will be run.\",\n        ),\n    ] = None,\n    initial_message: Annotated[\n        Optional[str],\n        typer.Option(\n            \"--initial_message\",\n            \"-i\",\n            help=\"The initial message to send to the workflow. If not provided, a default message will be sent.\",\n        ),\n    ] = None,\n) -&gt; None:\n    dev_mode = False\n    _run_app(\n        path=path,\n        app=app,\n        workflow=workflow,\n        initial_message=initial_message,\n        dev_mode=dev_mode,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/cli/version/","title":"version","text":"","boost":0.5},{"location":"api/fastagency/cli/cli/version/#fastagency.cli.cli.version","title":"fastagency.cli.cli.version","text":"<pre><code>version() -&gt; None\n</code></pre> Source code in <code>fastagency/cli/cli.py</code> <pre><code>@app.command(help=\"Display the version of FastAgency\")\ndef version() -&gt; None:\n    typer.echo(__version__)\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/cli/version_callback/","title":"version_callback","text":"","boost":0.5},{"location":"api/fastagency/cli/cli/version_callback/#fastagency.cli.cli.version_callback","title":"fastagency.cli.cli.version_callback","text":"<pre><code>version_callback(value: bool) -&gt; None\n</code></pre> Source code in <code>fastagency/cli/cli.py</code> <pre><code>def version_callback(value: bool) -&gt; None:\n    if value:\n        typer.echo(f\"{__version__}\")\n        raise typer.Exit()\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/ModuleData/","title":"ModuleData","text":"","boost":0.5},{"location":"api/fastagency/cli/discover/ModuleData/#fastagency.cli.discover.ModuleData","title":"fastagency.cli.discover.ModuleData  <code>dataclass</code>","text":"<pre><code>ModuleData(module_import_str: str, extra_sys_path: Path)\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/ModuleData/#fastagency.cli.discover.ModuleData.extra_sys_path","title":"extra_sys_path  <code>instance-attribute</code>","text":"<pre><code>extra_sys_path: Path\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/ModuleData/#fastagency.cli.discover.ModuleData.module_import_str","title":"module_import_str  <code>instance-attribute</code>","text":"<pre><code>module_import_str: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/get_app_name/","title":"get_app_name","text":"","boost":0.5},{"location":"api/fastagency/cli/discover/get_app_name/#fastagency.cli.discover.get_app_name","title":"fastagency.cli.discover.get_app_name","text":"<pre><code>get_app_name(\n    *,\n    mod_data: ModuleData,\n    app_name: Union[str, None] = None\n) -&gt; Tuple[str, FastAgency]\n</code></pre> Source code in <code>fastagency/cli/discover.py</code> <pre><code>def get_app_name(  # noqa: C901\n    *, mod_data: ModuleData, app_name: Union[str, None] = None\n) -&gt; \"Tuple[str, FastAgency]\":\n    try:\n        mod = importlib.import_module(mod_data.module_import_str)  # nosemgrep\n    except (ImportError, ValueError) as e:\n        logger.error(f\"Import error: {e}\")\n        logger.warning(\n            \"Ensure all the package directories have an [blue]__init__.py[/blue] file\"\n        )\n        raise\n    if not FastAgency:  # type: ignore[truthy-function]\n        raise FastAgencyCLIError(\n            \"Could not import FastAgency, try running 'pip install fastagency'\"\n        ) from None\n    object_names = dir(mod)\n    object_names_set = set(object_names)\n    if app_name:\n        if app_name not in object_names_set:\n            raise FastAgencyCLIError(\n                f\"Could not find app name {app_name} in {mod_data.module_import_str}\"\n            )\n        app = getattr(mod, app_name)\n        if not isinstance(app, FastAgency):\n            raise FastAgencyCLIError(\n                f\"The app name {app_name} in {mod_data.module_import_str} doesn't seem to be a FastAgency app\"\n            )\n        return app_name, app\n    for preferred_name in [\"app\", \"api\"]:\n        if preferred_name in object_names_set:\n            obj = getattr(mod, preferred_name)\n            if isinstance(obj, FastAgency):\n                return preferred_name, obj\n    for name in object_names:\n        obj = getattr(mod, name)\n        if isinstance(obj, FastAgency):\n            return name, obj\n    raise FastAgencyCLIError(\"Could not find FastAgency app in module, try using --app\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/get_default_path/","title":"get_default_path","text":"","boost":0.5},{"location":"api/fastagency/cli/discover/get_default_path/#fastagency.cli.discover.get_default_path","title":"fastagency.cli.discover.get_default_path","text":"<pre><code>get_default_path() -&gt; Path\n</code></pre> Source code in <code>fastagency/cli/discover.py</code> <pre><code>def get_default_path() -&gt; Path:\n    potential_paths = (\n        \"main.py\",\n        \"app.py\",\n        \"api.py\",\n        \"app/main.py\",\n        \"app/app.py\",\n        \"app/api.py\",\n    )\n\n    for full_path in potential_paths:\n        path = Path(full_path)\n        if path.is_file():\n            return path\n\n    raise FastAgencyCLIError(\n        \"Could not find a default file to run, please provide an explicit path\"\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/get_import_string/","title":"get_import_string","text":"","boost":0.5},{"location":"api/fastagency/cli/discover/get_import_string/#fastagency.cli.discover.get_import_string","title":"fastagency.cli.discover.get_import_string","text":"<pre><code>get_import_string(\n    *,\n    path: Union[Path, None] = None,\n    app_name: Union[str, None] = None\n) -&gt; tuple[str, FastAgency]\n</code></pre> Source code in <code>fastagency/cli/discover.py</code> <pre><code>def get_import_string(\n    *, path: Union[Path, None] = None, app_name: Union[str, None] = None\n) -&gt; tuple[str, FastAgency]:\n    if not path:\n        path = get_default_path()\n    logger.info(f\"Using path [blue]{path}[/blue]\")\n    logger.info(f\"Resolved absolute path {path.resolve()}\")\n    if not path.exists():\n        raise FastAgencyCLIError(f\"Path does not exist {path}\")\n    mod_data = get_module_data_from_path(path)\n    sys.path.insert(0, str(mod_data.extra_sys_path))\n    use_app_name, app = get_app_name(mod_data=mod_data, app_name=app_name)\n    import_example = Syntax(\n        f\"from {mod_data.module_import_str} import {use_app_name}\", \"python\"\n    )\n    import_panel = Padding(\n        Panel(\n            import_example,\n            title=\"[b green]Importable FastAgency app[/b green]\",\n            expand=False,\n            padding=(1, 2),\n        ),\n        1,\n    )\n    logger.info(\"Found importable FastAgency app\")\n    print(import_panel)\n    import_string = f\"{mod_data.module_import_str}:{use_app_name}\"\n    logger.info(f\"Using import string [b green]{import_string}[/b green]\")\n    return import_string, app\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/get_module_data_from_path/","title":"get_module_data_from_path","text":"","boost":0.5},{"location":"api/fastagency/cli/discover/get_module_data_from_path/#fastagency.cli.discover.get_module_data_from_path","title":"fastagency.cli.discover.get_module_data_from_path","text":"<pre><code>get_module_data_from_path(path: Path) -&gt; ModuleData\n</code></pre> Source code in <code>fastagency/cli/discover.py</code> <pre><code>def get_module_data_from_path(path: Path) -&gt; ModuleData:\n    logger.info(\n        \"Searching for package file structure from directories with [blue]__init__.py[/blue] files\"\n    )\n    use_path = path.resolve()\n    module_path = use_path\n    if use_path.is_file() and use_path.stem == \"__init__\":\n        module_path = use_path.parent\n    module_paths = [module_path]\n    extra_sys_path = module_path.parent\n    for parent in module_path.parents:\n        init_path = parent / \"__init__.py\"\n        if init_path.is_file():\n            module_paths.insert(0, parent)\n            extra_sys_path = parent.parent\n        else:\n            break\n    logger.info(f\"Importing from {extra_sys_path.resolve()}\")\n    root = module_paths[0]\n    name = f\"\ud83d\udc0d {root.name}\" if root.is_file() else f\"\ud83d\udcc1 {root.name}\"\n    root_tree = Tree(name)\n    if root.is_dir():\n        root_tree.add(\"[dim]\ud83d\udc0d __init__.py[/dim]\")\n    tree = root_tree\n    for sub_path in module_paths[1:]:\n        sub_name = (\n            f\"\ud83d\udc0d {sub_path.name}\" if sub_path.is_file() else f\"\ud83d\udcc1 {sub_path.name}\"\n        )\n        tree = tree.add(sub_name)\n        if sub_path.is_dir():\n            tree.add(\"[dim]\ud83d\udc0d __init__.py[/dim]\")\n    title = \"[b green]Python module file[/b green]\"\n    if len(module_paths) &gt; 1 or module_path.is_dir():\n        title = \"[b green]Python package file structure[/b green]\"\n    panel = Padding(\n        Panel(\n            root_tree,\n            title=title,\n            expand=False,\n            padding=(1, 2),\n        ),\n        1,\n    )\n    print(panel)\n    module_str = \".\".join(p.stem for p in module_paths)\n    logger.info(f\"Importing module [green]{module_str}[/green]\")\n    return ModuleData(\n        module_import_str=module_str,\n        extra_sys_path=extra_sys_path.resolve(),\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/discover/import_from_string/","title":"import_from_string","text":"","boost":0.5},{"location":"api/fastagency/cli/discover/import_from_string/#fastagency.cli.discover.import_from_string","title":"fastagency.cli.discover.import_from_string","text":"<pre><code>import_from_string(import_string: str) -&gt; FastAgency\n</code></pre> <p>Import a module and attribute from an import string.</p> <p>Import a module and an attribute from a string like 'file_name:app_name'. Checks if the file exists before attempting to import the module.</p> PARAMETER DESCRIPTION <code>import_string</code> <p>The import string in 'module_name:attribute_name' format.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>The attribute from the module.</p> <p> TYPE: <code>FastAgency</code> </p> RAISES DESCRIPTION <code>ImportError</code> <p>If the import string is not in the correct format or the module or attribute is not found.</p> <code>ValueError</code> <p>If the import string is not in 'module_name:attribute_name' format.</p> <code>ModuleNotFoundError</code> <p>If the module is not found.</p> <code>AttributeError</code> <p>If the attribute is not found in the module.</p> Source code in <code>fastagency/cli/discover.py</code> <pre><code>def import_from_string(import_string: str) -&gt; FastAgency:\n    \"\"\"Import a module and attribute from an import string.\n\n    Import a module and an attribute from a string like 'file_name:app_name'.\n    Checks if the file exists before attempting to import the module.\n\n    Args:\n        import_string (str): The import string in 'module_name:attribute_name' format.\n\n    Returns:\n        Any: The attribute from the module.\n\n    Raises:\n        ImportError: If the import string is not in the correct format or the module or attribute is not found.\n        ValueError: If the import string is not in 'module_name:attribute_name' format.\n        ModuleNotFoundError: If the module is not found.\n        AttributeError: If the attribute is not found in the module.\n\n    \"\"\"\n    try:\n        # Split the string into module and attribute parts\n        module_name, attribute_name = import_string.split(\":\")\n\n        # Ensure the module name points to a valid Python file before importing\n        module_path = f\"{module_name.replace('.', '/')}.py\"\n        if not Path(module_path).is_file():\n            raise ImportError(f\"The file for module '{module_name}' does not exist.\")\n\n        # Add the current directory to the Python path to allow imports from local files\n        sys.path.append(str(Path.cwd()))\n\n        # Import the module using importlib\n        module = importlib.import_module(module_name)  # nosemgrep\n\n        # Get the attribute (like 'app') from the module\n        attribute = getattr(module, attribute_name)\n        if not isinstance(attribute, FastAgency):\n            raise ImportError(\n                f\"The attribute '{attribute_name}' in module '{module_name}' is not a FastAgency app.\"\n            )\n\n        return attribute\n    except ValueError:\n        raise ImportError(\n            \"Import string must be in 'module_name:attribute_name' format.\"\n        ) from None\n    except ModuleNotFoundError:\n        raise ImportError(f\"Module '{module_name}' not found.\") from None\n    except AttributeError:\n        raise ImportError(\n            f\"Attribute '{attribute_name}' not found in module '{module_name}'.\"\n        ) from None\n</code></pre>","boost":0.5},{"location":"api/fastagency/cli/exceptions/FastAgencyCLIError/","title":"FastAgencyCLIError","text":"","boost":0.5},{"location":"api/fastagency/cli/exceptions/FastAgencyCLIError/#fastagency.cli.exceptions.FastAgencyCLIError","title":"fastagency.cli.exceptions.FastAgencyCLIError","text":"<p>               Bases: <code>Exception</code></p>","boost":0.5},{"location":"api/fastagency/cli/logging/setup_logging/","title":"setup_logging","text":"","boost":0.5},{"location":"api/fastagency/cli/logging/setup_logging/#fastagency.cli.logging.setup_logging","title":"fastagency.cli.logging.setup_logging","text":"<pre><code>setup_logging(\n    terminal_width: Union[int, None] = None\n) -&gt; None\n</code></pre> Source code in <code>fastagency/cli/logging.py</code> <pre><code>def setup_logging(terminal_width: Union[int, None] = None) -&gt; None:\n    logger = logging.getLogger(\"fastapi_cli\")\n    console = Console(width=terminal_width) if terminal_width else None\n    rich_handler = RichHandler(\n        show_time=False,\n        rich_tracebacks=True,\n        tracebacks_show_locals=True,\n        markup=True,\n        show_path=False,\n        console=console,\n    )\n    rich_handler.setFormatter(logging.Formatter(\"%(message)s\"))\n    logger.addHandler(rich_handler)\n\n    logger.setLevel(logging.INFO)\n    logger.propagate = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/logging/get_logger/","title":"get_logger","text":"","boost":0.5},{"location":"api/fastagency/logging/get_logger/#fastagency.logging.get_logger","title":"fastagency.logging.get_logger","text":"<pre><code>get_logger(\n    name: str,\n    *,\n    level: int = logging.INFO,\n    use_timestamp: bool = False\n) -&gt; Logger\n</code></pre> <p>Return a logger with the specified name.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the logger</p> <p> TYPE: <code>str</code> </p> <code>level</code> <p>The level of the logger</p> <p> TYPE: <code>int</code> DEFAULT: <code>INFO</code> </p> <code>use_timestamp</code> <p>Whether to use a timestamp in the log messages</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>fastagency/logging.py</code> <pre><code>def get_logger(\n    name: str, *, level: int = logging.INFO, use_timestamp: bool = False\n) -&gt; logging.Logger:\n    \"\"\"Return a logger with the specified name.\n\n    Args:\n        name (str): The name of the logger\n        level (int): The level of the logger\n        use_timestamp (bool): Whether to use a timestamp in the log messages\n    \"\"\"\n    # Get the logger\n    logger = logging.getLogger(__name__)\n    logger.setLevel(level)\n\n    # Check if the logger already has handlers\n    if not logger.handlers:\n        # Create a stream handler\n        handler = logging.StreamHandler()\n        handler.setLevel(level)\n\n        # Create a formatter and set it for the handler\n        formatter = logging.Formatter(\n            f\"{'(asctime)s' if use_timestamp else ''} [%(levelname)s] %(message)s\"\n        )\n        handler.setFormatter(formatter)\n\n        # Add the handler to the logger\n        logger.addHandler(handler)\n\n    return logger\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/","title":"AutoGenWorkflows","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/#fastagency.runtime.autogen.AutoGenWorkflows","title":"fastagency.runtime.autogen.AutoGenWorkflows","text":"<pre><code>AutoGenWorkflows()\n</code></pre> <p>               Bases: <code>Workflows</code></p> <p>Initialize the workflows.</p> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the workflows.\"\"\"\n    self._workflows: dict[str, tuple[Callable[[UI, str, str], str], str]] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/#fastagency.runtime.autogen.AutoGenWorkflows.names","title":"names  <code>property</code>","text":"<pre><code>names: list[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/#fastagency.runtime.autogen.AutoGenWorkflows.get_description","title":"get_description","text":"<pre><code>get_description(name: str) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def get_description(self, name: str) -&gt; str:\n    _, description = self._workflows.get(name, (None, \"Description not available!\"))\n    return description\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/#fastagency.runtime.autogen.AutoGenWorkflows.register","title":"register","text":"<pre><code>register(\n    name: str,\n    description: str,\n    *,\n    fail_on_redefintion: bool = False\n) -&gt; Callable[[Workflow], Workflow]\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def register(\n    self, name: str, description: str, *, fail_on_redefintion: bool = False\n) -&gt; Callable[[Workflow], Workflow]:\n    def decorator(func: Workflow) -&gt; Workflow:\n        if name in self._workflows:\n            if fail_on_redefintion:\n                raise ValueError(f\"A workflow with name '{name}' already exists.\")\n            else:\n                logger.warning(f\"Overwriting workflow with name '{name}'\")\n\n        self._workflows[name] = func, description\n        return func\n\n    return decorator\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/AutoGenWorkflows/#fastagency.runtime.autogen.AutoGenWorkflows.run","title":"run","text":"<pre><code>run(\n    name: str, session_id: str, ui: UI, initial_message: str\n) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def run(self, name: str, session_id: str, ui: UI, initial_message: str) -&gt; str:\n    workflow, description = self._workflows[name]\n\n    iostream = IOStreamAdapter(ui)\n\n    with IOStream.set_default(iostream):\n        return workflow(ui, initial_message, session_id)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/","title":"IOStreamAdapter","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/#fastagency.runtime.autogen.IOStreamAdapter","title":"fastagency.runtime.autogen.IOStreamAdapter","text":"<pre><code>IOStreamAdapter(ui: UI)\n</code></pre> <p>Initialize the adapter with a ChatableIO object.</p> PARAMETER DESCRIPTION <code>ui</code> <p>The ChatableIO object to adapt</p> <p> TYPE: <code>ChatableIO</code> </p> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def __init__(self, ui: UI) -&gt; None:\n    \"\"\"Initialize the adapter with a ChatableIO object.\n\n    Args:\n        ui (ChatableIO): The ChatableIO object to adapt\n\n    \"\"\"\n    self.ui = ui\n    self.current_message = CurrentMessage()\n\n    self.messages: list[IOMessage] = []\n    if not isinstance(self.ui, UI):\n        raise ValueError(\"The ui object must be an instance of UI.\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/#fastagency.runtime.autogen.IOStreamAdapter.current_message","title":"current_message  <code>instance-attribute</code>","text":"<pre><code>current_message = CurrentMessage()\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/#fastagency.runtime.autogen.IOStreamAdapter.messages","title":"messages  <code>instance-attribute</code>","text":"<pre><code>messages: list[IOMessage] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/#fastagency.runtime.autogen.IOStreamAdapter.ui","title":"ui  <code>instance-attribute</code>","text":"<pre><code>ui = ui\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/#fastagency.runtime.autogen.IOStreamAdapter.input","title":"input","text":"<pre><code>input(prompt: str = '', *, password: bool = False) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def input(self, prompt: str = \"\", *, password: bool = False) -&gt; str:\n    # logger.info(f\"input(): {prompt=}, {password=}\")\n    message: AskingMessage = self.current_message.process_input(\n        prompt, password, self.messages\n    )\n\n    retval: str = self.ui.process_message(message)  # type: ignore[assignment]\n\n    # in case of approving a suggested function call, we need to return an empty string to AutoGen\n    if (\n        message.type == \"multiple_choice\"\n        and self.messages[-1].type == \"suggested_function_call\"\n        and retval == \"Approve\"\n    ):\n        retval = \"\"\n    if retval == \"Exit\":\n        retval = \"exit\"\n\n    # logger.info(f\"input(): {retval=}\")\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/IOStreamAdapter/#fastagency.runtime.autogen.IOStreamAdapter.print","title":"print","text":"<pre><code>print(\n    *objects: Any,\n    sep: str = \" \",\n    end: str = \"\\n\",\n    flush: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def print(\n    self, *objects: Any, sep: str = \" \", end: str = \"\\n\", flush: bool = False\n) -&gt; None:\n    # logger.info(f\"print(): {objects=}, {sep=}, {end=}, {flush=}\")\n    body = sep.join(map(str, objects)) + end\n    ready_to_send = self._process_message_chunk(body)\n    if ready_to_send:\n        message = self.messages[-1]\n        self.ui.process_message(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/","title":"AutoGenWorkflows","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/#fastagency.runtime.autogen.base.AutoGenWorkflows","title":"fastagency.runtime.autogen.base.AutoGenWorkflows","text":"<pre><code>AutoGenWorkflows()\n</code></pre> <p>               Bases: <code>Workflows</code></p> <p>Initialize the workflows.</p> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the workflows.\"\"\"\n    self._workflows: dict[str, tuple[Callable[[UI, str, str], str], str]] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/#fastagency.runtime.autogen.base.AutoGenWorkflows.names","title":"names  <code>property</code>","text":"<pre><code>names: list[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/#fastagency.runtime.autogen.base.AutoGenWorkflows.get_description","title":"get_description","text":"<pre><code>get_description(name: str) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def get_description(self, name: str) -&gt; str:\n    _, description = self._workflows.get(name, (None, \"Description not available!\"))\n    return description\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/#fastagency.runtime.autogen.base.AutoGenWorkflows.register","title":"register","text":"<pre><code>register(\n    name: str,\n    description: str,\n    *,\n    fail_on_redefintion: bool = False\n) -&gt; Callable[[Workflow], Workflow]\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def register(\n    self, name: str, description: str, *, fail_on_redefintion: bool = False\n) -&gt; Callable[[Workflow], Workflow]:\n    def decorator(func: Workflow) -&gt; Workflow:\n        if name in self._workflows:\n            if fail_on_redefintion:\n                raise ValueError(f\"A workflow with name '{name}' already exists.\")\n            else:\n                logger.warning(f\"Overwriting workflow with name '{name}'\")\n\n        self._workflows[name] = func, description\n        return func\n\n    return decorator\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/AutoGenWorkflows/#fastagency.runtime.autogen.base.AutoGenWorkflows.run","title":"run","text":"<pre><code>run(\n    name: str, session_id: str, ui: UI, initial_message: str\n) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def run(self, name: str, session_id: str, ui: UI, initial_message: str) -&gt; str:\n    workflow, description = self._workflows[name]\n\n    iostream = IOStreamAdapter(ui)\n\n    with IOStream.set_default(iostream):\n        return workflow(ui, initial_message, session_id)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/","title":"CurrentMessage","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage","title":"fastagency.runtime.autogen.base.CurrentMessage  <code>dataclass</code>","text":"<pre><code>CurrentMessage(\n    sender: Optional[str] = None,\n    recipient: Optional[str] = None,\n    type: MessageType = \"text_message\",\n    auto_reply: bool = False,\n    body: Optional[str] = None,\n    call_id: Optional[str] = None,\n    function_name: Optional[str] = None,\n    arguments: Optional[dict[str, Any]] = None,\n    retval: Optional[Any] = None,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.arguments","title":"arguments  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>arguments: Optional[dict[str, Any]] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.auto_reply","title":"auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_reply: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.body","title":"body  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>body: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.call_id","title":"call_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>call_id: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.function_name","title":"function_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function_name: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.recipient","title":"recipient  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.retval","title":"retval  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>retval: Optional[Any] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.sender","title":"sender  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: MessageType = 'text_message'\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.create_message","title":"create_message","text":"<pre><code>create_message() -&gt; IOMessage\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def create_message(self) -&gt; IOMessage:\n    kwargs = {k: v for k, v in asdict(self).items() if v is not None}\n    # logger.info(f\"CurrentMessage.create_message(): {kwargs=}\")\n    return IOMessage.create(**kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.process_chunk","title":"process_chunk","text":"<pre><code>process_chunk(chunk: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def process_chunk(self, chunk: str) -&gt; bool:  # noqa: C901\n    # logger.info(f\"CurrentMessage.process_chunk({chunk=}):\")\n    if _match(\"end_of_message\", chunk):\n        return True\n\n    if _match(\"auto_reply\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): auto_reply detected\")\n        self.auto_reply = True\n    elif _match(\"sender_recipient\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): sender_recipient detected\")\n        self.sender, self.recipient = _findall(\"sender_recipient\", chunk)\n    elif _match(\"suggested_function_call\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): suggested_function_call detected\")\n        self.call_id, self.function_name = _findall(\n            \"suggested_function_call\", chunk\n        )\n        self.type = \"suggested_function_call\"\n    elif _match(\"stars\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): stars detected\")\n        pass\n    elif _match(\"function_call_execution\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): function_call_execution detected\")\n        self.function_name = _findall(\"function_call_execution\", chunk)  # type: ignore[assignment]\n        self.type = \"function_call_execution\"\n    elif _match(\"response_from_calling_tool\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): response_from_calling_tool detected\")\n        self.type = \"function_call_execution\"\n        self.call_id = _findall(\"response_from_calling_tool\", chunk)  # type: ignore[assignment]\n    elif _match(\"no_human_input_received\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): no_human_input_received detected\")\n        pass\n    elif _match(\"user_interrupted\", chunk):\n        # logger.info(\"CurrentMessage.process_chunk(): user_interrupted detected\")\n        pass\n    else:\n        if self.type == \"suggested_function_call\":\n            # logger.info(\"CurrentMessage.process_chunk(): parsing arguments\")\n            arguments_json: str = _findall(\"arguments\", chunk)  # type: ignore[assignment]\n            self.arguments = json.loads(arguments_json)\n        elif self.type == \"function_call_execution\":\n            # logger.info(\"CurrentMessage.process_chunk(): parsing retval\")\n            self.retval = chunk\n        else:\n            # logger.info(\"CurrentMessage.process_chunk(): parsing body\")\n            self.body = chunk if self.body is None else self.body + chunk\n\n    return False\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/CurrentMessage/#fastagency.runtime.autogen.base.CurrentMessage.process_input","title":"process_input","text":"<pre><code>process_input(\n    prompt: str, password: bool, messages: list[IOMessage]\n) -&gt; AskingMessage\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def process_input(\n    self, prompt: str, password: bool, messages: list[IOMessage]\n) -&gt; AskingMessage:\n    last_message = messages[-1]\n    sender, recipient = None, None\n    message: AskingMessage\n\n    if _match(\"auto_reply_input\", prompt):\n        # logger.info(\"IOStreamAdapter.input(): auto_reply_input detected\")\n        sender, recipient = _findall(\"auto_reply_input\", prompt)  # type: ignore[assignment]\n\n    if last_message.type == \"suggested_function_call\":\n        # logger.info(\"IOStreamAdapter.input(): suggested_function_call detected\")\n        message = MultipleChoice(\n            sender=sender,\n            recipient=recipient,\n            prompt=\"Please approve the suggested function call.\",\n            choices=[\"Approve\", \"Reject\", \"Exit\"],\n            default=\"Approve\",\n        )\n    else:\n        # logger.info(\"IOStreamAdapter.input(): text_message detected\")\n        message = TextInput(\n            sender=None, recipient=None, prompt=prompt, password=password\n        )\n\n    return message\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/","title":"IOStreamAdapter","text":"","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/#fastagency.runtime.autogen.base.IOStreamAdapter","title":"fastagency.runtime.autogen.base.IOStreamAdapter","text":"<pre><code>IOStreamAdapter(ui: UI)\n</code></pre> <p>Initialize the adapter with a ChatableIO object.</p> PARAMETER DESCRIPTION <code>ui</code> <p>The ChatableIO object to adapt</p> <p> TYPE: <code>ChatableIO</code> </p> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def __init__(self, ui: UI) -&gt; None:\n    \"\"\"Initialize the adapter with a ChatableIO object.\n\n    Args:\n        ui (ChatableIO): The ChatableIO object to adapt\n\n    \"\"\"\n    self.ui = ui\n    self.current_message = CurrentMessage()\n\n    self.messages: list[IOMessage] = []\n    if not isinstance(self.ui, UI):\n        raise ValueError(\"The ui object must be an instance of UI.\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/#fastagency.runtime.autogen.base.IOStreamAdapter.current_message","title":"current_message  <code>instance-attribute</code>","text":"<pre><code>current_message = CurrentMessage()\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/#fastagency.runtime.autogen.base.IOStreamAdapter.messages","title":"messages  <code>instance-attribute</code>","text":"<pre><code>messages: list[IOMessage] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/#fastagency.runtime.autogen.base.IOStreamAdapter.ui","title":"ui  <code>instance-attribute</code>","text":"<pre><code>ui = ui\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/#fastagency.runtime.autogen.base.IOStreamAdapter.input","title":"input","text":"<pre><code>input(prompt: str = '', *, password: bool = False) -&gt; str\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def input(self, prompt: str = \"\", *, password: bool = False) -&gt; str:\n    # logger.info(f\"input(): {prompt=}, {password=}\")\n    message: AskingMessage = self.current_message.process_input(\n        prompt, password, self.messages\n    )\n\n    retval: str = self.ui.process_message(message)  # type: ignore[assignment]\n\n    # in case of approving a suggested function call, we need to return an empty string to AutoGen\n    if (\n        message.type == \"multiple_choice\"\n        and self.messages[-1].type == \"suggested_function_call\"\n        and retval == \"Approve\"\n    ):\n        retval = \"\"\n    if retval == \"Exit\":\n        retval = \"exit\"\n\n    # logger.info(f\"input(): {retval=}\")\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/runtime/autogen/base/IOStreamAdapter/#fastagency.runtime.autogen.base.IOStreamAdapter.print","title":"print","text":"<pre><code>print(\n    *objects: Any,\n    sep: str = \" \",\n    end: str = \"\\n\",\n    flush: bool = False\n) -&gt; None\n</code></pre> Source code in <code>fastagency/runtime/autogen/base.py</code> <pre><code>def print(\n    self, *objects: Any, sep: str = \" \", end: str = \"\\n\", flush: bool = False\n) -&gt; None:\n    # logger.info(f\"print(): {objects=}, {sep=}, {end=}, {flush=}\")\n    body = sep.join(map(str, objects)) + end\n    ready_to_send = self._process_message_chunk(body)\n    if ready_to_send:\n        message = self.messages[-1]\n        self.ui.process_message(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/ChatRequest/","title":"ChatRequest","text":"","boost":0.5},{"location":"api/fastagency/studio/app/ChatRequest/#fastagency.studio.app.ChatRequest","title":"fastagency.studio.app.ChatRequest","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/app/ChatRequest/#fastagency.studio.app.ChatRequest.chat_id","title":"chat_id  <code>instance-attribute</code>","text":"<pre><code>chat_id: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/ChatRequest/#fastagency.studio.app.ChatRequest.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: list[dict[str, str]]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/ChatRequest/#fastagency.studio.app.ChatRequest.user_id","title":"user_id  <code>instance-attribute</code>","text":"<pre><code>user_id: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/DeploymentAuthTokenInfo/","title":"DeploymentAuthTokenInfo","text":"","boost":0.5},{"location":"api/fastagency/studio/app/DeploymentAuthTokenInfo/#fastagency.studio.app.DeploymentAuthTokenInfo","title":"fastagency.studio.app.DeploymentAuthTokenInfo","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/app/DeploymentAuthTokenInfo/#fastagency.studio.app.DeploymentAuthTokenInfo.expiry","title":"expiry  <code>instance-attribute</code>","text":"<pre><code>expiry: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/DeploymentAuthTokenInfo/#fastagency.studio.app.DeploymentAuthTokenInfo.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/DeploymentAuthTokenInfo/#fastagency.studio.app.DeploymentAuthTokenInfo.uuid","title":"uuid  <code>instance-attribute</code>","text":"<pre><code>uuid: UUID\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/add_model/","title":"add_model","text":"","boost":0.5},{"location":"api/fastagency/studio/app/add_model/#fastagency.studio.app.add_model","title":"fastagency.studio.app.add_model  <code>async</code>","text":"<pre><code>add_model(\n    user_uuid: str,\n    type_name: str,\n    model_name: str,\n    model_uuid: str,\n    model: dict[str, Any],\n    background_tasks: BackgroundTasks,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.post(\"/user/{user_uuid}/models/{type_name}/{model_name}/{model_uuid}\")\nasync def add_model(\n    user_uuid: str,\n    type_name: str,\n    model_name: str,\n    model_uuid: str,\n    model: dict[str, Any],\n    background_tasks: BackgroundTasks,\n) -&gt; dict[str, Any]:\n    await check_model_name_uniqueness_and_raise(user_uuid, model[\"name\"])\n\n    return await add_model_to_user(\n        user_uuid=user_uuid,\n        type_name=type_name,\n        model_name=model_name,\n        model_uuid=model_uuid,\n        model=model,\n        background_tasks=background_tasks,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/chat/","title":"chat","text":"","boost":0.5},{"location":"api/fastagency/studio/app/chat/#fastagency.studio.app.chat","title":"fastagency.studio.app.chat  <code>async</code>","text":"<pre><code>chat(request: ChatRequest) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.post(\"/user/{user_uuid}/chat/{model_name}/{model_uuid}\")\nasync def chat(request: ChatRequest) -&gt; dict[str, Any]:\n    message = request.message[0][\"content\"]\n    chat_id = request.chat_id\n    user_id = request.user_id\n    team_name = f\"{user_id}_{chat_id}\"\n\n    try:\n        messages = [\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT.format(task_name=message)}\n        ]\n        completion = await aclient.chat.completions.create(\n            model=azure_gpt35_model,\n            messages=messages,\n            tools=TOOLS,\n            tool_choice={\n                \"type\": \"function\",\n                \"function\": {\"name\": \"generate_chat_name\"},\n            },\n        )  # type: ignore\n\n        response_message = completion.choices[0].message\n        tool_calls = response_message.tool_calls\n        if tool_calls:\n            for tool_call in tool_calls:\n                function_name = tool_call.function.name\n                function_args = json.loads(tool_call.function.arguments)\n                if function_name == \"generate_chat_name\":\n                    return await generate_chat_name(  # type: ignore[return-value]\n                        team_name=team_name,\n                        chat_id=chat_id,\n                        **function_args,\n                    )\n\n    except Exception:\n        logging.error(\"Unable to generate chat name: \", exc_info=True)\n\n    default_response = {\n        \"team_status\": \"inprogress\",\n        \"team_name\": team_name,\n        \"team_id\": chat_id,\n        \"customer_brief\": \"Some customer brief\",\n        \"conversation_name\": message,\n    }\n\n    return default_response\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/create_auth_token/","title":"create_auth_token","text":"","boost":0.5},{"location":"api/fastagency/studio/app/create_auth_token/#fastagency.studio.app.create_auth_token","title":"fastagency.studio.app.create_auth_token  <code>async</code>","text":"<pre><code>create_auth_token(\n    user_uuid: str,\n    deployment_uuid: str,\n    name: str,\n    expiry: str,\n) -&gt; DeploymentAuthToken\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.post(\"/user/{user_uuid}/deployment/{deployment_uuid}\")\nasync def create_auth_token(\n    user_uuid: Annotated[str, Path(title=\"User UUID\")],\n    deployment_uuid: Annotated[str, Path(title=\"Deployment UUID\")],\n    name: Annotated[str, Body(title=\"Name of the auth token\")],\n    expiry: Annotated[str, Body(title=\"Expiry of the auth token\")],\n) -&gt; DeploymentAuthToken:\n    return await create_deployment_auth_token(\n        user_uuid=user_uuid, deployment_uuid=deployment_uuid, name=name, expiry=expiry\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/create_toolbox_for_new_user/","title":"create_toolbox_for_new_user","text":"","boost":0.5},{"location":"api/fastagency/studio/app/create_toolbox_for_new_user/#fastagency.studio.app.create_toolbox_for_new_user","title":"fastagency.studio.app.create_toolbox_for_new_user  <code>async</code>","text":"<pre><code>create_toolbox_for_new_user(\n    user_uuid: Union[str, UUID]\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>async def create_toolbox_for_new_user(user_uuid: Union[str, UUID]) -&gt; dict[str, Any]:\n    await DefaultDB.frontend().get_user(user_uuid=user_uuid)  # type: ignore[arg-type]\n\n    domain = environ.get(\"DOMAIN\", \"localhost\")\n    toolbox_openapi_url = (\n        \"https://weather.tools.staging.fastagency.ai/openapi.json\"\n        if \"staging\" in domain or \"localhost\" in domain\n        else \"https://weather.tools.fastagency.ai/openapi.json\"\n    )\n\n    # Check if default weather toolbox already exists\n    models = await get_all_models_for_user(user_uuid=user_uuid, type_name=\"toolbox\")\n    if models:\n        raise HTTPException(status_code=400, detail=\"Weather toolbox already exists\")\n\n    _, validated_model = await create_model(\n        cls=Toolbox,\n        type_name=\"toolbox\",\n        user_uuid=user_uuid,\n        name=\"WeatherToolbox\",\n        openapi_url=toolbox_openapi_url,\n    )\n    return validated_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/delete_deployment_auth_token/","title":"delete_deployment_auth_token","text":"","boost":0.5},{"location":"api/fastagency/studio/app/delete_deployment_auth_token/#fastagency.studio.app.delete_deployment_auth_token","title":"fastagency.studio.app.delete_deployment_auth_token  <code>async</code>","text":"<pre><code>delete_deployment_auth_token(\n    user_uuid: str,\n    deployment_uuid: str,\n    auth_token_uuid: str,\n) -&gt; DeploymentAuthTokenInfo\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.delete(\"/user/{user_uuid}/deployment/{deployment_uuid}/{auth_token_uuid}\")\nasync def delete_deployment_auth_token(\n    user_uuid: str,\n    deployment_uuid: str,\n    auth_token_uuid: str,\n) -&gt; DeploymentAuthTokenInfo:\n    user = await DefaultDB.frontend().get_user(user_uuid=user_uuid)\n    deployment = await DefaultDB.backend().find_model(model_uuid=deployment_uuid)\n\n    if user[\"uuid\"] != deployment[\"user_uuid\"]:\n        raise HTTPException(  # pragma: no cover\n            status_code=403, detail=\"User does not have access to this deployment\"\n        )\n\n    auth_token = await DefaultDB.backend().delete_auth_token(\n        auth_token_uuid=auth_token_uuid,\n        deployment_uuid=deployment_uuid,\n        user_uuid=user_uuid,\n    )\n    return DeploymentAuthTokenInfo(\n        uuid=auth_token[\"uuid\"],  # type: ignore[union-attr]\n        name=auth_token[\"name\"],  # type: ignore[union-attr]\n        expiry=auth_token[\"expiry\"],  # type: ignore[union-attr]\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/deployment_chat/","title":"deployment_chat","text":"","boost":0.5},{"location":"api/fastagency/studio/app/deployment_chat/#fastagency.studio.app.deployment_chat","title":"fastagency.studio.app.deployment_chat  <code>async</code>","text":"<pre><code>deployment_chat(deployment_uuid: str) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.post(\"/deployment/{deployment_uuid}/chat\")\nasync def deployment_chat(deployment_uuid: str) -&gt; dict[str, Any]:\n    found_model = await DefaultDB.backend().find_model(model_uuid=deployment_uuid)\n    team_name = found_model[\"json_str\"][\"name\"]\n    team_uuid = found_model[\"json_str\"][\"team\"][\"uuid\"]\n\n    return {\n        \"team_status\": \"inprogress\",\n        \"team_name\": team_name,\n        \"team_uuid\": team_uuid,\n        \"conversation_name\": \"New Chat\",\n    }\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/deployment_ping/","title":"deployment_ping","text":"","boost":0.5},{"location":"api/fastagency/studio/app/deployment_ping/#fastagency.studio.app.deployment_ping","title":"fastagency.studio.app.deployment_ping  <code>async</code>","text":"<pre><code>deployment_ping() -&gt; dict[str, str]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.get(\"/deployment/{deployment_uuid}/ping\")\nasync def deployment_ping() -&gt; dict[str, str]:\n    return {\n        \"status\": \"ok\",\n    }\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/generate_chat_name/","title":"generate_chat_name","text":"","boost":0.5},{"location":"api/fastagency/studio/app/generate_chat_name/#fastagency.studio.app.generate_chat_name","title":"fastagency.studio.app.generate_chat_name  <code>async</code>","text":"<pre><code>generate_chat_name(\n    team_name: str, chat_id: int, chat_name: str\n) -&gt; dict[str, Union[Optional[str], int]]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>async def generate_chat_name(\n    team_name: str,\n    chat_id: int,\n    chat_name: str,\n) -&gt; dict[str, Union[Optional[str], int]]:\n    return {\n        \"team_status\": \"inprogress\",\n        \"team_name\": team_name,\n        \"team_id\": chat_id,\n        \"customer_brief\": \"Some customer brief\",\n        \"conversation_name\": chat_name,\n    }\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/get_all_deployment_auth_tokens/","title":"get_all_deployment_auth_tokens","text":"","boost":0.5},{"location":"api/fastagency/studio/app/get_all_deployment_auth_tokens/#fastagency.studio.app.get_all_deployment_auth_tokens","title":"fastagency.studio.app.get_all_deployment_auth_tokens  <code>async</code>","text":"<pre><code>get_all_deployment_auth_tokens(\n    user_uuid: str, deployment_uuid: str\n) -&gt; list[DeploymentAuthTokenInfo]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.get(\"/user/{user_uuid}/deployment/{deployment_uuid}\")\nasync def get_all_deployment_auth_tokens(\n    user_uuid: str, deployment_uuid: str\n) -&gt; list[DeploymentAuthTokenInfo]:\n    user = await DefaultDB.frontend().get_user(user_uuid=user_uuid)\n    deployment = await DefaultDB.backend().find_model(model_uuid=deployment_uuid)\n\n    if user[\"uuid\"] != deployment[\"user_uuid\"]:\n        raise HTTPException(  # pragma: no cover\n            status_code=403, detail=\"User does not have access to this deployment\"\n        )\n\n    auth_tokens = await DefaultDB.backend().find_many_auth_token(\n        user_uuid=user_uuid, deployment_uuid=deployment_uuid\n    )\n    return [\n        DeploymentAuthTokenInfo(\n            uuid=auth_token[\"uuid\"],\n            name=auth_token[\"name\"],\n            expiry=auth_token[\"expiry\"],\n        )\n        for auth_token in auth_tokens\n    ]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/get_all_models/","title":"get_all_models","text":"","boost":0.5},{"location":"api/fastagency/studio/app/get_all_models/#fastagency.studio.app.get_all_models","title":"fastagency.studio.app.get_all_models  <code>async</code>","text":"<pre><code>get_all_models(\n    user_uuid: str, type_name: Optional[str] = None\n) -&gt; list[Any]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.get(\"/user/{user_uuid}/models\")\nasync def get_all_models(\n    user_uuid: str,\n    type_name: Optional[str] = None,\n) -&gt; list[Any]:\n    ret_val_without_mask = await get_all_models_for_user(\n        user_uuid=user_uuid, type_name=type_name\n    )\n\n    ret_val = []\n    for model in ret_val_without_mask:\n        if model[\"type_name\"] == \"secret\":\n            for k in [\"api_key\", \"gh_token\", \"fly_token\"]:\n                if k in model[\"json_str\"]:\n                    model[\"json_str\"][k] = await mask(model[\"json_str\"][k])\n        ret_val.append(model)\n\n    return ret_val  # type: ignore[no-any-return]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/get_azure_llm_client/","title":"get_azure_llm_client","text":"","boost":0.5},{"location":"api/fastagency/studio/app/get_azure_llm_client/#fastagency.studio.app.get_azure_llm_client","title":"fastagency.studio.app.get_azure_llm_client","text":"<pre><code>get_azure_llm_client() -&gt; tuple[AsyncAzureOpenAI, str]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>def get_azure_llm_client() -&gt; tuple[AsyncAzureOpenAI, str]:\n    azure_gpt35_model = environ[\"AZURE_GPT35_MODEL\"]\n    api_key = environ[\"AZURE_OPENAI_API_KEY\"]\n    azure_endpoint = environ[\"AZURE_API_ENDPOINT\"]\n    api_version = environ[\"AZURE_API_VERSION\"]\n\n    aclient = AsyncAzureOpenAI(\n        api_key=api_key,\n        azure_endpoint=azure_endpoint,  # type: ignore\n        api_version=api_version,\n    )\n\n    return aclient, azure_gpt35_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/get_models_schemas/","title":"get_models_schemas","text":"","boost":0.5},{"location":"api/fastagency/studio/app/get_models_schemas/#fastagency.studio.app.get_models_schemas","title":"fastagency.studio.app.get_models_schemas  <code>async</code>","text":"<pre><code>get_models_schemas() -&gt; Schemas\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.get(\"/models/schemas\")\nasync def get_models_schemas() -&gt; Schemas:\n    schemas = Registry.get_default().get_schemas()\n    return schemas\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/handle_keynotfounderror_middleware/","title":"handle_keynotfounderror_middleware","text":"","boost":0.5},{"location":"api/fastagency/studio/app/handle_keynotfounderror_middleware/#fastagency.studio.app.handle_keynotfounderror_middleware","title":"fastagency.studio.app.handle_keynotfounderror_middleware  <code>async</code>","text":"<pre><code>handle_keynotfounderror_middleware(\n    request: Request,\n    call_next: Callable[\n        [Request], Coroutine[Any, Any, Response]\n    ],\n) -&gt; Response\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.middleware(\"http\")\nasync def handle_keynotfounderror_middleware(\n    request: Request, call_next: Callable[[Request], Coroutine[Any, Any, Response]]\n) -&gt; Response:\n    try:\n        return await call_next(request)\n    except KeyNotFoundError as e:\n        return JSONResponse(status_code=404, content={\"detail\": e.args[0]})\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/mask/","title":"mask","text":"","boost":0.5},{"location":"api/fastagency/studio/app/mask/#fastagency.studio.app.mask","title":"fastagency.studio.app.mask  <code>async</code>","text":"<pre><code>mask(value: str) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>async def mask(value: str) -&gt; str:\n    return value[:3] + \"*\" * (len(value) - 7) + value[-4:]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/models_delete/","title":"models_delete","text":"","boost":0.5},{"location":"api/fastagency/studio/app/models_delete/#fastagency.studio.app.models_delete","title":"fastagency.studio.app.models_delete  <code>async</code>","text":"<pre><code>models_delete(\n    user_uuid: str, type_name: str, model_uuid: str\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.delete(\"/user/{user_uuid}/models/{type_name}/{model_uuid}\")\nasync def models_delete(\n    user_uuid: str, type_name: str, model_uuid: str\n) -&gt; dict[str, Any]:\n    found_model = await DefaultDB.backend().find_model(model_uuid=model_uuid)\n    model = await DefaultDB.backend().delete_model(model_uuid=found_model[\"uuid\"])\n    return model[\"json_str\"]  # type: ignore\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/setup_user/","title":"setup_user","text":"","boost":0.5},{"location":"api/fastagency/studio/app/setup_user/#fastagency.studio.app.setup_user","title":"fastagency.studio.app.setup_user  <code>async</code>","text":"<pre><code>setup_user(user_uuid: str) -&gt; dict[str, Any]\n</code></pre> <p>Setup user after creating.</p> <p>This function is called after the user is created. Currently it sets up weather toolbox for the user.</p> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.get(\"/user/{user_uuid}/setup\")\nasync def setup_user(user_uuid: str) -&gt; dict[str, Any]:\n    \"\"\"Setup user after creating.\n\n    This function is called after the user is created.\n    Currently it sets up weather toolbox for the user.\n    \"\"\"\n    return await create_toolbox_for_new_user(user_uuid)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/update_model/","title":"update_model","text":"","boost":0.5},{"location":"api/fastagency/studio/app/update_model/#fastagency.studio.app.update_model","title":"fastagency.studio.app.update_model  <code>async</code>","text":"<pre><code>update_model(\n    user_uuid: str,\n    type_name: str,\n    model_name: str,\n    model_uuid: str,\n    model: dict[str, Any],\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.put(\"/user/{user_uuid}/models/{type_name}/{model_name}/{model_uuid}\")\nasync def update_model(\n    user_uuid: str,\n    type_name: str,\n    model_name: str,\n    model_uuid: str,\n    model: dict[str, Any],\n) -&gt; dict[str, Any]:\n    registry = Registry.get_default()\n    validated_model = registry.validate(type_name, model_name, model)\n\n    found_model = await DefaultDB.backend().find_model(model_uuid=model_uuid)\n    found_model_name = found_model[\"json_str\"].get(\"name\")\n    if model[\"name\"] != found_model_name:\n        await check_model_name_uniqueness_and_raise(user_uuid, model[\"name\"])\n\n    await DefaultDB.backend().update_model(\n        model_uuid=found_model[\"uuid\"],\n        user_uuid=user_uuid,\n        type_name=type_name,\n        model_name=model_name,\n        json_str=validated_model.model_dump_json(),\n    )\n\n    return validated_model.model_dump()\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/validate_model/","title":"validate_model","text":"","boost":0.5},{"location":"api/fastagency/studio/app/validate_model/#fastagency.studio.app.validate_model","title":"fastagency.studio.app.validate_model  <code>async</code>","text":"<pre><code>validate_model(\n    type: str, name: str, model: dict[str, Any]\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.post(\"/models/{type}/{name}/validate\")\nasync def validate_model(type: str, name: str, model: dict[str, Any]) -&gt; dict[str, Any]:\n    try:\n        validated_model = Registry.get_default().validate(type, name, model)\n        if isinstance(validated_model, Toolbox):\n            await validate_toolbox(validated_model)\n        return validated_model.model_dump()\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=json.loads(e.json())) from e\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/validate_secret_model/","title":"validate_secret_model","text":"","boost":0.5},{"location":"api/fastagency/studio/app/validate_secret_model/#fastagency.studio.app.validate_secret_model","title":"fastagency.studio.app.validate_secret_model  <code>async</code>","text":"<pre><code>validate_secret_model(\n    user_uuid: UUID,\n    name: str,\n    model_uuid: UUID,\n    model: dict[str, Any],\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>@app.post(\"/user/{user_uuid}/models/secret/{name}/{model_uuid}/validate\")\nasync def validate_secret_model(\n    user_uuid: UUID, name: str, model_uuid: UUID, model: dict[str, Any]\n) -&gt; dict[str, Any]:\n    type: str = \"secret\"\n\n    found_model = await DefaultDB.backend().find_model(model_uuid=model_uuid)\n\n    if \"api_key\" not in model:\n        model[\"api_key\"] = found_model[\"json_str\"][\"api_key\"]\n\n    try:\n        validated_model = Registry.get_default().validate(type, name, model)\n        return validated_model.model_dump()\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=json.loads(e.json())) from e\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/app/validate_toolbox/","title":"validate_toolbox","text":"","boost":0.5},{"location":"api/fastagency/studio/app/validate_toolbox/#fastagency.studio.app.validate_toolbox","title":"fastagency.studio.app.validate_toolbox  <code>async</code>","text":"<pre><code>validate_toolbox(toolbox: Toolbox) -&gt; None\n</code></pre> Source code in <code>fastagency/studio/app.py</code> <pre><code>async def validate_toolbox(toolbox: Toolbox) -&gt; None:\n    try:\n        async with httpx.AsyncClient() as client:\n            resp = await client.get(toolbox.openapi_url)  # type: ignore[arg-type]\n    except Exception as e:\n        raise HTTPException(status_code=422, detail=\"OpenAPI URL is invalid\") from e\n\n    if not (resp.status_code &gt;= 200 and resp.status_code &lt; 400):\n        raise HTTPException(\n            status_code=422, detail=f\"OpenAPI URL returns error code {resp.status_code}\"\n        )\n\n    try:\n        if \"yaml\" in toolbox.openapi_url or \"yml\" in toolbox.openapi_url:  # type: ignore [operator]\n            openapi_spec = yaml.safe_load(resp.text)\n        else:\n            openapi_spec = resp.json()\n\n        if \"openapi\" not in openapi_spec:\n            raise HTTPException(\n                status_code=422,\n                detail=\"OpenAPI URL does not contain a valid OpenAPI spec\",\n            )\n    except Exception as e:\n        raise HTTPException(\n            status_code=422, detail=\"OpenAPI URL does not contain a valid OpenAPI spec\"\n        ) from e\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/DeploymentAuthToken/","title":"DeploymentAuthToken","text":"","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/DeploymentAuthToken/#fastagency.studio.auth_token.auth.DeploymentAuthToken","title":"fastagency.studio.auth_token.auth.DeploymentAuthToken","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/DeploymentAuthToken/#fastagency.studio.auth_token.auth.DeploymentAuthToken.auth_token","title":"auth_token  <code>instance-attribute</code>","text":"<pre><code>auth_token: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/create_deployment_auth_token/","title":"create_deployment_auth_token","text":"","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/create_deployment_auth_token/#fastagency.studio.auth_token.auth.create_deployment_auth_token","title":"fastagency.studio.auth_token.auth.create_deployment_auth_token  <code>async</code>","text":"<pre><code>create_deployment_auth_token(\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    name: str = \"Default deployment token\",\n    expiry: str = \"99999d\",\n) -&gt; DeploymentAuthToken\n</code></pre> Source code in <code>fastagency/studio/auth_token/auth.py</code> <pre><code>async def create_deployment_auth_token(\n    user_uuid: Union[str, uuid.UUID],\n    deployment_uuid: Union[str, uuid.UUID],\n    name: str = \"Default deployment token\",\n    expiry: str = \"99999d\",\n) -&gt; DeploymentAuthToken:\n    user = await DefaultDB.frontend().get_user(user_uuid=user_uuid)\n    deployment = await DefaultDB.backend().find_model(model_uuid=deployment_uuid)\n\n    if user[\"uuid\"] != deployment[\"user_uuid\"]:\n        raise HTTPException(\n            status_code=403, detail=\"User does not have access to this deployment\"\n        )\n    expires_at = await parse_expiry(expiry)\n\n    auth_token = generate_auth_token()\n    hashed_token = hash_auth_token(auth_token)\n\n    await DefaultDB.backend().create_auth_token(\n        auth_token_uuid=uuid.uuid4(),\n        name=name,\n        user_uuid=user_uuid,\n        deployment_uuid=deployment_uuid,\n        hashed_auth_token=hashed_token,\n        expiry=expiry,\n        expires_at=expires_at,\n    )\n\n    return DeploymentAuthToken(auth_token=auth_token)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/generate_auth_token/","title":"generate_auth_token","text":"","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/generate_auth_token/#fastagency.studio.auth_token.auth.generate_auth_token","title":"fastagency.studio.auth_token.auth.generate_auth_token","text":"<pre><code>generate_auth_token(length: int = 32) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/auth_token/auth.py</code> <pre><code>def generate_auth_token(length: int = 32) -&gt; str:\n    characters = string.ascii_letters + string.digits\n    token = \"\".join(secrets.choice(characters) for _ in range(length))\n    return token\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/hash_auth_token/","title":"hash_auth_token","text":"","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/hash_auth_token/#fastagency.studio.auth_token.auth.hash_auth_token","title":"fastagency.studio.auth_token.auth.hash_auth_token","text":"<pre><code>hash_auth_token(token: str) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/auth_token/auth.py</code> <pre><code>def hash_auth_token(token: str) -&gt; str:\n    # Generate a random salt\n    salt = secrets.token_bytes(16)\n\n    # Combine salt and token\n    salted_token = salt + token.encode(\"utf-8\")\n\n    # Use SHA-256 for hashing\n    hashed_token = hashlib.sha256(salted_token).hexdigest()\n\n    # Return the salt and hashed token\n    return salt.hex() + \":\" + hashed_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/parse_expiry/","title":"parse_expiry","text":"","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/parse_expiry/#fastagency.studio.auth_token.auth.parse_expiry","title":"fastagency.studio.auth_token.auth.parse_expiry  <code>async</code>","text":"<pre><code>parse_expiry(expiry: str) -&gt; datetime\n</code></pre> Source code in <code>fastagency/studio/auth_token/auth.py</code> <pre><code>async def parse_expiry(expiry: str) -&gt; datetime:\n    match = re.match(r\"(\\d+)([d])\", expiry)\n    if not match:\n        raise HTTPException(\n            status_code=400,\n            detail=f\"Invalid expiry format - {expiry}; expected format: &lt;number&gt;d\",\n        )\n\n    value, unit = match.groups()\n    value = int(value)\n\n    td = timedelta(days=value)\n\n    d = datetime.utcnow()\n    expires_at = d + td\n    if expires_at &lt;= d:\n        raise HTTPException(status_code=400, detail=\"Expiry date cannot be in the past\")\n    return expires_at\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/verify_auth_token/","title":"verify_auth_token","text":"","boost":0.5},{"location":"api/fastagency/studio/auth_token/auth/verify_auth_token/#fastagency.studio.auth_token.auth.verify_auth_token","title":"fastagency.studio.auth_token.auth.verify_auth_token","text":"<pre><code>verify_auth_token(token: str, stored_hash: str) -&gt; bool\n</code></pre> Source code in <code>fastagency/studio/auth_token/auth.py</code> <pre><code>def verify_auth_token(token: str, stored_hash: str) -&gt; bool:\n    if \":\" not in stored_hash:\n        return False\n    # Split the stored hash into salt and hash\n    salt, hash_value = stored_hash.split(\":\")\n\n    # Convert salt back to bytes\n    salt_bytes = bytes.fromhex(salt)\n\n    # Combine salt and token\n    salted_token = salt_bytes + token.encode(\"utf-8\")\n\n    # Hash the salted token\n    computed_hash = hashlib.sha256(salted_token).hexdigest()\n\n    # Compare the computed hash with the stored hash\n    return computed_hash == hash_value\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/BackendDBProtocol/","title":"BackendDBProtocol","text":"","boost":0.5},{"location":"api/fastagency/studio/db/base/BackendDBProtocol/#fastagency.studio.db.base.BackendDBProtocol","title":"fastagency.studio.db.base.BackendDBProtocol","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/studio/db/base/BackendDBProtocol/#fastagency.studio.db.base.BackendDBProtocol.create_auth_token","title":"create_auth_token  <code>async</code>","text":"<pre><code>create_auth_token(\n    auth_token_uuid: Union[str, UUID],\n    name: str,\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    hashed_auth_token: str,\n    expiry: str,\n    expires_at: datetime,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/base.py</code> <pre><code>async def create_auth_token(\n    self,\n    auth_token_uuid: Union[str, UUID],\n    name: str,\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    hashed_auth_token: str,\n    expiry: str,\n    expires_at: datetime,\n) -&gt; dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/BackendDBProtocol/#fastagency.studio.db.base.BackendDBProtocol.create_model","title":"create_model  <code>async</code>","text":"<pre><code>create_model(\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/base.py</code> <pre><code>async def create_model(\n    self,\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/BackendDBProtocol/#fastagency.studio.db.base.BackendDBProtocol.delete_auth_token","title":"delete_auth_token  <code>async</code>","text":"<pre><code>delete_auth_token(\n    auth_token_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/base.py</code> <pre><code>async def delete_auth_token(\n    self,\n    auth_token_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n) -&gt; dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/BackendDBProtocol/#fastagency.studio.db.base.BackendDBProtocol.delete_model","title":"delete_model  <code>async</code>","text":"<pre><code>delete_model(\n    model_uuid: Union[str, UUID]\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/base.py</code> <pre><code>async def delete_model(self, model_uuid: Union[str, UUID]) -&gt; dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/BackendDBProtocol/#fastagency.studio.db.base.BackendDBProtocol.find_many_auth_token","title":"find_many_auth_token  <code>async</code>","text":"<pre><code>find_many_auth_token(\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n) -&gt; list[dict[str, Any]]\n</code></pre> Source code in <code>fastagency/studio/db/base.py</code> <pre><code>async def find_many_auth_token(\n    self, user_uuid: Union[str, UUID], deployment_uuid: Union[str, UUID]\n) -&gt; list[dict[str, Any]]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/BackendDBProtocol/#fastagency.studio.db.base.BackendDBProtocol.find_many_model","title":"find_many_model  <code>async</code>","text":"<pre><code>find_many_model(\n    user_uuid: Union[str, UUID],\n    type_name: Optional[str] = None,\n) -&gt; list[dict[str, Any]]\n</code></pre> Source code in <code>fastagency/studio/db/base.py</code> <pre><code>async def find_many_model(\n    self, user_uuid: Union[str, UUID], type_name: Optional[str] = None\n) -&gt; list[dict[str, Any]]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/BackendDBProtocol/#fastagency.studio.db.base.BackendDBProtocol.find_model","title":"find_model  <code>async</code>","text":"<pre><code>find_model(model_uuid: Union[str, UUID]) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/base.py</code> <pre><code>async def find_model(self, model_uuid: Union[str, UUID]) -&gt; dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/BackendDBProtocol/#fastagency.studio.db.base.BackendDBProtocol.update_model","title":"update_model  <code>async</code>","text":"<pre><code>update_model(\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/base.py</code> <pre><code>async def update_model(\n    self,\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/DefaultDB/","title":"DefaultDB","text":"","boost":0.5},{"location":"api/fastagency/studio/db/base/DefaultDB/#fastagency.studio.db.base.DefaultDB","title":"fastagency.studio.db.base.DefaultDB","text":"","boost":0.5},{"location":"api/fastagency/studio/db/base/DefaultDB/#fastagency.studio.db.base.DefaultDB.backend","title":"backend  <code>staticmethod</code>","text":"<pre><code>backend() -&gt; BackendDBProtocol\n</code></pre> Source code in <code>fastagency/studio/db/base.py</code> <pre><code>@staticmethod\ndef backend() -&gt; BackendDBProtocol:\n    return DefaultDB._backend_db  # type: ignore[return-value]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/DefaultDB/#fastagency.studio.db.base.DefaultDB.frontend","title":"frontend  <code>staticmethod</code>","text":"<pre><code>frontend() -&gt; FrontendDBProtocol\n</code></pre> Source code in <code>fastagency/studio/db/base.py</code> <pre><code>@staticmethod\ndef frontend() -&gt; FrontendDBProtocol:\n    return DefaultDB._frontend_db  # type: ignore[return-value]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/DefaultDB/#fastagency.studio.db.base.DefaultDB.set","title":"set  <code>staticmethod</code>","text":"<pre><code>set(\n    *,\n    backend_db: BackendDBProtocol,\n    frontend_db: FrontendDBProtocol\n) -&gt; Generator[None, None, None]\n</code></pre> Source code in <code>fastagency/studio/db/base.py</code> <pre><code>@staticmethod\n@contextmanager\ndef set(\n    *,\n    backend_db: BackendDBProtocol,\n    frontend_db: FrontendDBProtocol,\n) -&gt; Generator[None, None, None]:\n    old_backend_default = DefaultDB._backend_db\n    old_frontend_default = DefaultDB._frontend_db\n    try:\n        DefaultDB._backend_db = backend_db\n        DefaultDB._frontend_db = frontend_db\n        yield\n    finally:\n        DefaultDB._backend_db = old_backend_default\n        DefaultDB._frontend_db = old_frontend_default\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/FrontendDBProtocol/","title":"FrontendDBProtocol","text":"","boost":0.5},{"location":"api/fastagency/studio/db/base/FrontendDBProtocol/#fastagency.studio.db.base.FrontendDBProtocol","title":"fastagency.studio.db.base.FrontendDBProtocol","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/studio/db/base/FrontendDBProtocol/#fastagency.studio.db.base.FrontendDBProtocol.get_user","title":"get_user  <code>async</code>","text":"<pre><code>get_user(user_uuid: Union[str, UUID]) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/base.py</code> <pre><code>async def get_user(self, user_uuid: Union[str, UUID]) -&gt; dict[str, Any]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/base/KeyExistsError/","title":"KeyExistsError","text":"","boost":0.5},{"location":"api/fastagency/studio/db/base/KeyExistsError/#fastagency.studio.db.base.KeyExistsError","title":"fastagency.studio.db.base.KeyExistsError","text":"<p>               Bases: <code>ValueError</code></p>","boost":0.5},{"location":"api/fastagency/studio/db/base/KeyNotFoundError/","title":"KeyNotFoundError","text":"","boost":0.5},{"location":"api/fastagency/studio/db/base/KeyNotFoundError/#fastagency.studio.db.base.KeyNotFoundError","title":"fastagency.studio.db.base.KeyNotFoundError","text":"<p>               Bases: <code>ValueError</code></p>","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryBackendDB/","title":"InMemoryBackendDB","text":"","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryBackendDB/#fastagency.studio.db.inmemory.InMemoryBackendDB","title":"fastagency.studio.db.inmemory.InMemoryBackendDB","text":"<pre><code>InMemoryBackendDB()\n</code></pre> <p>               Bases: <code>BackendDBProtocol</code></p> <p>In memory backend database.</p> Source code in <code>fastagency/studio/db/inmemory.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"In memory backend database.\"\"\"\n    self._models: list[dict[str, Any]] = []\n    self._auth_tokens: list[dict[str, Any]] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryBackendDB/#fastagency.studio.db.inmemory.InMemoryBackendDB.create_auth_token","title":"create_auth_token  <code>async</code>","text":"<pre><code>create_auth_token(\n    auth_token_uuid: Union[str, UUID],\n    name: str,\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    hashed_auth_token: str,\n    expiry: str,\n    expires_at: datetime,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/inmemory.py</code> <pre><code>async def create_auth_token(\n    self,\n    auth_token_uuid: Union[str, UUID],\n    name: str,\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    hashed_auth_token: str,\n    expiry: str,\n    expires_at: datetime,\n) -&gt; dict[str, Any]:\n    auth_token = {\n        \"uuid\": str(auth_token_uuid),\n        \"name\": name,\n        \"user_uuid\": str(user_uuid),\n        \"deployment_uuid\": str(deployment_uuid),\n        \"hashed_auth_token\": hashed_auth_token,\n        \"expiry\": expiry,\n        \"expires_at\": expires_at,\n        \"created_at\": datetime.now(),\n        \"updated_at\": datetime.now(),\n    }\n    self._auth_tokens.append(auth_token)\n    return auth_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryBackendDB/#fastagency.studio.db.inmemory.InMemoryBackendDB.create_model","title":"create_model  <code>async</code>","text":"<pre><code>create_model(\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/inmemory.py</code> <pre><code>async def create_model(\n    self,\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; dict[str, Any]:\n    model = {\n        \"uuid\": str(model_uuid),\n        \"user_uuid\": str(user_uuid),\n        \"type_name\": type_name,\n        \"model_name\": model_name,\n        \"json_str\": json.loads(json_str),\n        \"created_at\": datetime.now(),\n        \"updated_at\": datetime.now(),\n    }\n    self._models.append(model)\n    return model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryBackendDB/#fastagency.studio.db.inmemory.InMemoryBackendDB.delete_auth_token","title":"delete_auth_token  <code>async</code>","text":"<pre><code>delete_auth_token(\n    auth_token_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/inmemory.py</code> <pre><code>async def delete_auth_token(\n    self,\n    auth_token_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n) -&gt; dict[str, Any]:\n    for auth_token in self._auth_tokens:\n        if (\n            auth_token[\"uuid\"] == str(auth_token_uuid)\n            and auth_token[\"user_uuid\"] == str(user_uuid)\n            and auth_token[\"deployment_uuid\"] == str(deployment_uuid)\n        ):\n            self._auth_tokens.remove(auth_token)\n            return auth_token\n    raise KeyNotFoundError(f\"auth_token_uuid {auth_token_uuid} not found\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryBackendDB/#fastagency.studio.db.inmemory.InMemoryBackendDB.delete_model","title":"delete_model  <code>async</code>","text":"<pre><code>delete_model(\n    model_uuid: Union[str, UUID]\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/inmemory.py</code> <pre><code>async def delete_model(self, model_uuid: Union[str, UUID]) -&gt; dict[str, Any]:\n    for model in self._models:\n        if model[\"uuid\"] == str(model_uuid):\n            self._models.remove(model)\n            return model\n    raise KeyNotFoundError(f\"model_uuid {model_uuid} not found\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryBackendDB/#fastagency.studio.db.inmemory.InMemoryBackendDB.find_many_auth_token","title":"find_many_auth_token  <code>async</code>","text":"<pre><code>find_many_auth_token(\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n) -&gt; list[dict[str, Any]]\n</code></pre> Source code in <code>fastagency/studio/db/inmemory.py</code> <pre><code>async def find_many_auth_token(\n    self, user_uuid: Union[str, UUID], deployment_uuid: Union[str, UUID]\n) -&gt; list[dict[str, Any]]:\n    return [\n        auth_token\n        for auth_token in self._auth_tokens\n        if auth_token[\"user_uuid\"] == str(user_uuid)\n        and auth_token[\"deployment_uuid\"] == str(deployment_uuid)\n    ]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryBackendDB/#fastagency.studio.db.inmemory.InMemoryBackendDB.find_many_model","title":"find_many_model  <code>async</code>","text":"<pre><code>find_many_model(\n    user_uuid: Union[str, UUID],\n    type_name: Optional[str] = None,\n) -&gt; list[dict[str, Any]]\n</code></pre> Source code in <code>fastagency/studio/db/inmemory.py</code> <pre><code>async def find_many_model(\n    self, user_uuid: Union[str, UUID], type_name: Optional[str] = None\n) -&gt; list[dict[str, Any]]:\n    return [model for model in self._models if model[\"user_uuid\"] == str(user_uuid)]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryBackendDB/#fastagency.studio.db.inmemory.InMemoryBackendDB.find_model","title":"find_model  <code>async</code>","text":"<pre><code>find_model(model_uuid: Union[str, UUID]) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/inmemory.py</code> <pre><code>async def find_model(self, model_uuid: Union[str, UUID]) -&gt; dict[str, Any]:\n    for model in self._models:\n        if model[\"uuid\"] == str(model_uuid):\n            return model\n    raise KeyNotFoundError(f\"model_uuid {model_uuid} not found\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryBackendDB/#fastagency.studio.db.inmemory.InMemoryBackendDB.update_model","title":"update_model  <code>async</code>","text":"<pre><code>update_model(\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/inmemory.py</code> <pre><code>async def update_model(\n    self,\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; dict[str, Any]:\n    for model in self._models:\n        if model[\"uuid\"] == str(model_uuid):\n            model[\"type_name\"] = type_name\n            model[\"model_name\"] = model_name\n            model[\"json_str\"] = json.loads(json_str)\n            model[\"updated_at\"] = datetime.now()\n            return model\n    raise KeyNotFoundError(f\"model_uuid {model_uuid} not found\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryFrontendDB/","title":"InMemoryFrontendDB","text":"","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryFrontendDB/#fastagency.studio.db.inmemory.InMemoryFrontendDB","title":"fastagency.studio.db.inmemory.InMemoryFrontendDB","text":"<pre><code>InMemoryFrontendDB()\n</code></pre> <p>               Bases: <code>FrontendDBProtocol</code></p> <p>In memory frontend database.</p> Source code in <code>fastagency/studio/db/inmemory.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"In memory frontend database.\"\"\"\n    self._users: list[dict[str, Any]] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/inmemory/InMemoryFrontendDB/#fastagency.studio.db.inmemory.InMemoryFrontendDB.get_user","title":"get_user  <code>async</code>","text":"<pre><code>get_user(user_uuid: Union[str, UUID]) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/db/inmemory.py</code> <pre><code>async def get_user(self, user_uuid: Union[str, UUID]) -&gt; Any:\n    for user in self._users:\n        if user[\"uuid\"] == str(user_uuid):\n            return user\n    raise KeyNotFoundError(f\"user_uuid {user_uuid} not found\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBackendDB/","title":"PrismaBackendDB","text":"","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBackendDB/#fastagency.studio.db.prisma.PrismaBackendDB","title":"fastagency.studio.db.prisma.PrismaBackendDB","text":"<p>               Bases: <code>BackendDBProtocol</code>, <code>PrismaBaseDB</code></p>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBackendDB/#fastagency.studio.db.prisma.PrismaBackendDB.ENV_VAR","title":"ENV_VAR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ENV_VAR = 'PY_DATABASE_URL'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBackendDB/#fastagency.studio.db.prisma.PrismaBackendDB.create_auth_token","title":"create_auth_token  <code>async</code>","text":"<pre><code>create_auth_token(\n    auth_token_uuid: Union[str, UUID],\n    name: str,\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    hashed_auth_token: str,\n    expiry: str,\n    expires_at: datetime,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/prisma.py</code> <pre><code>async def create_auth_token(\n    self,\n    auth_token_uuid: Union[str, UUID],\n    name: str,\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    hashed_auth_token: str,\n    expiry: str,\n    expires_at: datetime,\n) -&gt; dict[str, Any]:\n    async with self._get_db_connection() as db:\n        created_auth_token = await db.authtoken.create(  # type: ignore[attr-defined]\n            data={\n                \"uuid\": str(auth_token_uuid),\n                \"name\": name,\n                \"user_uuid\": str(user_uuid),\n                \"deployment_uuid\": str(deployment_uuid),\n                \"auth_token\": hashed_auth_token,\n                \"expiry\": expiry,\n                \"expires_at\": expires_at,\n            }\n        )\n    return created_auth_token.model_dump()  # type: ignore[no-any-return,union-attr]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBackendDB/#fastagency.studio.db.prisma.PrismaBackendDB.create_model","title":"create_model  <code>async</code>","text":"<pre><code>create_model(\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/prisma.py</code> <pre><code>async def create_model(\n    self,\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; dict[str, Any]:\n    async with self._get_db_connection() as db:\n        created_model = await db.model.create(\n            data={\n                \"uuid\": str(model_uuid),\n                \"user_uuid\": str(user_uuid),\n                \"type_name\": type_name,\n                \"model_name\": model_name,\n                \"json_str\": json_str,  # type: ignore[typeddict-item]\n            }\n        )\n    return created_model.model_dump()  # type: ignore[no-any-return]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBackendDB/#fastagency.studio.db.prisma.PrismaBackendDB.delete_auth_token","title":"delete_auth_token  <code>async</code>","text":"<pre><code>delete_auth_token(\n    auth_token_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/prisma.py</code> <pre><code>async def delete_auth_token(\n    self,\n    auth_token_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n) -&gt; dict[str, Any]:\n    async with self._get_db_connection() as db:\n        deleted_auth_token = await db.authtoken.delete(\n            where={  # type: ignore[typeddict-unknown-key]\n                \"uuid\": str(auth_token_uuid),\n                \"deployment_uuid\": str(deployment_uuid),\n                \"user_uuid\": str(user_uuid),\n            },\n        )\n    if deleted_auth_token is None:\n        raise KeyNotFoundError(f\"auth_token_uuid {auth_token_uuid} not found\")\n    return deleted_auth_token.model_dump()  # type: ignore[no-any-return,union-attr]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBackendDB/#fastagency.studio.db.prisma.PrismaBackendDB.delete_model","title":"delete_model  <code>async</code>","text":"<pre><code>delete_model(\n    model_uuid: Union[str, UUID]\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/prisma.py</code> <pre><code>async def delete_model(self, model_uuid: Union[str, UUID]) -&gt; dict[str, Any]:\n    async with self._get_db_connection() as db:\n        deleted_model = await db.model.delete(where={\"uuid\": str(model_uuid)})\n    if deleted_model is None:\n        raise KeyNotFoundError(f\"model_uuid {model_uuid} not found\")\n    return deleted_model.model_dump()  # type: ignore[no-any-return,union-attr]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBackendDB/#fastagency.studio.db.prisma.PrismaBackendDB.find_many_auth_token","title":"find_many_auth_token  <code>async</code>","text":"<pre><code>find_many_auth_token(\n    user_uuid: Union[str, UUID],\n    deployment_uuid: Union[str, UUID],\n) -&gt; list[dict[str, Any]]\n</code></pre> Source code in <code>fastagency/studio/db/prisma.py</code> <pre><code>async def find_many_auth_token(\n    self, user_uuid: Union[str, UUID], deployment_uuid: Union[str, UUID]\n) -&gt; list[dict[str, Any]]:\n    async with self._get_db_connection() as db:\n        auth_tokens = await db.authtoken.find_many(\n            where={\n                \"deployment_uuid\": str(deployment_uuid),\n                \"user_uuid\": str(user_uuid),\n            },\n        )\n    return [auth_token.model_dump() for auth_token in auth_tokens]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBackendDB/#fastagency.studio.db.prisma.PrismaBackendDB.find_many_model","title":"find_many_model  <code>async</code>","text":"<pre><code>find_many_model(\n    user_uuid: Union[str, UUID],\n    type_name: Optional[str] = None,\n) -&gt; list[dict[str, Any]]\n</code></pre> Source code in <code>fastagency/studio/db/prisma.py</code> <pre><code>async def find_many_model(\n    self, user_uuid: Union[str, UUID], type_name: Optional[str] = None\n) -&gt; list[dict[str, Any]]:\n    filters: dict[str, Any] = {\"user_uuid\": str(user_uuid)}\n    if type_name:\n        filters[\"type_name\"] = type_name\n\n    async with self._get_db_connection() as db:\n        models = await db.model.find_many(where=filters)  # type: ignore[arg-type]\n    return [model.model_dump() for model in models]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBackendDB/#fastagency.studio.db.prisma.PrismaBackendDB.find_model","title":"find_model  <code>async</code>","text":"<pre><code>find_model(model_uuid: Union[str, UUID]) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/prisma.py</code> <pre><code>async def find_model(self, model_uuid: Union[str, UUID]) -&gt; dict[str, Any]:\n    model_uuid = str(model_uuid)\n    async with self._get_db_connection() as db:\n        model: Optional[dict[str, Any]] = await db.query_first(\n            'SELECT * from \"Model\" where uuid='  # nosec: [B608]\n            + f\"'{model_uuid}'\"\n        )\n    if not model:\n        raise KeyNotFoundError(f\"model_uuid {model_uuid} not found\")\n    return model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBackendDB/#fastagency.studio.db.prisma.PrismaBackendDB.update_model","title":"update_model  <code>async</code>","text":"<pre><code>update_model(\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/db/prisma.py</code> <pre><code>async def update_model(\n    self,\n    model_uuid: Union[str, UUID],\n    user_uuid: Union[str, UUID],\n    type_name: str,\n    model_name: str,\n    json_str: str,\n) -&gt; dict[str, Any]:\n    async with self._get_db_connection() as db:\n        updated_model = await db.model.update(\n            where={\"uuid\": str(model_uuid)},  # type: ignore[arg-type]\n            data={  # type: ignore[typeddict-unknown-key]\n                \"type_name\": type_name,\n                \"model_name\": model_name,\n                \"json_str\": json_str,  # type: ignore[typeddict-item]\n                \"user_uuid\": str(user_uuid),\n            },\n        )\n    if updated_model is None:\n        raise KeyNotFoundError(f\"model_uuid {model_uuid} not found\")\n    return updated_model.model_dump()  # type: ignore[no-any-return,union-attr]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBaseDB/","title":"PrismaBaseDB","text":"","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBaseDB/#fastagency.studio.db.prisma.PrismaBaseDB","title":"fastagency.studio.db.prisma.PrismaBaseDB","text":"","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaBaseDB/#fastagency.studio.db.prisma.PrismaBaseDB.ENV_VAR","title":"ENV_VAR  <code>instance-attribute</code>","text":"<pre><code>ENV_VAR: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaFrontendDB/","title":"PrismaFrontendDB","text":"","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaFrontendDB/#fastagency.studio.db.prisma.PrismaFrontendDB","title":"fastagency.studio.db.prisma.PrismaFrontendDB","text":"<p>               Bases: <code>FrontendDBProtocol</code>, <code>PrismaBaseDB</code></p>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaFrontendDB/#fastagency.studio.db.prisma.PrismaFrontendDB.ENV_VAR","title":"ENV_VAR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ENV_VAR = 'DATABASE_URL'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/PrismaFrontendDB/#fastagency.studio.db.prisma.PrismaFrontendDB.get_user","title":"get_user  <code>async</code>","text":"<pre><code>get_user(user_uuid: Union[str, UUID]) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/db/prisma.py</code> <pre><code>async def get_user(self, user_uuid: Union[str, UUID]) -&gt; Any:\n    async with self._get_db_connection() as db:\n        select_query = 'SELECT * from \"User\" where uuid=' + f\"'{user_uuid}'\"  # nosec: [B608]\n        user = await db.query_first(\n            select_query  # nosec: [B608]\n        )\n    if not user:\n        raise KeyNotFoundError(f\"user_uuid {user_uuid} not found\")\n    return user\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/fastapi_lifespan/","title":"fastapi_lifespan","text":"","boost":0.5},{"location":"api/fastagency/studio/db/prisma/fastapi_lifespan/#fastagency.studio.db.prisma.fastapi_lifespan","title":"fastagency.studio.db.prisma.fastapi_lifespan  <code>async</code>","text":"<pre><code>fastapi_lifespan(\n    app: FastAPI,\n) -&gt; AsyncGenerator[None, None]\n</code></pre> Source code in <code>fastagency/studio/db/prisma.py</code> <pre><code>@asynccontextmanager\nasync def fastapi_lifespan(app: \"FastAPI\") -&gt; AsyncGenerator[None, None]:\n    async with _lifespan():\n        yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/db/prisma/faststream_lifespan/","title":"faststream_lifespan","text":"","boost":0.5},{"location":"api/fastagency/studio/db/prisma/faststream_lifespan/#fastagency.studio.db.prisma.faststream_lifespan","title":"fastagency.studio.db.prisma.faststream_lifespan  <code>async</code>","text":"<pre><code>faststream_lifespan(\n    context: ContextRepo,\n) -&gt; AsyncGenerator[None, None]\n</code></pre> Source code in <code>fastagency/studio/db/prisma.py</code> <pre><code>@asynccontextmanager\nasync def faststream_lifespan(context: ContextRepo) -&gt; AsyncGenerator[None, None]:\n    async with _lifespan():\n        yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/faststream_app/ping_handler/","title":"ping_handler","text":"","boost":0.5},{"location":"api/fastagency/studio/faststream_app/ping_handler/#fastagency.studio.faststream_app.ping_handler","title":"fastagency.studio.faststream_app.ping_handler  <code>async</code>","text":"<pre><code>ping_handler(\n    body: dict[str, Any], msg: NatsMessage, logger: Logger\n) -&gt; None\n</code></pre> Source code in <code>fastagency/studio/faststream_app.py</code> <pre><code>async def ping_handler(body: dict[str, Any], msg: NatsMessage, logger: Logger) -&gt; None:\n    raw_message = msg.raw_message\n\n    subject = raw_message.subject\n    client_id = subject.split(\".\")[1]\n    reply_subject = raw_message.reply\n\n    await msg.ack()\n    logger.info(\n        f\"Received a message on '{subject=} {reply_subject=}': {body=} -&gt; from {process_id=}\"\n    )\n\n    if \"msg\" not in body or body[\"msg\"].lower() != \"ping\":\n        reply_msg = f\"Unknown message: {body}, please send 'ping' in body['msg']\"\n    else:\n        reply_msg = \"pong\"\n\n    reply = {\n        \"msg\": reply_msg,\n        \"process_id\": process_id,\n    }\n    await broker.publish(json.dumps(reply), f\"pong.{client_id}\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/helpers/add_model_to_user/","title":"add_model_to_user","text":"","boost":0.5},{"location":"api/fastagency/studio/helpers/add_model_to_user/#fastagency.studio.helpers.add_model_to_user","title":"fastagency.studio.helpers.add_model_to_user  <code>async</code>","text":"<pre><code>add_model_to_user(\n    user_uuid: str,\n    type_name: str,\n    model_name: str,\n    model_uuid: str,\n    model: dict[str, Any],\n    background_tasks: BackgroundTasks,\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/helpers.py</code> <pre><code>async def add_model_to_user(\n    user_uuid: str,\n    type_name: str,\n    model_name: str,\n    model_uuid: str,\n    model: dict[str, Any],\n    background_tasks: BackgroundTasks,\n) -&gt; dict[str, Any]:\n    try:\n        registry = Registry.get_default()\n        validated_model = registry.validate(type_name, model_name, model)\n\n        validated_model_dict = validated_model.model_dump()\n        validated_model_json = validated_model.model_dump_json()\n        saas_app = None\n\n        if type_name == \"deployment\":\n            saas_app = await validate_tokens_and_create_gh_repo(\n                validated_model_dict, model_uuid\n            )\n\n            validated_model_dict[\"app_deploy_status\"] = \"inprogress\"\n            validated_model_dict[\"gh_repo_url\"] = saas_app.gh_repo_url\n\n            updated_validated_model_dict = json.loads(validated_model_json)\n            updated_validated_model_dict[\"app_deploy_status\"] = \"inprogress\"\n            updated_validated_model_dict[\"gh_repo_url\"] = saas_app.gh_repo_url\n            validated_model_json = json.dumps(updated_validated_model_dict)\n\n        await DefaultDB.frontend().get_user(user_uuid=user_uuid)\n        await DefaultDB.backend().create_model(\n            model_uuid=model_uuid,\n            user_uuid=user_uuid,\n            type_name=type_name,\n            model_name=model_name,\n            json_str=validated_model_json,\n        )\n\n        if saas_app is not None:\n            background_tasks.add_task(\n                deploy_saas_app,\n                saas_app,\n                user_uuid,\n                model_uuid,\n                type_name,\n                model_name,\n            )\n\n        return validated_model_dict\n\n    except InvalidGHTokenError as e:\n        raise HTTPException(status_code=422, detail=str(e)) from e\n\n    except InvalidFlyTokenError as e:\n        raise HTTPException(status_code=422, detail=str(e)) from e\n\n    except Exception as e:\n        msg = \"Oops! Something went wrong. Please try again later.\"\n        raise HTTPException(status_code=422, detail=msg) from e\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/helpers/check_model_name_uniqueness_and_raise/","title":"check_model_name_uniqueness_and_raise","text":"","boost":0.5},{"location":"api/fastagency/studio/helpers/check_model_name_uniqueness_and_raise/#fastagency.studio.helpers.check_model_name_uniqueness_and_raise","title":"fastagency.studio.helpers.check_model_name_uniqueness_and_raise  <code>async</code>","text":"<pre><code>check_model_name_uniqueness_and_raise(\n    user_uuid: str, model_name: str\n) -&gt; None\n</code></pre> Source code in <code>fastagency/studio/helpers.py</code> <pre><code>async def check_model_name_uniqueness_and_raise(\n    user_uuid: str, model_name: str\n) -&gt; None:\n    existing_models = await DefaultDB.backend().find_many_model(user_uuid=user_uuid)\n\n    if any(model[\"json_str\"].get(\"name\") == model_name for model in existing_models):\n        raise HTTPException(\n            status_code=422,\n            detail=[\n                {\n                    \"loc\": (\"name\",),\n                    \"msg\": \"Name already exists. Please enter a different name\",\n                }\n            ],\n        )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/helpers/create_autogen/","title":"create_autogen","text":"","boost":0.5},{"location":"api/fastagency/studio/helpers/create_autogen/#fastagency.studio.helpers.create_autogen","title":"fastagency.studio.helpers.create_autogen  <code>async</code>","text":"<pre><code>create_autogen(\n    model_ref: ObjectReference,\n    user_uuid: Union[str, UUID],\n    **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/helpers.py</code> <pre><code>async def create_autogen(\n    model_ref: ObjectReference,\n    user_uuid: Union[str, UUID],\n    **kwargs: Any,\n) -&gt; Any:\n    user_id = UUID(user_uuid) if isinstance(user_uuid, str) else user_uuid\n    model_id = (\n        UUID(model_ref.uuid)  # type: ignore[arg-type]\n        if isinstance(model_ref.uuid, str)\n        else model_ref.uuid\n    )\n    model = await get_model_by_ref(model_ref)\n\n    return await model.create_autogen(model_id=model_id, user_id=user_id, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/helpers/create_model/","title":"create_model","text":"","boost":0.5},{"location":"api/fastagency/studio/helpers/create_model/#fastagency.studio.helpers.create_model","title":"fastagency.studio.helpers.create_model  <code>async</code>","text":"<pre><code>create_model(\n    cls: type[T],\n    type_name: str,\n    user_uuid: Union[str, UUID],\n    background_tasks: Optional[BackgroundTasks] = None,\n    **kwargs: Any\n) -&gt; tuple[UUID, dict[str, Any]]\n</code></pre> Source code in <code>fastagency/studio/helpers.py</code> <pre><code>async def create_model(\n    cls: type[T],\n    type_name: str,\n    user_uuid: Union[str, UUID],\n    background_tasks: Optional[BackgroundTasks] = None,\n    **kwargs: Any,\n) -&gt; tuple[UUID, dict[str, Any]]:\n    model = cls(**kwargs)\n    model_uuid = uuid.uuid4()\n\n    validated_model = await add_model_to_user(\n        user_uuid=str(user_uuid),\n        type_name=type_name,\n        model_name=cls.__name__,  # type: ignore [attr-defined]\n        model_uuid=str(model_uuid),\n        model=model.model_dump(),\n        background_tasks=background_tasks,  # type: ignore[arg-type]\n    )\n    return model_uuid, validated_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/helpers/create_model_ref/","title":"create_model_ref","text":"","boost":0.5},{"location":"api/fastagency/studio/helpers/create_model_ref/#fastagency.studio.helpers.create_model_ref","title":"fastagency.studio.helpers.create_model_ref  <code>async</code>","text":"<pre><code>create_model_ref(\n    cls: type[T],\n    type_name: str,\n    user_uuid: Union[str, UUID],\n    background_tasks: Optional[BackgroundTasks] = None,\n    **kwargs: Any\n) -&gt; ObjectReference\n</code></pre> Source code in <code>fastagency/studio/helpers.py</code> <pre><code>async def create_model_ref(\n    cls: type[T],\n    type_name: str,\n    user_uuid: Union[str, UUID],\n    background_tasks: Optional[BackgroundTasks] = None,\n    **kwargs: Any,\n) -&gt; ObjectReference:\n    model_uuid, _ = await create_model(\n        cls,\n        type_name,\n        user_uuid,\n        background_tasks,\n        **kwargs,\n    )\n\n    model_ref = cls.get_reference_model()(uuid=model_uuid)\n\n    return model_ref\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/helpers/deploy_saas_app/","title":"deploy_saas_app","text":"","boost":0.5},{"location":"api/fastagency/studio/helpers/deploy_saas_app/#fastagency.studio.helpers.deploy_saas_app","title":"fastagency.studio.helpers.deploy_saas_app  <code>async</code>","text":"<pre><code>deploy_saas_app(\n    saas_app: SaasAppGenerator,\n    user_uuid: str,\n    model_uuid: str,\n    type_name: str,\n    model_name: str,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/studio/helpers.py</code> <pre><code>async def deploy_saas_app(\n    saas_app: SaasAppGenerator,\n    user_uuid: str,\n    model_uuid: str,\n    type_name: str,\n    model_name: str,\n) -&gt; None:\n    deployment_auth_token = await create_deployment_auth_token(user_uuid, model_uuid)\n    saas_app.deployment_auth_token = deployment_auth_token.auth_token\n    saas_app.developer_uuid = user_uuid\n\n    await asyncify(saas_app.execute)()\n\n    found_model = await DefaultDB.backend().find_model(model_uuid=model_uuid)\n    found_model[\"json_str\"][\"app_deploy_status\"] = \"completed\"\n    await DefaultDB.backend().update_model(\n        model_uuid=found_model[\"uuid\"],\n        user_uuid=user_uuid,\n        type_name=type_name,\n        model_name=model_name,\n        json_str=json.dumps(found_model[\"json_str\"]),\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/helpers/get_all_models_for_user/","title":"get_all_models_for_user","text":"","boost":0.5},{"location":"api/fastagency/studio/helpers/get_all_models_for_user/#fastagency.studio.helpers.get_all_models_for_user","title":"fastagency.studio.helpers.get_all_models_for_user  <code>async</code>","text":"<pre><code>get_all_models_for_user(\n    user_uuid: Union[str, UUID],\n    type_name: Optional[str] = None,\n) -&gt; list[dict[str, Any]]\n</code></pre> Source code in <code>fastagency/studio/helpers.py</code> <pre><code>async def get_all_models_for_user(\n    user_uuid: Union[str, UUID],\n    type_name: Optional[str] = None,\n) -&gt; list[dict[str, Any]]:\n    models = await DefaultDB.backend().find_many_model(\n        user_uuid=user_uuid, type_name=type_name\n    )\n\n    return models  # type: ignore[no-any-return]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/helpers/get_model_by_ref/","title":"get_model_by_ref","text":"","boost":0.5},{"location":"api/fastagency/studio/helpers/get_model_by_ref/#fastagency.studio.helpers.get_model_by_ref","title":"fastagency.studio.helpers.get_model_by_ref  <code>async</code>","text":"<pre><code>get_model_by_ref(model_ref: ObjectReference) -&gt; Model\n</code></pre> Source code in <code>fastagency/studio/helpers.py</code> <pre><code>async def get_model_by_ref(model_ref: ObjectReference) -&gt; Model:\n    return await get_model_by_uuid(model_ref.uuid)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/helpers/get_model_by_uuid/","title":"get_model_by_uuid","text":"","boost":0.5},{"location":"api/fastagency/studio/helpers/get_model_by_uuid/#fastagency.studio.helpers.get_model_by_uuid","title":"fastagency.studio.helpers.get_model_by_uuid  <code>async</code>","text":"<pre><code>get_model_by_uuid(model_uuid: Union[str, UUID]) -&gt; Model\n</code></pre> Source code in <code>fastagency/studio/helpers.py</code> <pre><code>async def get_model_by_uuid(model_uuid: Union[str, UUID]) -&gt; Model:\n    model_dict = await DefaultDB.backend().find_model(model_uuid=model_uuid)\n\n    registry = Registry.get_default()\n    model = registry.validate(\n        type=model_dict[\"type_name\"],\n        name=model_dict[\"model_name\"],\n        model=model_dict[\"json_str\"],\n    )\n\n    return model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/helpers/validate_tokens_and_create_gh_repo/","title":"validate_tokens_and_create_gh_repo","text":"","boost":0.5},{"location":"api/fastagency/studio/helpers/validate_tokens_and_create_gh_repo/#fastagency.studio.helpers.validate_tokens_and_create_gh_repo","title":"fastagency.studio.helpers.validate_tokens_and_create_gh_repo  <code>async</code>","text":"<pre><code>validate_tokens_and_create_gh_repo(\n    model: dict[str, Any], model_uuid: str\n) -&gt; SaasAppGenerator\n</code></pre> Source code in <code>fastagency/studio/helpers.py</code> <pre><code>async def validate_tokens_and_create_gh_repo(\n    model: dict[str, Any],\n    model_uuid: str,\n) -&gt; SaasAppGenerator:\n    found_gh_token = await DefaultDB.backend().find_model(\n        model_uuid=model[\"gh_token\"][\"uuid\"]\n    )\n    found_fly_token = await DefaultDB.backend().find_model(\n        model_uuid=model[\"fly_token\"][\"uuid\"]\n    )\n\n    found_gh_token_uuid = found_gh_token[\"json_str\"][\"gh_token\"]\n    found_fly_token_uuid = found_fly_token[\"json_str\"][\"fly_token\"]\n\n    saas_app = SaasAppGenerator(\n        fly_api_token=found_fly_token_uuid,\n        github_token=found_gh_token_uuid,\n        app_name=model[\"name\"],\n        repo_name=model[\"repo_name\"],\n        fly_app_name=model[\"fly_app_name\"],\n        fastagency_deployment_uuid=model_uuid,\n    )\n\n    saas_app.validate_tokens()\n    saas_app.create_new_repository()\n    return saas_app\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/ErrorResoponseModel/","title":"ErrorResoponseModel","text":"","boost":0.5},{"location":"api/fastagency/studio/io/ionats/ErrorResoponseModel/#fastagency.studio.io.ionats.ErrorResoponseModel","title":"fastagency.studio.io.ionats.ErrorResoponseModel","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/ErrorResoponseModel/#fastagency.studio.io.ionats.ErrorResoponseModel.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/IONats/","title":"IONats","text":"","boost":0.5},{"location":"api/fastagency/studio/io/ionats/IONats/#fastagency.studio.io.ionats.IONats","title":"fastagency.studio.io.ionats.IONats","text":"<pre><code>IONats(\n    user_id: str,\n    thread_id: str,\n    deployment_id: Optional[str] = \"playground\",\n)\n</code></pre> <p>               Bases: <code>IOStream</code></p> <p>Initialize the IO class.</p> Source code in <code>fastagency/studio/io/ionats.py</code> <pre><code>def __init__(\n    self, user_id: str, thread_id: str, deployment_id: Optional[str] = \"playground\"\n) -&gt; None:\n    \"\"\"Initialize the IO class.\"\"\"\n    self.queue: Queue = Queue()  # type: ignore[type-arg]\n    self._publisher = broker.publish\n    self._user_id = user_id\n    self._thread_id = thread_id\n    self._deployment_id = deployment_id\n    self.subscriber: \"AsyncAPISubscriber\"\n\n    self._input_request_subject = (\n        f\"chat.client.messages.{user_id}.{deployment_id}.{thread_id}\"\n    )\n    self._input_receive_subject = (\n        f\"chat.server.messages.{user_id}.{deployment_id}.{thread_id}\"\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/IONats/#fastagency.studio.io.ionats.IONats.queue","title":"queue  <code>instance-attribute</code>","text":"<pre><code>queue: Queue = Queue()\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/IONats/#fastagency.studio.io.ionats.IONats.subscriber","title":"subscriber  <code>instance-attribute</code>","text":"<pre><code>subscriber: AsyncAPISubscriber\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/IONats/#fastagency.studio.io.ionats.IONats.create","title":"create  <code>async</code> <code>classmethod</code>","text":"<pre><code>create(\n    user_id: Union[str, UUID],\n    thread_id: Union[str, UUID],\n    deployment_id: Optional[\n        Union[str, UUID]\n    ] = \"playground\",\n) -&gt; IONats\n</code></pre> Source code in <code>fastagency/studio/io/ionats.py</code> <pre><code>@classmethod\nasync def create(\n    cls,\n    user_id: Union[str, UUID],\n    thread_id: Union[str, UUID],\n    deployment_id: Optional[Union[str, UUID]] = \"playground\",\n) -&gt; \"IONats\":\n    thread_id = str(thread_id)\n    user_id = str(user_id)\n    deployment_id = str(deployment_id)\n    self = cls(user_id=user_id, thread_id=thread_id, deployment_id=deployment_id)\n\n    # dynamically subscribe to the chat server\n    self.subscriber = broker.subscriber(\n        subject=self._input_receive_subject,\n        stream=stream,\n        deliver_policy=api.DeliverPolicy(\"all\"),\n    )\n    self.subscriber(self.handle_input)\n    broker.setup_subscriber(self.subscriber)\n    await self.subscriber.start()\n\n    return self\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/IONats/#fastagency.studio.io.ionats.IONats.handle_input","title":"handle_input  <code>async</code>","text":"<pre><code>handle_input(\n    body: InputResponseModel,\n    msg: NatsMessage,\n    logger: Logger,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/studio/io/ionats.py</code> <pre><code>async def handle_input(\n    self, body: InputResponseModel, msg: NatsMessage, logger: Logger\n) -&gt; None:\n    logger.info(\n        f\"Received message in subject '{self._input_receive_subject}': {body}\"\n    )\n\n    self.queue.put(msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/IONats/#fastagency.studio.io.ionats.IONats.input","title":"input","text":"<pre><code>input(prompt: str = '', *, password: bool = False) -&gt; str\n</code></pre> <p>Read a line from the input stream.</p> PARAMETER DESCRIPTION <code>prompt</code> <p>The prompt to display. Defaults to \"\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>password</code> <p>Whether to read a password. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The line read from the input stream.</p> <p> TYPE: <code>str</code> </p> Source code in <code>fastagency/studio/io/ionats.py</code> <pre><code>def input(self, prompt: str = \"\", *, password: bool = False) -&gt; str:\n    \"\"\"Read a line from the input stream.\n\n    Args:\n        prompt (str, optional): The prompt to display. Defaults to \"\".\n        password (bool, optional): Whether to read a password. Defaults to False.\n\n    Returns:\n        str: The line read from the input stream.\n\n    \"\"\"\n    # request a new input\n    input_request_data = InputRequestModel(prompt=prompt, is_password=password)\n    input_request_msg = ServerResponseModel(data=input_request_data, type=\"input\")\n\n    syncify(self._publisher)(input_request_msg, self._input_request_subject)\n\n    # wait for the input to arrive and be propagated to queue\n    while self.queue.empty():\n        time.sleep(0.1)\n\n    msg: NatsMessage = self.queue.get()\n\n    self.queue.task_done()\n    syncify(msg.ack)()\n\n    retval = InputResponseModel.model_validate_json(\n        msg.raw_message.data.decode(\"utf-8\")\n    ).msg\n\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/IONats/#fastagency.studio.io.ionats.IONats.print","title":"print","text":"<pre><code>print(\n    *objects: Any,\n    sep: str = \" \",\n    end: str = \"\\n\",\n    flush: bool = False\n) -&gt; None\n</code></pre> <p>Print data to the output stream.</p> PARAMETER DESCRIPTION <code>objects</code> <p>The data to print.</p> <p> TYPE: <code>any</code> DEFAULT: <code>()</code> </p> <code>sep</code> <p>The separator between objects. Defaults to \" \".</p> <p> TYPE: <code>str</code> DEFAULT: <code>' '</code> </p> <code>end</code> <p>The end of the output. Defaults to \"\\n\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'\\n'</code> </p> <code>flush</code> <p>Whether to flush the output. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>fastagency/studio/io/ionats.py</code> <pre><code>def print(\n    self, *objects: Any, sep: str = \" \", end: str = \"\\n\", flush: bool = False\n) -&gt; None:\n    r\"\"\"Print data to the output stream.\n\n    Args:\n        objects (any): The data to print.\n        sep (str, optional): The separator between objects. Defaults to \" \".\n        end (str, optional): The end of the output. Defaults to \"\\n\".\n        flush (bool, optional): Whether to flush the output. Defaults to False.\n    \"\"\"\n    xs = sep.join(map(str, objects)) + end\n\n    print_data = PrintModel(msg=xs)\n    msg = ServerResponseModel(data=print_data, type=\"print\")\n\n    syncify(self._publisher)(msg, self._input_request_subject)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InitiateModel/","title":"InitiateModel","text":"","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InitiateModel/#fastagency.studio.io.ionats.InitiateModel","title":"fastagency.studio.io.ionats.InitiateModel","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InitiateModel/#fastagency.studio.io.ionats.InitiateModel.deployment_id","title":"deployment_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>deployment_id: Optional[Union[str, UUID]] = 'playground'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InitiateModel/#fastagency.studio.io.ionats.InitiateModel.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InitiateModel/#fastagency.studio.io.ionats.InitiateModel.team_id","title":"team_id  <code>instance-attribute</code>","text":"<pre><code>team_id: UUID\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InitiateModel/#fastagency.studio.io.ionats.InitiateModel.thread_id","title":"thread_id  <code>instance-attribute</code>","text":"<pre><code>thread_id: UUID\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InitiateModel/#fastagency.studio.io.ionats.InitiateModel.user_id","title":"user_id  <code>instance-attribute</code>","text":"<pre><code>user_id: UUID\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InputRequestModel/","title":"InputRequestModel","text":"","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InputRequestModel/#fastagency.studio.io.ionats.InputRequestModel","title":"fastagency.studio.io.ionats.InputRequestModel","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InputRequestModel/#fastagency.studio.io.ionats.InputRequestModel.is_password","title":"is_password  <code>instance-attribute</code>","text":"<pre><code>is_password: bool\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InputRequestModel/#fastagency.studio.io.ionats.InputRequestModel.prompt","title":"prompt  <code>instance-attribute</code>","text":"<pre><code>prompt: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InputResponseModel/","title":"InputResponseModel","text":"","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InputResponseModel/#fastagency.studio.io.ionats.InputResponseModel","title":"fastagency.studio.io.ionats.InputResponseModel","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/InputResponseModel/#fastagency.studio.io.ionats.InputResponseModel.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/PrintModel/","title":"PrintModel","text":"","boost":0.5},{"location":"api/fastagency/studio/io/ionats/PrintModel/#fastagency.studio.io.ionats.PrintModel","title":"fastagency.studio.io.ionats.PrintModel","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/PrintModel/#fastagency.studio.io.ionats.PrintModel.msg","title":"msg  <code>instance-attribute</code>","text":"<pre><code>msg: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/ServerResponseModel/","title":"ServerResponseModel","text":"","boost":0.5},{"location":"api/fastagency/studio/io/ionats/ServerResponseModel/#fastagency.studio.io.ionats.ServerResponseModel","title":"fastagency.studio.io.ionats.ServerResponseModel","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/ServerResponseModel/#fastagency.studio.io.ionats.ServerResponseModel.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: Union[\n    InputRequestModel,\n    PrintModel,\n    TerminateModel,\n    ErrorResoponseModel,\n]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/ServerResponseModel/#fastagency.studio.io.ionats.ServerResponseModel.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: TYPE_LITERAL\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/TerminateModel/","title":"TerminateModel","text":"","boost":0.5},{"location":"api/fastagency/studio/io/ionats/TerminateModel/#fastagency.studio.io.ionats.TerminateModel","title":"fastagency.studio.io.ionats.TerminateModel","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/TerminateModel/#fastagency.studio.io.ionats.TerminateModel.msg","title":"msg  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>msg: str = 'Chat completed.'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/io/ionats/create_team/","title":"create_team","text":"","boost":0.5},{"location":"api/fastagency/studio/io/ionats/create_team/#fastagency.studio.io.ionats.create_team","title":"fastagency.studio.io.ionats.create_team  <code>async</code>","text":"<pre><code>create_team(\n    team_id: UUID, user_id: UUID\n) -&gt; Callable[[str], list[dict[str, Any]]]\n</code></pre> Source code in <code>fastagency/studio/io/ionats.py</code> <pre><code>async def create_team(\n    team_id: UUID, user_id: UUID\n) -&gt; Callable[[str], list[dict[str, Any]]]:\n    team_dict = await DefaultDB.backend().find_model(team_id)\n\n    team_model: Union[TwoAgentTeam, MultiAgentTeam]\n    if \"initial_agent\" in team_dict[\"json_str\"]:\n        team_model = TwoAgentTeam(**team_dict[\"json_str\"])\n    elif \"agent_1\" in team_dict[\"json_str\"]:\n        team_model = MultiAgentTeam(**team_dict[\"json_str\"])\n    else:\n        raise ValueError(f\"Unknown team model {team_dict['json_str']}\")\n\n    autogen_team = await team_model.create_autogen(team_id, user_id)\n\n    return autogen_team.initiate_chat  # type: ignore[no-any-return]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/Registry/","title":"Registry","text":"","boost":0.5},{"location":"api/fastagency/studio/models/Registry/#fastagency.studio.models.Registry","title":"fastagency.studio.models.Registry","text":"<pre><code>Registry()\n</code></pre> <p>Initialize the registry.</p> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the registry.\"\"\"\n    self._store: \"Dict[str, Dict[str, Tuple[Optional[Type[Model]], Type[ObjectReference]]]]\" = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/Registry/#fastagency.studio.models.Registry.create_reference","title":"create_reference","text":"<pre><code>create_reference(\n    type_name: str, model_name: str\n) -&gt; type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def create_reference(\n    self, type_name: str, model_name: str\n) -&gt; type[ObjectReference]:\n    # check if the type_name is already registered\n    if type_name not in self._store:\n        self._store[type_name] = {}\n\n    # check if the model_name is already registered\n    if model_name in self._store[type_name]:\n        raise ValueError(\"Reference already created for the model\")\n\n    # create a reference model and store it\n    reference_model = create_reference_model(\n        type_name=type_name, model_name=model_name\n    )\n    self._store[type_name][model_name] = (None, reference_model)\n\n    return reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/Registry/#fastagency.studio.models.Registry.get_default","title":"get_default  <code>classmethod</code>","text":"<pre><code>get_default() -&gt; Registry\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>@classmethod\ndef get_default(cls) -&gt; \"Registry\":\n    if cls._default_registry is None:\n        cls._default_registry = cls()\n    return cls._default_registry\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/Registry/#fastagency.studio.models.Registry.get_dongling_references","title":"get_dongling_references","text":"<pre><code>get_dongling_references() -&gt; list[type[ObjectReference]]\n</code></pre> <p>Return a list of all dongling references.</p> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def get_dongling_references(self) -&gt; list[type[ObjectReference]]:\n    \"\"\"Return a list of all dongling references.\"\"\"\n    return [\n        reference\n        for type_name, models in self._store.items()\n        for model_name, (model, reference) in models.items()\n        if model is None\n    ]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/Registry/#fastagency.studio.models.Registry.get_model_schema","title":"get_model_schema","text":"<pre><code>get_model_schema(model: type[Model]) -&gt; ModelSchema\n</code></pre> <p>Return the schema for the given model.</p> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def get_model_schema(self, model: type[Model]) -&gt; ModelSchema:\n    \"\"\"Return the schema for the given model.\"\"\"\n    return ModelSchema(\n        name=model.__name__,\n        json_schema=model.model_json_schema(),\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/Registry/#fastagency.studio.models.Registry.get_model_schemas","title":"get_model_schemas","text":"<pre><code>get_model_schemas(type_name: str) -&gt; ModelSchemas\n</code></pre> <p>Return the schemas for all models of the given type.</p> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def get_model_schemas(self, type_name: str) -&gt; ModelSchemas:\n    \"\"\"Return the schemas for all models of the given type.\"\"\"\n    models = self._store.get(type_name)\n    if models is None:\n        raise ValueError(f\"No models registered under '{type_name}'\")\n\n    schemas = [\n        self.get_model_schema(model)  # type: ignore[arg-type]\n        for _, (model, _) in models.items()\n    ]\n\n    return ModelSchemas(name=type_name, schemas=schemas)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/Registry/#fastagency.studio.models.Registry.get_model_type","title":"get_model_type","text":"<pre><code>get_model_type(type: str, name: str) -&gt; type[Model]\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def get_model_type(self, type: str, name: str) -&gt; type[Model]:\n    if type not in self._store:\n        raise ValueError(f\"No models registered under '{type}'\")\n\n    models = self._store[type]\n    if name not in models:\n        raise ValueError(f\"No model '{name}' registered under '{type}'\")\n\n    model, _ = models[name]\n    if model is None:\n        raise ValueError(f\"Model '{name}' not found in '{type}'\")\n\n    return model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/Registry/#fastagency.studio.models.Registry.get_models_refs_by_type","title":"get_models_refs_by_type","text":"<pre><code>get_models_refs_by_type(\n    type: str,\n) -&gt; list[type[ObjectReference]]\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def get_models_refs_by_type(self, type: str) -&gt; list[type[ObjectReference]]:\n    if type not in self._store:\n        raise ValueError(f\"No models registered under '{type}'\")\n\n    models = self._store[type]\n\n    return [ref for _, ref in models.values()]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/Registry/#fastagency.studio.models.Registry.get_schemas","title":"get_schemas","text":"<pre><code>get_schemas() -&gt; Schemas\n</code></pre> <p>Return the schemas for all registered models.</p> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def get_schemas(self) -&gt; Schemas:\n    \"\"\"Return the schemas for all registered models.\"\"\"\n    dongling_references = self.get_dongling_references()\n    if dongling_references:\n        raise ValueError(\n            f\"Found {len(dongling_references)} dongling references: {dongling_references}\"\n        )\n\n    list_of_schemas = [\n        self.get_model_schemas(type_name) for type_name in self._store\n    ]\n\n    return Schemas(list_of_schemas=list_of_schemas)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/Registry/#fastagency.studio.models.Registry.register","title":"register","text":"<pre><code>register(type_name: str) -&gt; Callable[[type[M]], type[M]]\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def register(self, type_name: str) -&gt; Callable[[type[M]], type[M]]:\n    if type_name not in self._store:\n        self._store[type_name] = {}\n\n    type_store = self._store[type_name]\n\n    def _inner(model: type[M]) -&gt; type[M]:\n        model_type_name = model.__name__\n\n        model_tuple = type_store.get(model_type_name)\n        existing_model, existing_ref = model_tuple if model_tuple else (None, None)\n\n        if existing_model:\n            raise ValueError(\n                f\"Model '{model_type_name}' already registered under '{type_name}'\"\n            )\n\n        if existing_ref is None:\n            reference_model: type[ObjectReference] = create_reference_model(\n                model, type_name=type_name\n            )\n        else:\n            reference_model = existing_ref\n            reference_model._data_class = model\n\n        model._reference_model = reference_model\n\n        type_store[model_type_name] = (model, reference_model)\n\n        return model\n\n    return _inner\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/Registry/#fastagency.studio.models.Registry.validate","title":"validate","text":"<pre><code>validate(\n    type: str, name: str, model: dict[str, Any]\n) -&gt; Model\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def validate(self, type: str, name: str, model: dict[str, Any]) -&gt; Model:\n    model_type = self.get_model_type(type, name)\n    return model_type(**model)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/assistant/AssistantAgent/","title":"AssistantAgent","text":"","boost":0.5},{"location":"api/fastagency/studio/models/agents/assistant/AssistantAgent/#fastagency.studio.models.agents.assistant.AssistantAgent","title":"fastagency.studio.models.agents.assistant.AssistantAgent","text":"<p>               Bases: <code>AgentBaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/agents/assistant/AssistantAgent/#fastagency.studio.models.agents.assistant.AssistantAgent.llm","title":"llm  <code>instance-attribute</code>","text":"<pre><code>llm: llm_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/assistant/AssistantAgent/#fastagency.studio.models.agents.assistant.AssistantAgent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/assistant/AssistantAgent/#fastagency.studio.models.agents.assistant.AssistantAgent.system_message","title":"system_message  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>system_message: str = (\n    \"You are a helpful assistant. After you successfully answer all questions and there are no new questions asked after your response (e.g. there is no specific direction or question asked after you give a response), terminate the chat by outputting 'TERMINATE'\"\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/assistant/AssistantAgent/#fastagency.studio.models.agents.assistant.AssistantAgent.toolbox_1","title":"toolbox_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_1: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/assistant/AssistantAgent/#fastagency.studio.models.agents.assistant.AssistantAgent.toolbox_2","title":"toolbox_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_2: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/assistant/AssistantAgent/#fastagency.studio.models.agents.assistant.AssistantAgent.toolbox_3","title":"toolbox_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_3: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/assistant/AssistantAgent/#fastagency.studio.models.agents.assistant.AssistantAgent.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; tuple[AssistantAgent, list[OpenAPI]]\n</code></pre> Source code in <code>fastagency/studio/models/agents/assistant.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; tuple[autogen.agentchat.AssistantAgent, list[OpenAPI]]:\n    my_model = await cls.from_db(model_id)\n\n    llm_model = await my_model.llm.get_data_model().from_db(my_model.llm.uuid)\n\n    llm = await llm_model.create_autogen(my_model.llm.uuid, user_id)\n\n    clients = await my_model.get_clients_from_toolboxes(user_id)\n\n    agent_name = my_model.name\n\n    if \"human_input_mode\" in kwargs:\n        kwargs.pop(\"human_input_mode\")\n\n    if \"system_message\" in kwargs:\n        system_message = kwargs[\"system_message\"]\n        kwargs.pop(\"system_message\")\n    else:\n        system_message = my_model.system_message\n\n    agent = autogen.agentchat.AssistantAgent(\n        name=agent_name,\n        llm_config=llm,\n        system_message=system_message,\n        code_execution_config=False,\n        **kwargs,\n    )\n    return agent, clients\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/assistant/AssistantAgent/#fastagency.studio.models.agents.assistant.AssistantAgent.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/assistant/AssistantAgent/#fastagency.studio.models.agents.assistant.AssistantAgent.get_clients_from_toolboxes","title":"get_clients_from_toolboxes  <code>async</code>","text":"<pre><code>get_clients_from_toolboxes(user_id: UUID) -&gt; list[OpenAPI]\n</code></pre> Source code in <code>fastagency/studio/models/agents/base.py</code> <pre><code>async def get_clients_from_toolboxes(self, user_id: UUID) -&gt; list[OpenAPI]:\n    clients: list[OpenAPI] = []\n    for i in range(3):\n        toolbox_property = getattr(self, f\"toolbox_{i+1}\")\n        if toolbox_property is None:\n            continue\n\n        toolbox_model = await toolbox_property.get_data_model().from_db(\n            toolbox_property.uuid\n        )\n        client = await toolbox_model.create_autogen(toolbox_property.uuid, user_id)\n        clients.append(client)\n    return clients\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/assistant/AssistantAgent/#fastagency.studio.models.agents.assistant.AssistantAgent.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/base/AgentBaseModel/","title":"AgentBaseModel","text":"","boost":0.5},{"location":"api/fastagency/studio/models/agents/base/AgentBaseModel/#fastagency.studio.models.agents.base.AgentBaseModel","title":"fastagency.studio.models.agents.base.AgentBaseModel","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/agents/base/AgentBaseModel/#fastagency.studio.models.agents.base.AgentBaseModel.llm","title":"llm  <code>instance-attribute</code>","text":"<pre><code>llm: llm_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/base/AgentBaseModel/#fastagency.studio.models.agents.base.AgentBaseModel.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/base/AgentBaseModel/#fastagency.studio.models.agents.base.AgentBaseModel.toolbox_1","title":"toolbox_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_1: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/base/AgentBaseModel/#fastagency.studio.models.agents.base.AgentBaseModel.toolbox_2","title":"toolbox_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_2: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/base/AgentBaseModel/#fastagency.studio.models.agents.base.AgentBaseModel.toolbox_3","title":"toolbox_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_3: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/base/AgentBaseModel/#fastagency.studio.models.agents.base.AgentBaseModel.create_autogen","title":"create_autogen  <code>abstractmethod</code> <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\n@abstractmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any: ...  # pragma: no cover\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/base/AgentBaseModel/#fastagency.studio.models.agents.base.AgentBaseModel.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/base/AgentBaseModel/#fastagency.studio.models.agents.base.AgentBaseModel.get_clients_from_toolboxes","title":"get_clients_from_toolboxes  <code>async</code>","text":"<pre><code>get_clients_from_toolboxes(user_id: UUID) -&gt; list[OpenAPI]\n</code></pre> Source code in <code>fastagency/studio/models/agents/base.py</code> <pre><code>async def get_clients_from_toolboxes(self, user_id: UUID) -&gt; list[OpenAPI]:\n    clients: list[OpenAPI] = []\n    for i in range(3):\n        toolbox_property = getattr(self, f\"toolbox_{i+1}\")\n        if toolbox_property is None:\n            continue\n\n        toolbox_model = await toolbox_property.get_data_model().from_db(\n            toolbox_property.uuid\n        )\n        client = await toolbox_model.create_autogen(toolbox_property.uuid, user_id)\n        clients.append(client)\n    return clients\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/base/AgentBaseModel/#fastagency.studio.models.agents.base.AgentBaseModel.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/user_proxy/UserProxyAgent/","title":"UserProxyAgent","text":"","boost":0.5},{"location":"api/fastagency/studio/models/agents/user_proxy/UserProxyAgent/#fastagency.studio.models.agents.user_proxy.UserProxyAgent","title":"fastagency.studio.models.agents.user_proxy.UserProxyAgent","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/agents/user_proxy/UserProxyAgent/#fastagency.studio.models.agents.user_proxy.UserProxyAgent.max_consecutive_auto_reply","title":"max_consecutive_auto_reply  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max_consecutive_auto_reply: Optional[int] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/user_proxy/UserProxyAgent/#fastagency.studio.models.agents.user_proxy.UserProxyAgent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/user_proxy/UserProxyAgent/#fastagency.studio.models.agents.user_proxy.UserProxyAgent.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; tuple[AssistantAgent, list[OpenAPI]]\n</code></pre> Source code in <code>fastagency/studio/models/agents/user_proxy.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; tuple[autogen.agentchat.AssistantAgent, list[OpenAPI]]:\n    my_model = await cls.from_db(model_id)\n\n    agent_name = my_model.name\n\n    agent = autogen.agentchat.UserProxyAgent(\n        name=agent_name,\n        max_consecutive_auto_reply=my_model.max_consecutive_auto_reply,\n        code_execution_config=False,\n        **kwargs,\n    )\n    return agent, []\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/user_proxy/UserProxyAgent/#fastagency.studio.models.agents.user_proxy.UserProxyAgent.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/user_proxy/UserProxyAgent/#fastagency.studio.models.agents.user_proxy.UserProxyAgent.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/BingAPIKey/","title":"BingAPIKey","text":"","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/BingAPIKey/#fastagency.studio.models.agents.web_surfer.BingAPIKey","title":"fastagency.studio.models.agents.web_surfer.BingAPIKey","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/BingAPIKey/#fastagency.studio.models.agents.web_surfer.BingAPIKey.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/BingAPIKey/#fastagency.studio.models.agents.web_surfer.BingAPIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/BingAPIKey/#fastagency.studio.models.agents.web_surfer.BingAPIKey.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/models/agents/web_surfer.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model = await cls.from_db(model_id)\n\n    return my_model.api_key\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/BingAPIKey/#fastagency.studio.models.agents.web_surfer.BingAPIKey.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/BingAPIKey/#fastagency.studio.models.agents.web_surfer.BingAPIKey.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/","title":"WebSurferAgent","text":"","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent","title":"fastagency.studio.models.agents.web_surfer.WebSurferAgent","text":"<p>               Bases: <code>AgentBaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent.bing_api_key","title":"bing_api_key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bing_api_key: Optional[BingAPIKeyRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent.llm","title":"llm  <code>instance-attribute</code>","text":"<pre><code>llm: llm_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent.summarizer_llm","title":"summarizer_llm  <code>instance-attribute</code>","text":"<pre><code>summarizer_llm: llm_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent.toolbox_1","title":"toolbox_1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_1: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent.toolbox_2","title":"toolbox_2  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_2: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent.toolbox_3","title":"toolbox_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toolbox_3: Optional[ToolboxRef] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent.viewport_size","title":"viewport_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>viewport_size: int = 4096\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; tuple[AssistantAgent, list[WebSurferToolbox]]\n</code></pre> Source code in <code>fastagency/studio/models/agents/web_surfer.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; tuple[AutoGenAssistantAgent, list[WebSurferToolbox]]:\n    from ...helpers import create_autogen, get_model_by_uuid\n\n    websurfer_model: WebSurferAgent = await get_model_by_uuid(model_id)  # type: ignore [assignment]\n    llm_config = await create_autogen(websurfer_model.llm, user_id)\n    summarizer_llm_config = await create_autogen(\n        websurfer_model.summarizer_llm, user_id\n    )\n\n    bing_api_key = (\n        await create_autogen(websurfer_model.bing_api_key, user_id)\n        if websurfer_model.bing_api_key\n        else None\n    )\n\n    viewport_size = websurfer_model.viewport_size\n\n    websurfer_chat = WebSurferChat(\n        name_prefix=websurfer_model.name,\n        llm_config=llm_config,\n        summarizer_llm_config=summarizer_llm_config,\n        viewport_size=viewport_size,\n        bing_api_key=bing_api_key,\n    )\n\n    web_surfer_toolbox = WebSurferToolbox(websurfer_chat)\n\n    agent_name = websurfer_model.name\n\n    system_message = (\n        \"You are a helpful assistant with access to web surfing capabilities.\"\n        \"Please use 'create_new_task' and 'continue_task_with_additional_instructions' functions to provide answers to other agents.\"\n    )\n\n    agent = AutoGenAssistantAgent(\n        name=agent_name,\n        llm_config=llm_config,\n        system_message=system_message,\n        code_execution_config=False,\n        **kwargs,\n    )\n\n    return agent, [web_surfer_toolbox]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent.get_clients_from_toolboxes","title":"get_clients_from_toolboxes  <code>async</code>","text":"<pre><code>get_clients_from_toolboxes(user_id: UUID) -&gt; list[OpenAPI]\n</code></pre> Source code in <code>fastagency/studio/models/agents/base.py</code> <pre><code>async def get_clients_from_toolboxes(self, user_id: UUID) -&gt; list[OpenAPI]:\n    clients: list[OpenAPI] = []\n    for i in range(3):\n        toolbox_property = getattr(self, f\"toolbox_{i+1}\")\n        if toolbox_property is None:\n            continue\n\n        toolbox_model = await toolbox_property.get_data_model().from_db(\n            toolbox_property.uuid\n        )\n        client = await toolbox_model.create_autogen(toolbox_property.uuid, user_id)\n        clients.append(client)\n    return clients\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferAgent/#fastagency.studio.models.agents.web_surfer.WebSurferAgent.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferToolbox/","title":"WebSurferToolbox","text":"","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferToolbox/#fastagency.studio.models.agents.web_surfer.WebSurferToolbox","title":"fastagency.studio.models.agents.web_surfer.WebSurferToolbox","text":"<pre><code>WebSurferToolbox(websurfer_chat: WebSurferChat)\n</code></pre> <p>Create a toolbox for the web surfer agent. This toolbox will contain functions to delegate web surfing tasks to the internal web surfer agent.</p> PARAMETER DESCRIPTION <code>websurfer_chat</code> <p>The web surfer chat agent</p> <p> TYPE: <code>WebSurferChat</code> </p> Source code in <code>fastagency/studio/models/agents/web_surfer.py</code> <pre><code>def __init__(self, websurfer_chat: WebSurferChat):\n    \"\"\"Create a toolbox for the web surfer agent. This toolbox will contain functions to delegate web surfing tasks to the internal web surfer agent.\n\n    Args:\n        websurfer_chat (WebSurferChat): The web surfer chat agent\n    \"\"\"\n    self.websurfer_chat = websurfer_chat\n\n    def create_new_task(\n        task: Annotated[str, \"task for websurfer\"],\n    ) -&gt; str:\n        try:\n            return syncify(self.websurfer_chat.create_new_task)(task)\n        except Exception as e:\n            raise e\n\n    create_new_task._description = (  # type: ignore [attr-defined]\n        \"Delegate web surfing task to internal web surfer agent\"\n    )\n\n    def continue_task_with_additional_instructions(\n        message: Annotated[\n            str,\n            \"Additional instructions for the task after receiving the initial answer\",\n        ],\n    ) -&gt; str:\n        try:\n            return syncify(\n                self.websurfer_chat.continue_task_with_additional_instructions\n            )(message)\n        except Exception as e:\n            raise e\n\n    continue_task_with_additional_instructions._description = (  # type: ignore [attr-defined]\n        \"Continue the task with additional instructions\"\n    )\n\n    self.registered_funcs = [\n        create_new_task,\n        continue_task_with_additional_instructions,\n    ]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferToolbox/#fastagency.studio.models.agents.web_surfer.WebSurferToolbox.registered_funcs","title":"registered_funcs  <code>instance-attribute</code>","text":"<pre><code>registered_funcs = [\n    create_new_task,\n    continue_task_with_additional_instructions,\n]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferToolbox/#fastagency.studio.models.agents.web_surfer.WebSurferToolbox.websurfer_chat","title":"websurfer_chat  <code>instance-attribute</code>","text":"<pre><code>websurfer_chat = websurfer_chat\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferToolbox/#fastagency.studio.models.agents.web_surfer.WebSurferToolbox.register_for_execution","title":"register_for_execution","text":"<pre><code>register_for_execution(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/studio/models/agents/web_surfer.py</code> <pre><code>def register_for_execution(self, agent: AutoGenConversableAgent) -&gt; None:\n    for f in self.registered_funcs:\n        agent.register_for_execution()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer/WebSurferToolbox/#fastagency.studio.models.agents.web_surfer.WebSurferToolbox.register_for_llm","title":"register_for_llm","text":"<pre><code>register_for_llm(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/studio/models/agents/web_surfer.py</code> <pre><code>def register_for_llm(self, agent: AutoGenConversableAgent) -&gt; None:\n    for f in self.registered_funcs:\n        agent.register_for_llm()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferAnswer/","title":"WebSurferAnswer","text":"","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferAnswer","title":"fastagency.studio.models.agents.web_surfer_autogen.WebSurferAnswer","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferAnswer.is_successful","title":"is_successful  <code>instance-attribute</code>","text":"<pre><code>is_successful: bool\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferAnswer.long_answer","title":"long_answer  <code>instance-attribute</code>","text":"<pre><code>long_answer: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferAnswer.short_answer","title":"short_answer  <code>instance-attribute</code>","text":"<pre><code>short_answer: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferAnswer.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferAnswer.visited_links","title":"visited_links  <code>instance-attribute</code>","text":"<pre><code>visited_links: list[HttpUrl]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferAnswer/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferAnswer.get_example_answer","title":"get_example_answer  <code>staticmethod</code>","text":"<pre><code>get_example_answer() -&gt; WebSurferAnswer\n</code></pre> Source code in <code>fastagency/studio/models/agents/web_surfer_autogen.py</code> <pre><code>@staticmethod\ndef get_example_answer() -&gt; \"WebSurferAnswer\":\n    return WebSurferAnswer(\n        task=\"What is the most popular QLED TV to buy on amazon.com?\",\n        is_successful=True,\n        short_answer='Amazon Fire TV 55\" Omni QLED Series 4K UHD smart TV',\n        long_answer='Amazon has the best selling page by different categories and there is a category for QLED TVs under electroincs. The most popular QLED TV is Amazon Fire TV 55\" Omni QLED Series 4K UHD smart TV, Dolby Vision IQ, Fire TV Ambient Experience, local dimming, hands-free with Alexa. It is the best selling QLED TV on Amazon.',\n        visited_links=[\n            \"https://www.amazon.com/Best-Sellers/\",\n            \"https://www.amazon.com/Best-Sellers-Electronics-QLED-TVs/\",\n        ],\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/","title":"WebSurferChat","text":"","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat","title":"fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat","text":"<pre><code>WebSurferChat(\n    name_prefix: str,\n    llm_config: dict[str, Any],\n    summarizer_llm_config: dict[str, Any],\n    viewport_size: int,\n    bing_api_key: Optional[str],\n    max_consecutive_auto_reply: int = 30,\n    max_links_to_click: int = 10,\n    websurfer_kwargs: dict[str, Any] = {},\n    assistant_kwargs: dict[str, Any] = {},\n)\n</code></pre> <p>Create a new WebSurferChat instance.</p> PARAMETER DESCRIPTION <code>name_prefix</code> <p>The name prefix of the inner AutoGen agents</p> <p> TYPE: <code>str</code> </p> <code>llm_config</code> <p>The LLM configuration</p> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>summarizer_llm_config</code> <p>The summarizer LLM configuration</p> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>viewport_size</code> <p>The viewport size of the browser</p> <p> TYPE: <code>int</code> </p> <code>bing_api_key</code> <p>The Bing API key for the browser</p> <p> TYPE: <code>Optional[str]</code> </p> <code>max_consecutive_auto_reply</code> <p>The maximum consecutive auto reply. Defaults to 30.</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p> <code>max_links_to_click</code> <p>The maximum links to click. Defaults to 10.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>websurfer_kwargs</code> <p>The keyword arguments for the websurfer. Defaults to {}.</p> <p> TYPE: <code>Dict[str, Any]</code> DEFAULT: <code>{}</code> </p> <code>assistant_kwargs</code> <p>The keyword arguments for the assistant. Defaults to {}.</p> <p> TYPE: <code>Dict[str, Any]</code> DEFAULT: <code>{}</code> </p> Source code in <code>fastagency/studio/models/agents/web_surfer_autogen.py</code> <pre><code>def __init__(\n    self,\n    name_prefix: str,\n    llm_config: dict[str, Any],\n    summarizer_llm_config: dict[str, Any],\n    viewport_size: int,\n    bing_api_key: Optional[str],\n    max_consecutive_auto_reply: int = 30,\n    max_links_to_click: int = 10,\n    websurfer_kwargs: dict[str, Any] = {},  # noqa: B006\n    assistant_kwargs: dict[str, Any] = {},  # noqa: B006\n):\n    \"\"\"Create a new WebSurferChat instance.\n\n    Args:\n        name_prefix (str): The name prefix of the inner AutoGen agents\n        llm_config (Dict[str, Any]): The LLM configuration\n        summarizer_llm_config (Dict[str, Any]): The summarizer LLM configuration\n        viewport_size (int): The viewport size of the browser\n        bing_api_key (Optional[str]): The Bing API key for the browser\n        max_consecutive_auto_reply (int, optional): The maximum consecutive auto reply. Defaults to 30.\n        max_links_to_click (int, optional): The maximum links to click. Defaults to 10.\n        websurfer_kwargs (Dict[str, Any], optional): The keyword arguments for the websurfer. Defaults to {}.\n        assistant_kwargs (Dict[str, Any], optional): The keyword arguments for the assistant. Defaults to {}.\n\n    \"\"\"\n    self.name_prefix = name_prefix\n    self.llm_config = llm_config\n    self.summarizer_llm_config = summarizer_llm_config\n    self.viewport_size = viewport_size\n    self.bing_api_key = (\n        bing_api_key if bing_api_key is not None else os.getenv(\"BING_API_KEY\")\n    )\n    self.max_consecutive_auto_reply = max_consecutive_auto_reply\n    self.max_links_to_click = max_links_to_click\n    self.websurfer_kwargs = websurfer_kwargs\n    self.assistant_kwargs = assistant_kwargs\n\n    self.task = \"not set yet\"\n    self.last_is_termination_msg_error = \"\"\n\n    self.browser_config = {\n        \"viewport_size\": self.viewport_size,\n        \"bing_api_key\": self.bing_api_key,\n        \"request_kwargs\": {\n            \"headers\": {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\",\n            }\n        },\n    }\n\n    if \"human_input_mode\" in self.websurfer_kwargs:\n        self.websurfer_kwargs.pop(\"human_input_mode\")\n\n    self.websurfer = AutoGenWebSurferAgent(\n        name=f\"{self.name_prefix}_inner_websurfer\",\n        llm_config=self.llm_config,\n        summarizer_llm_config=self.summarizer_llm_config,\n        browser_config=self.browser_config,\n        human_input_mode=\"NEVER\",\n        is_termination_msg=self.is_termination_msg,\n        **self.websurfer_kwargs,\n    )\n\n    if \"human_input_mode\" in self.assistant_kwargs:\n        self.assistant_kwargs.pop(\"human_input_mode\")\n\n    self.assistant = AutoGenAssistantAgent(\n        name=f\"{self.name_prefix}_inner_assistant\",\n        llm_config=self.llm_config,\n        human_input_mode=\"NEVER\",\n        system_message=self.system_message,\n        max_consecutive_auto_reply=self.max_consecutive_auto_reply,\n        # is_termination_msg=self.is_termination_msg,\n        **self.assistant_kwargs,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.assistant","title":"assistant  <code>instance-attribute</code>","text":"<pre><code>assistant = AssistantAgent(\n    name=f\"{name_prefix}_inner_assistant\",\n    llm_config=llm_config,\n    human_input_mode=\"NEVER\",\n    system_message=system_message,\n    max_consecutive_auto_reply=max_consecutive_auto_reply,\n    **assistant_kwargs,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.assistant_kwargs","title":"assistant_kwargs  <code>instance-attribute</code>","text":"<pre><code>assistant_kwargs = assistant_kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.bing_api_key","title":"bing_api_key  <code>instance-attribute</code>","text":"<pre><code>bing_api_key = (\n    bing_api_key\n    if bing_api_key is not None\n    else getenv(\"BING_API_KEY\")\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.browser_config","title":"browser_config  <code>instance-attribute</code>","text":"<pre><code>browser_config = {\n    \"viewport_size\": viewport_size,\n    \"bing_api_key\": bing_api_key,\n    \"request_kwargs\": {\n        \"headers\": {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"\n        }\n    },\n}\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.error_message","title":"error_message  <code>property</code>","text":"<pre><code>error_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.example_answer","title":"example_answer  <code>property</code>","text":"<pre><code>example_answer: WebSurferAnswer\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.initial_message","title":"initial_message  <code>property</code>","text":"<pre><code>initial_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.last_is_termination_msg_error","title":"last_is_termination_msg_error  <code>instance-attribute</code>","text":"<pre><code>last_is_termination_msg_error = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.llm_config","title":"llm_config  <code>instance-attribute</code>","text":"<pre><code>llm_config = llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.max_consecutive_auto_reply","title":"max_consecutive_auto_reply  <code>instance-attribute</code>","text":"<pre><code>max_consecutive_auto_reply = max_consecutive_auto_reply\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.max_links_to_click","title":"max_links_to_click  <code>instance-attribute</code>","text":"<pre><code>max_links_to_click = max_links_to_click\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.name_prefix","title":"name_prefix  <code>instance-attribute</code>","text":"<pre><code>name_prefix = name_prefix\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.summarizer_llm_config","title":"summarizer_llm_config  <code>instance-attribute</code>","text":"<pre><code>summarizer_llm_config = summarizer_llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.system_message","title":"system_message  <code>property</code>","text":"<pre><code>system_message: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.task","title":"task  <code>instance-attribute</code>","text":"<pre><code>task = 'not set yet'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.viewport_size","title":"viewport_size  <code>instance-attribute</code>","text":"<pre><code>viewport_size = viewport_size\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.websurfer","title":"websurfer  <code>instance-attribute</code>","text":"<pre><code>websurfer = WebSurferAgent(\n    name=f\"{name_prefix}_inner_websurfer\",\n    llm_config=llm_config,\n    summarizer_llm_config=summarizer_llm_config,\n    browser_config=browser_config,\n    human_input_mode=\"NEVER\",\n    is_termination_msg=is_termination_msg,\n    **websurfer_kwargs,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.websurfer_kwargs","title":"websurfer_kwargs  <code>instance-attribute</code>","text":"<pre><code>websurfer_kwargs = websurfer_kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.continue_task_with_additional_instructions","title":"continue_task_with_additional_instructions  <code>async</code>","text":"<pre><code>continue_task_with_additional_instructions(\n    message: str,\n) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/models/agents/web_surfer_autogen.py</code> <pre><code>async def continue_task_with_additional_instructions(self, message: str) -&gt; str:\n    try:\n        answer = await asyncify(self._chat_with_websurfer)(\n            message=message,\n            clear_history=False,\n        )\n    except Exception as e:\n        return self._get_error_from_exception(message, e)\n\n    return self.create_final_reply(message, answer)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.create_final_reply","title":"create_final_reply","text":"<pre><code>create_final_reply(\n    task: str, message: WebSurferAnswer\n) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/models/agents/web_surfer_autogen.py</code> <pre><code>def create_final_reply(self, task: str, message: WebSurferAnswer) -&gt; str:\n    retval = (\n        \"We have successfully completed the task:\\n\\n\"\n        if message.is_successful\n        else \"We have failed to complete the task:\\n\\n\"\n    )\n    retval += f\"{task}\\n\\n\"\n    retval += f\"Short answer: {message.short_answer}\\n\\n\"\n    retval += f\"Explanation: {message.long_answer}\\n\\n\"\n    retval += \"Visited links:\\n\"\n    for link in message.visited_links:\n        retval += f\"  - {link}\\n\"\n\n    return retval\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.create_new_task","title":"create_new_task  <code>async</code>","text":"<pre><code>create_new_task(task: str) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/models/agents/web_surfer_autogen.py</code> <pre><code>async def create_new_task(self, task: str) -&gt; str:\n    self.task = task\n    try:\n        answer = await asyncify(self._chat_with_websurfer)(\n            message=self.initial_message,\n            clear_history=True,\n        )\n    except Exception as e:\n        return self._get_error_from_exception(task, e)\n\n    return self.create_final_reply(task, answer)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/agents/web_surfer_autogen/WebSurferChat/#fastagency.studio.models.agents.web_surfer_autogen.WebSurferChat.is_termination_msg","title":"is_termination_msg","text":"<pre><code>is_termination_msg(msg: dict[str, Any]) -&gt; bool\n</code></pre> Source code in <code>fastagency/studio/models/agents/web_surfer_autogen.py</code> <pre><code>def is_termination_msg(self, msg: dict[str, Any]) -&gt; bool:\n    # print(f\"is_termination_msg({msg=})\")\n    if (\n        \"content\" in msg\n        and msg[\"content\"] is not None\n        and \"TERMINATE\" in msg[\"content\"]\n    ):\n        return True\n    try:\n        WebSurferAnswer.model_validate_json(msg[\"content\"])\n        return True\n    except Exception as e:\n        self.last_is_termination_msg_error = str(e)\n        return False\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/Model/","title":"Model","text":"","boost":0.5},{"location":"api/fastagency/studio/models/base/Model/#fastagency.studio.models.base.Model","title":"fastagency.studio.models.base.Model","text":"<p>               Bases: <code>BaseModel</code>, <code>ABC</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/base/Model/#fastagency.studio.models.base.Model.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/Model/#fastagency.studio.models.base.Model.create_autogen","title":"create_autogen  <code>abstractmethod</code> <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\n@abstractmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any: ...  # pragma: no cover\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/Model/#fastagency.studio.models.base.Model.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/Model/#fastagency.studio.models.base.Model.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/ModelTypeFinder/","title":"ModelTypeFinder","text":"","boost":0.5},{"location":"api/fastagency/studio/models/base/ModelTypeFinder/#fastagency.studio.models.base.ModelTypeFinder","title":"fastagency.studio.models.base.ModelTypeFinder","text":"<p>               Bases: <code>Protocol</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/base/ModelTypeFinder/#fastagency.studio.models.base.ModelTypeFinder.get_model_type","title":"get_model_type","text":"<pre><code>get_model_type(type: str, name: str) -&gt; type[Model]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>def get_model_type(self, type: str, name: str) -&gt; type[Model]: ...\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/ObjectReference/","title":"ObjectReference","text":"","boost":0.5},{"location":"api/fastagency/studio/models/base/ObjectReference/#fastagency.studio.models.base.ObjectReference","title":"fastagency.studio.models.base.ObjectReference","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/base/ObjectReference/#fastagency.studio.models.base.ObjectReference.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/ObjectReference/#fastagency.studio.models.base.ObjectReference.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/ObjectReference/#fastagency.studio.models.base.ObjectReference.uuid","title":"uuid  <code>instance-attribute</code>","text":"<pre><code>uuid: UUID\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/ObjectReference/#fastagency.studio.models.base.ObjectReference.check_type","title":"check_type","text":"<pre><code>check_type() -&gt; ObjectReference\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@model_validator(mode=\"after\")\ndef check_type(self) -&gt; \"ObjectReference\":\n    if self.type == \"\" or self.name == \"\":\n        raise ValueError(\"type and name must be set\")\n    return self\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/ObjectReference/#fastagency.studio.models.base.ObjectReference.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(uuid: UUID) -&gt; ObjectReference\n</code></pre> <p>Factory method to create a new instance of the class.</p> <p>This method is used to create a new instance of the class with the given UUID. It is exactly the same as calling <code>ObjectReference(uuid=uuid)</code>, but without type checking failing because of the missing <code>type</code> and <code>name</code> arguments.</p> PARAMETER DESCRIPTION <code>uuid</code> <p>The unique identifier of the object</p> <p> TYPE: <code>UUID</code> </p> RETURNS DESCRIPTION <code>ObjectReference</code> <p>The new instance of the class</p> <p> TYPE: <code>ObjectReference</code> </p> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef create(cls, uuid: UUID) -&gt; \"ObjectReference\":\n    \"\"\"Factory method to create a new instance of the class.\n\n    This method is used to create a new instance of the class with the given UUID. It\n    is exactly the same as calling `ObjectReference(uuid=uuid)`, but without type\n    checking failing because of the missing `type` and `name` arguments.\n\n    Args:\n        uuid (UUID): The unique identifier of the object\n\n    Returns:\n        ObjectReference: The new instance of the class\n    \"\"\"\n    return cls(uuid=uuid)  # type: ignore[call-arg]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/ObjectReference/#fastagency.studio.models.base.ObjectReference.get_data_model","title":"get_data_model  <code>classmethod</code>","text":"<pre><code>get_data_model() -&gt; Type[Model]\n</code></pre> <p>Get the data class for the reference.</p> <p>This method returns the data class that is associated with the reference class.</p> RETURNS DESCRIPTION <code>Type[Model]</code> <p>Type[BM]: The data class for the reference</p> RAISES DESCRIPTION <code>ValueError</code> <p>If the data class is not set</p> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_data_model(cls) -&gt; \"Type[Model]\":\n    \"\"\"Get the data class for the reference.\n\n    This method returns the data class that is associated with the reference class.\n\n    Returns:\n        Type[BM]: The data class for the reference\n\n    Raises:\n        ValueError: If the data class is not set\n\n    \"\"\"\n    if cls._data_class is None:\n        raise RuntimeError(\"data class not set\")\n\n    return cls._data_class\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/create_reference_model/","title":"create_reference_model","text":"","boost":0.5},{"location":"api/fastagency/studio/models/base/create_reference_model/#fastagency.studio.models.base.create_reference_model","title":"fastagency.studio.models.base.create_reference_model","text":"<pre><code>create_reference_model(\n    model_class: Optional[type[M]] = None,\n    *,\n    type_name: str,\n    model_name: Optional[str] = None\n) -&gt; type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>def create_reference_model(\n    model_class: Optional[type[M]] = None,\n    *,\n    type_name: str,\n    model_name: Optional[str] = None,\n) -&gt; type[ObjectReference]:\n    if model_class is None and model_name is None:\n        raise ValueError(\"Either model_class or model_name should be provided\")\n    if model_class is not None and model_name is not None:\n        raise ValueError(\"Only one of model_class or model_name should be provided\")\n\n    model_type_name = model_class.__name__ if model_class is not None else model_name\n\n    LiteralType: TypeAlias = Literal[type_name]  # type: ignore[valid-type]\n    LiteralModelName: TypeAlias = Literal[model_type_name]  # type: ignore[valid-type]\n\n    reference_model = create_model(\n        f\"{model_type_name}Ref\",\n        type=(\n            Annotated[  # type: ignore[valid-type]\n                LiteralType, Field(description=\"The name of the type of the data\")\n            ],\n            type_name,\n        ),\n        name=(\n            Annotated[LiteralModelName, Field(description=\"The name of the data\")],\n            model_type_name,\n        ),\n        uuid=(\n            Annotated[UUID, Field(description=\"The unique identifier\", title=\"UUID\")],\n            ...,\n        ),\n        __base__=ObjectReference,\n    )\n    reference_model.__module__ = (\n        f\"fastagency.studio.models.{type_name}.{model_type_name}._generated\"\n    )\n\n    reference_model._data_class = model_class  # type: ignore[attr-defined]\n    if model_class is not None:\n        model_class._reference_model = reference_model\n\n    return reference_model  # type: ignore[return-value]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/base/get_reference_model/","title":"get_reference_model","text":"","boost":0.5},{"location":"api/fastagency/studio/models/base/get_reference_model/#fastagency.studio.models.base.get_reference_model","title":"fastagency.studio.models.base.get_reference_model","text":"<pre><code>get_reference_model(\n    model: type[BaseModel],\n) -&gt; type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>def get_reference_model(model: type[BaseModel]) -&gt; type[ObjectReference]:\n    if issubclass(model, ObjectReference):\n        return model\n    elif hasattr(model, \"_reference_model\"):\n        return model._reference_model  # type: ignore[attr-defined,no-any-return]\n    raise ValueError(f\"Class '{model.__name__}' is not and does not have a reference\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/","title":"Deployment","text":"","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/#fastagency.studio.models.deployments.deployment.Deployment","title":"fastagency.studio.models.deployments.deployment.Deployment","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/#fastagency.studio.models.deployments.deployment.Deployment.fly_app_name","title":"fly_app_name  <code>instance-attribute</code>","text":"<pre><code>fly_app_name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/#fastagency.studio.models.deployments.deployment.Deployment.fly_token","title":"fly_token  <code>instance-attribute</code>","text":"<pre><code>fly_token: FlyTokenRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/#fastagency.studio.models.deployments.deployment.Deployment.gh_token","title":"gh_token  <code>instance-attribute</code>","text":"<pre><code>gh_token: GitHubTokenRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/#fastagency.studio.models.deployments.deployment.Deployment.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/#fastagency.studio.models.deployments.deployment.Deployment.repo_name","title":"repo_name  <code>instance-attribute</code>","text":"<pre><code>repo_name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/#fastagency.studio.models.deployments.deployment.Deployment.team","title":"team  <code>instance-attribute</code>","text":"<pre><code>team: team_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/#fastagency.studio.models.deployments.deployment.Deployment.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/models/deployments/deployment.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; Any:\n    raise NotImplementedError\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/#fastagency.studio.models.deployments.deployment.Deployment.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/#fastagency.studio.models.deployments.deployment.Deployment.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/#fastagency.studio.models.deployments.deployment.Deployment.validate_fly_app_name","title":"validate_fly_app_name  <code>classmethod</code>","text":"<pre><code>validate_fly_app_name(value: Any) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/models/deployments/deployment.py</code> <pre><code>@field_validator(\"fly_app_name\")\n@classmethod\ndef validate_fly_app_name(cls: type[\"Deployment\"], value: Any) -&gt; Any:\n    if not re.match(r\"^[a-zA-Z][a-zA-Z0-9\\- ]*$\", value):\n        raise ValueError(\n            \"Fly.io app name must contain only letters, numbers, spaces, dashes and should not start with a numeric literal. Example of a valid name: my-fly-app\"\n        )\n    return value\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/deployments/deployment/Deployment/#fastagency.studio.models.deployments.deployment.Deployment.validate_repo_name","title":"validate_repo_name  <code>classmethod</code>","text":"<pre><code>validate_repo_name(value: Any) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/models/deployments/deployment.py</code> <pre><code>@field_validator(\"repo_name\")\n@classmethod\ndef validate_repo_name(cls: type[\"Deployment\"], value: Any) -&gt; Any:\n    if not re.match(r\"^[A-Za-z0-9._-]+$\", value):\n        raise ValueError(\n            \"The repository name can only contain ASCII letters, digits, and the characters ., -, and _. Example of a valid name: my-fa-repo\"\n        )\n    return value\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/Anthropic/","title":"Anthropic","text":"","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/Anthropic/#fastagency.studio.models.llms.anthropic.Anthropic","title":"fastagency.studio.models.llms.anthropic.Anthropic","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/Anthropic/#fastagency.studio.models.llms.anthropic.Anthropic.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: AnthropicAPIKeyRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/Anthropic/#fastagency.studio.models.llms.anthropic.Anthropic.api_type","title":"api_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_type: Literal['anthropic'] = 'anthropic'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/Anthropic/#fastagency.studio.models.llms.anthropic.Anthropic.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: URL = URL(url='https://api.anthropic.com/v1')\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/Anthropic/#fastagency.studio.models.llms.anthropic.Anthropic.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: AnthropicModels = 'claude-3-5-sonnet-20240620'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/Anthropic/#fastagency.studio.models.llms.anthropic.Anthropic.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/Anthropic/#fastagency.studio.models.llms.anthropic.Anthropic.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float = 0.8\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/Anthropic/#fastagency.studio.models.llms.anthropic.Anthropic.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/models/llms/anthropic.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; dict[str, Any]:\n    my_model: Anthropic = await cls.from_db(model_id)\n\n    api_key_model: AnthropicAPIKey = (\n        await my_model.api_key.get_data_model().from_db(my_model.api_key.uuid)\n    )\n\n    api_key = await api_key_model.create_autogen(my_model.api_key.uuid, user_id)\n\n    config_list = [\n        {\n            \"model\": my_model.model,\n            \"api_key\": api_key,\n            \"base_url\": str(my_model.base_url),\n            \"api_type\": my_model.api_type,\n        }\n    ]\n\n    llm_config = {\n        \"config_list\": config_list,\n        \"temperature\": my_model.temperature,\n    }\n\n    return llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/Anthropic/#fastagency.studio.models.llms.anthropic.Anthropic.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/Anthropic/#fastagency.studio.models.llms.anthropic.Anthropic.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/AnthropicAPIKey/","title":"AnthropicAPIKey","text":"","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/AnthropicAPIKey/#fastagency.studio.models.llms.anthropic.AnthropicAPIKey","title":"fastagency.studio.models.llms.anthropic.AnthropicAPIKey","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/AnthropicAPIKey/#fastagency.studio.models.llms.anthropic.AnthropicAPIKey.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/AnthropicAPIKey/#fastagency.studio.models.llms.anthropic.AnthropicAPIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/AnthropicAPIKey/#fastagency.studio.models.llms.anthropic.AnthropicAPIKey.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/models/llms/anthropic.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model: AnthropicAPIKey = await cls.from_db(model_id)\n\n    return my_model.api_key\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/AnthropicAPIKey/#fastagency.studio.models.llms.anthropic.AnthropicAPIKey.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/AnthropicAPIKey/#fastagency.studio.models.llms.anthropic.AnthropicAPIKey.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/anthropic/AnthropicAPIKey/#fastagency.studio.models.llms.anthropic.AnthropicAPIKey.validate_api_key","title":"validate_api_key  <code>classmethod</code>","text":"<pre><code>validate_api_key(value: Any) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/models/llms/anthropic.py</code> <pre><code>@field_validator(\"api_key\")\n@classmethod\ndef validate_api_key(cls: type[\"AnthropicAPIKey\"], value: Any) -&gt; Any:\n    if not re.match(r\"^sk-ant-api03-[a-zA-Z0-9\\-\\_]{95}$\", value):\n        raise ValueError(\"Invalid Anthropic API Key\")\n    return value\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/","title":"AzureOAI","text":"","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/#fastagency.studio.models.llms.azure.AzureOAI","title":"fastagency.studio.models.llms.azure.AzureOAI","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/#fastagency.studio.models.llms.azure.AzureOAI.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: AzureOAIAPIKeyRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/#fastagency.studio.models.llms.azure.AzureOAI.api_type","title":"api_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_type: Literal['azure'] = 'azure'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/#fastagency.studio.models.llms.azure.AzureOAI.api_version","title":"api_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_version: AzureApiVersionsLiteral = '2024-02-01'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/#fastagency.studio.models.llms.azure.AzureOAI.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: URL = url\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/#fastagency.studio.models.llms.azure.AzureOAI.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: str = 'gpt-3.5-turbo'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/#fastagency.studio.models.llms.azure.AzureOAI.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/#fastagency.studio.models.llms.azure.AzureOAI.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float = 0.8\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/#fastagency.studio.models.llms.azure.AzureOAI.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/models/llms/azure.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; dict[str, Any]:\n    my_model = await cls.from_db(model_id)\n\n    api_key_model = await my_model.api_key.get_data_model().from_db(\n        my_model.api_key.uuid\n    )\n    api_key = await api_key_model.create_autogen(my_model.api_key.uuid, user_id)\n\n    config_list = [\n        {\n            \"model\": my_model.model,\n            \"api_key\": api_key,\n            \"base_url\": str(my_model.base_url),\n            \"api_type\": my_model.api_type,\n            \"api_version\": my_model.api_version,\n        }\n    ]\n\n    llm_config = {\n        \"config_list\": config_list,\n        \"temperature\": my_model.temperature,\n    }\n\n    return llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/#fastagency.studio.models.llms.azure.AzureOAI.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/#fastagency.studio.models.llms.azure.AzureOAI.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAI/#fastagency.studio.models.llms.azure.AzureOAI.validate_base_url","title":"validate_base_url  <code>classmethod</code>","text":"<pre><code>validate_base_url(value: Any) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/models/llms/azure.py</code> <pre><code>@field_validator(\"base_url\")\n@classmethod\ndef validate_base_url(cls: type[\"AzureOAI\"], value: Any) -&gt; Any:\n    if \"{\" in value or \"}\" in value:\n        raise PydanticCustomError(\"invalid_base_url\", BASE_URL_ERROR_MESSAGE)\n    return value\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAIAPIKey/","title":"AzureOAIAPIKey","text":"","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAIAPIKey/#fastagency.studio.models.llms.azure.AzureOAIAPIKey","title":"fastagency.studio.models.llms.azure.AzureOAIAPIKey","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAIAPIKey/#fastagency.studio.models.llms.azure.AzureOAIAPIKey.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAIAPIKey/#fastagency.studio.models.llms.azure.AzureOAIAPIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAIAPIKey/#fastagency.studio.models.llms.azure.AzureOAIAPIKey.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/models/llms/azure.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model = await cls.from_db(model_id)\n\n    return my_model.api_key\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAIAPIKey/#fastagency.studio.models.llms.azure.AzureOAIAPIKey.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/AzureOAIAPIKey/#fastagency.studio.models.llms.azure.AzureOAIAPIKey.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/UrlModel/","title":"UrlModel","text":"","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/UrlModel/#fastagency.studio.models.llms.azure.UrlModel","title":"fastagency.studio.models.llms.azure.UrlModel","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/llms/azure/UrlModel/#fastagency.studio.models.llms.azure.UrlModel.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url: URL\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAI/","title":"OpenAI","text":"","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAI/#fastagency.studio.models.llms.openai.OpenAI","title":"fastagency.studio.models.llms.openai.OpenAI","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAI/#fastagency.studio.models.llms.openai.OpenAI.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: OpenAIAPIKeyRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAI/#fastagency.studio.models.llms.openai.OpenAI.api_type","title":"api_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_type: Literal['openai'] = 'openai'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAI/#fastagency.studio.models.llms.openai.OpenAI.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: URL = URL(url='https://api.openai.com/v1')\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAI/#fastagency.studio.models.llms.openai.OpenAI.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: OpenAIModels = 'gpt-3.5-turbo'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAI/#fastagency.studio.models.llms.openai.OpenAI.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAI/#fastagency.studio.models.llms.openai.OpenAI.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float = 0.8\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAI/#fastagency.studio.models.llms.openai.OpenAI.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/models/llms/openai.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; dict[str, Any]:\n    my_model: OpenAI = await cls.from_db(model_id)\n\n    api_key_model: OpenAIAPIKey = await my_model.api_key.get_data_model().from_db(\n        my_model.api_key.uuid\n    )\n\n    api_key = await api_key_model.create_autogen(my_model.api_key.uuid, user_id)\n\n    config_list = [\n        {\n            \"model\": my_model.model,\n            \"api_key\": api_key,\n            \"base_url\": str(my_model.base_url),\n            \"api_type\": my_model.api_type,\n        }\n    ]\n\n    llm_config = {\n        \"config_list\": config_list,\n        \"temperature\": my_model.temperature,\n    }\n\n    return llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAI/#fastagency.studio.models.llms.openai.OpenAI.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAI/#fastagency.studio.models.llms.openai.OpenAI.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAIAPIKey/","title":"OpenAIAPIKey","text":"","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAIAPIKey/#fastagency.studio.models.llms.openai.OpenAIAPIKey","title":"fastagency.studio.models.llms.openai.OpenAIAPIKey","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAIAPIKey/#fastagency.studio.models.llms.openai.OpenAIAPIKey.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAIAPIKey/#fastagency.studio.models.llms.openai.OpenAIAPIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAIAPIKey/#fastagency.studio.models.llms.openai.OpenAIAPIKey.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/models/llms/openai.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model: OpenAIAPIKey = await cls.from_db(model_id)\n\n    return my_model.api_key\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAIAPIKey/#fastagency.studio.models.llms.openai.OpenAIAPIKey.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAIAPIKey/#fastagency.studio.models.llms.openai.OpenAIAPIKey.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/openai/OpenAIAPIKey/#fastagency.studio.models.llms.openai.OpenAIAPIKey.validate_api_key","title":"validate_api_key  <code>classmethod</code>","text":"<pre><code>validate_api_key(value: Any) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/models/llms/openai.py</code> <pre><code>@field_validator(\"api_key\")\n@classmethod\ndef validate_api_key(cls: type[\"OpenAIAPIKey\"], value: Any) -&gt; Any:\n    if not re.match(\n        r\"^(sk-(proj-|None-|svcacct-)[A-Za-z0-9_-]+|sk-[a-zA-Z0-9]{20}T3BlbkFJ[a-zA-Z0-9]{20})$\",\n        value,\n    ):\n        raise ValueError(\"Invalid OpenAI API Key\")\n    return value\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAI/","title":"TogetherAI","text":"","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAI/#fastagency.studio.models.llms.together.TogetherAI","title":"fastagency.studio.models.llms.together.TogetherAI","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAI/#fastagency.studio.models.llms.together.TogetherAI.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: TogetherAIAPIKeyRef\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAI/#fastagency.studio.models.llms.together.TogetherAI.api_type","title":"api_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>api_type: Literal['togetherai'] = 'togetherai'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAI/#fastagency.studio.models.llms.together.TogetherAI.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: URL = URL(url='https://api.together.xyz/v1')\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAI/#fastagency.studio.models.llms.together.TogetherAI.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: TogetherModels = (\n    \"Meta Llama 3 70B Instruct Reference\"\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAI/#fastagency.studio.models.llms.together.TogetherAI.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAI/#fastagency.studio.models.llms.together.TogetherAI.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float = 0.8\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAI/#fastagency.studio.models.llms.together.TogetherAI.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; dict[str, Any]\n</code></pre> Source code in <code>fastagency/studio/models/llms/together.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; dict[str, Any]:\n    my_model: TogetherAI = await cls.from_db(model_id)\n\n    api_key_model: TogetherAIAPIKey = (\n        await my_model.api_key.get_data_model().from_db(my_model.api_key.uuid)\n    )\n\n    api_key = await api_key_model.create_autogen(my_model.api_key.uuid, user_id)\n\n    config_list = [\n        {\n            \"model\": together_model_string[my_model.model],\n            \"api_key\": api_key,\n            \"base_url\": str(my_model.base_url),\n            \"api_type\": my_model.api_type,\n        }\n    ]\n\n    llm_config = {\n        \"config_list\": config_list,\n        \"temperature\": my_model.temperature,\n    }\n\n    return llm_config\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAI/#fastagency.studio.models.llms.together.TogetherAI.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAI/#fastagency.studio.models.llms.together.TogetherAI.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAIAPIKey/","title":"TogetherAIAPIKey","text":"","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAIAPIKey/#fastagency.studio.models.llms.together.TogetherAIAPIKey","title":"fastagency.studio.models.llms.together.TogetherAIAPIKey","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAIAPIKey/#fastagency.studio.models.llms.together.TogetherAIAPIKey.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAIAPIKey/#fastagency.studio.models.llms.together.TogetherAIAPIKey.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAIAPIKey/#fastagency.studio.models.llms.together.TogetherAIAPIKey.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/models/llms/together.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model: TogetherAIAPIKey = await cls.from_db(model_id)\n\n    return my_model.api_key\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAIAPIKey/#fastagency.studio.models.llms.together.TogetherAIAPIKey.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/llms/together/TogetherAIAPIKey/#fastagency.studio.models.llms.together.TogetherAIAPIKey.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/ModelSchema/","title":"ModelSchema","text":"","boost":0.5},{"location":"api/fastagency/studio/models/registry/ModelSchema/#fastagency.studio.models.registry.ModelSchema","title":"fastagency.studio.models.registry.ModelSchema","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/registry/ModelSchema/#fastagency.studio.models.registry.ModelSchema.json_schema","title":"json_schema  <code>instance-attribute</code>","text":"<pre><code>json_schema: dict[str, Any]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/ModelSchema/#fastagency.studio.models.registry.ModelSchema.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/ModelSchemas/","title":"ModelSchemas","text":"","boost":0.5},{"location":"api/fastagency/studio/models/registry/ModelSchemas/#fastagency.studio.models.registry.ModelSchemas","title":"fastagency.studio.models.registry.ModelSchemas","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/registry/ModelSchemas/#fastagency.studio.models.registry.ModelSchemas.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/ModelSchemas/#fastagency.studio.models.registry.ModelSchemas.schemas","title":"schemas  <code>instance-attribute</code>","text":"<pre><code>schemas: list[ModelSchema]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Registry/","title":"Registry","text":"","boost":0.5},{"location":"api/fastagency/studio/models/registry/Registry/#fastagency.studio.models.registry.Registry","title":"fastagency.studio.models.registry.Registry","text":"<pre><code>Registry()\n</code></pre> <p>Initialize the registry.</p> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the registry.\"\"\"\n    self._store: \"Dict[str, Dict[str, Tuple[Optional[Type[Model]], Type[ObjectReference]]]]\" = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Registry/#fastagency.studio.models.registry.Registry.create_reference","title":"create_reference","text":"<pre><code>create_reference(\n    type_name: str, model_name: str\n) -&gt; type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def create_reference(\n    self, type_name: str, model_name: str\n) -&gt; type[ObjectReference]:\n    # check if the type_name is already registered\n    if type_name not in self._store:\n        self._store[type_name] = {}\n\n    # check if the model_name is already registered\n    if model_name in self._store[type_name]:\n        raise ValueError(\"Reference already created for the model\")\n\n    # create a reference model and store it\n    reference_model = create_reference_model(\n        type_name=type_name, model_name=model_name\n    )\n    self._store[type_name][model_name] = (None, reference_model)\n\n    return reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Registry/#fastagency.studio.models.registry.Registry.get_default","title":"get_default  <code>classmethod</code>","text":"<pre><code>get_default() -&gt; Registry\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>@classmethod\ndef get_default(cls) -&gt; \"Registry\":\n    if cls._default_registry is None:\n        cls._default_registry = cls()\n    return cls._default_registry\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Registry/#fastagency.studio.models.registry.Registry.get_dongling_references","title":"get_dongling_references","text":"<pre><code>get_dongling_references() -&gt; list[type[ObjectReference]]\n</code></pre> <p>Return a list of all dongling references.</p> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def get_dongling_references(self) -&gt; list[type[ObjectReference]]:\n    \"\"\"Return a list of all dongling references.\"\"\"\n    return [\n        reference\n        for type_name, models in self._store.items()\n        for model_name, (model, reference) in models.items()\n        if model is None\n    ]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Registry/#fastagency.studio.models.registry.Registry.get_model_schema","title":"get_model_schema","text":"<pre><code>get_model_schema(model: type[Model]) -&gt; ModelSchema\n</code></pre> <p>Return the schema for the given model.</p> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def get_model_schema(self, model: type[Model]) -&gt; ModelSchema:\n    \"\"\"Return the schema for the given model.\"\"\"\n    return ModelSchema(\n        name=model.__name__,\n        json_schema=model.model_json_schema(),\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Registry/#fastagency.studio.models.registry.Registry.get_model_schemas","title":"get_model_schemas","text":"<pre><code>get_model_schemas(type_name: str) -&gt; ModelSchemas\n</code></pre> <p>Return the schemas for all models of the given type.</p> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def get_model_schemas(self, type_name: str) -&gt; ModelSchemas:\n    \"\"\"Return the schemas for all models of the given type.\"\"\"\n    models = self._store.get(type_name)\n    if models is None:\n        raise ValueError(f\"No models registered under '{type_name}'\")\n\n    schemas = [\n        self.get_model_schema(model)  # type: ignore[arg-type]\n        for _, (model, _) in models.items()\n    ]\n\n    return ModelSchemas(name=type_name, schemas=schemas)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Registry/#fastagency.studio.models.registry.Registry.get_model_type","title":"get_model_type","text":"<pre><code>get_model_type(type: str, name: str) -&gt; type[Model]\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def get_model_type(self, type: str, name: str) -&gt; type[Model]:\n    if type not in self._store:\n        raise ValueError(f\"No models registered under '{type}'\")\n\n    models = self._store[type]\n    if name not in models:\n        raise ValueError(f\"No model '{name}' registered under '{type}'\")\n\n    model, _ = models[name]\n    if model is None:\n        raise ValueError(f\"Model '{name}' not found in '{type}'\")\n\n    return model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Registry/#fastagency.studio.models.registry.Registry.get_models_refs_by_type","title":"get_models_refs_by_type","text":"<pre><code>get_models_refs_by_type(\n    type: str,\n) -&gt; list[type[ObjectReference]]\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def get_models_refs_by_type(self, type: str) -&gt; list[type[ObjectReference]]:\n    if type not in self._store:\n        raise ValueError(f\"No models registered under '{type}'\")\n\n    models = self._store[type]\n\n    return [ref for _, ref in models.values()]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Registry/#fastagency.studio.models.registry.Registry.get_schemas","title":"get_schemas","text":"<pre><code>get_schemas() -&gt; Schemas\n</code></pre> <p>Return the schemas for all registered models.</p> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def get_schemas(self) -&gt; Schemas:\n    \"\"\"Return the schemas for all registered models.\"\"\"\n    dongling_references = self.get_dongling_references()\n    if dongling_references:\n        raise ValueError(\n            f\"Found {len(dongling_references)} dongling references: {dongling_references}\"\n        )\n\n    list_of_schemas = [\n        self.get_model_schemas(type_name) for type_name in self._store\n    ]\n\n    return Schemas(list_of_schemas=list_of_schemas)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Registry/#fastagency.studio.models.registry.Registry.register","title":"register","text":"<pre><code>register(type_name: str) -&gt; Callable[[type[M]], type[M]]\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def register(self, type_name: str) -&gt; Callable[[type[M]], type[M]]:\n    if type_name not in self._store:\n        self._store[type_name] = {}\n\n    type_store = self._store[type_name]\n\n    def _inner(model: type[M]) -&gt; type[M]:\n        model_type_name = model.__name__\n\n        model_tuple = type_store.get(model_type_name)\n        existing_model, existing_ref = model_tuple if model_tuple else (None, None)\n\n        if existing_model:\n            raise ValueError(\n                f\"Model '{model_type_name}' already registered under '{type_name}'\"\n            )\n\n        if existing_ref is None:\n            reference_model: type[ObjectReference] = create_reference_model(\n                model, type_name=type_name\n            )\n        else:\n            reference_model = existing_ref\n            reference_model._data_class = model\n\n        model._reference_model = reference_model\n\n        type_store[model_type_name] = (model, reference_model)\n\n        return model\n\n    return _inner\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Registry/#fastagency.studio.models.registry.Registry.validate","title":"validate","text":"<pre><code>validate(\n    type: str, name: str, model: dict[str, Any]\n) -&gt; Model\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def validate(self, type: str, name: str, model: dict[str, Any]) -&gt; Model:\n    model_type = self.get_model_type(type, name)\n    return model_type(**model)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Schemas/","title":"Schemas","text":"","boost":0.5},{"location":"api/fastagency/studio/models/registry/Schemas/#fastagency.studio.models.registry.Schemas","title":"fastagency.studio.models.registry.Schemas","text":"<p>               Bases: <code>BaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/registry/Schemas/#fastagency.studio.models.registry.Schemas.list_of_schemas","title":"list_of_schemas  <code>instance-attribute</code>","text":"<pre><code>list_of_schemas: list[ModelSchemas]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/registry/register/","title":"register","text":"","boost":0.5},{"location":"api/fastagency/studio/models/registry/register/#fastagency.studio.models.registry.register","title":"fastagency.studio.models.registry.register","text":"<pre><code>register(type_name: str) -&gt; Callable[[type[M]], type[M]]\n</code></pre> Source code in <code>fastagency/studio/models/registry.py</code> <pre><code>def register(type_name: str) -&gt; Callable[[type[M]], type[M]]:\n    return Registry.get_default().register(type_name)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/secrets/fly_token/FlyToken/","title":"FlyToken","text":"","boost":0.5},{"location":"api/fastagency/studio/models/secrets/fly_token/FlyToken/#fastagency.studio.models.secrets.fly_token.FlyToken","title":"fastagency.studio.models.secrets.fly_token.FlyToken","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/secrets/fly_token/FlyToken/#fastagency.studio.models.secrets.fly_token.FlyToken.fly_token","title":"fly_token  <code>instance-attribute</code>","text":"<pre><code>fly_token: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/secrets/fly_token/FlyToken/#fastagency.studio.models.secrets.fly_token.FlyToken.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/secrets/fly_token/FlyToken/#fastagency.studio.models.secrets.fly_token.FlyToken.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/models/secrets/fly_token.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model = await cls.from_db(model_id)\n\n    return my_model.fly_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/secrets/fly_token/FlyToken/#fastagency.studio.models.secrets.fly_token.FlyToken.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/secrets/fly_token/FlyToken/#fastagency.studio.models.secrets.fly_token.FlyToken.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/secrets/github_token/GitHubToken/","title":"GitHubToken","text":"","boost":0.5},{"location":"api/fastagency/studio/models/secrets/github_token/GitHubToken/#fastagency.studio.models.secrets.github_token.GitHubToken","title":"fastagency.studio.models.secrets.github_token.GitHubToken","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/secrets/github_token/GitHubToken/#fastagency.studio.models.secrets.github_token.GitHubToken.gh_token","title":"gh_token  <code>instance-attribute</code>","text":"<pre><code>gh_token: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/secrets/github_token/GitHubToken/#fastagency.studio.models.secrets.github_token.GitHubToken.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/secrets/github_token/GitHubToken/#fastagency.studio.models.secrets.github_token.GitHubToken.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; str\n</code></pre> Source code in <code>fastagency/studio/models/secrets/github_token.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; str:\n    my_model = await cls.from_db(model_id)\n\n    return my_model.gh_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/secrets/github_token/GitHubToken/#fastagency.studio.models.secrets.github_token.GitHubToken.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/secrets/github_token/GitHubToken/#fastagency.studio.models.secrets.github_token.GitHubToken.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/base/TeamBaseModel/","title":"TeamBaseModel","text":"","boost":0.5},{"location":"api/fastagency/studio/models/teams/base/TeamBaseModel/#fastagency.studio.models.teams.base.TeamBaseModel","title":"fastagency.studio.models.teams.base.TeamBaseModel","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/teams/base/TeamBaseModel/#fastagency.studio.models.teams.base.TeamBaseModel.human_input_mode","title":"human_input_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>human_input_mode: Literal[\n    \"ALWAYS\", \"TERMINATE\", \"NEVER\"\n] = \"ALWAYS\"\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/base/TeamBaseModel/#fastagency.studio.models.teams.base.TeamBaseModel.is_termination_msg_regex","title":"is_termination_msg_regex  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_termination_msg_regex: str = 'TERMINATE'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/base/TeamBaseModel/#fastagency.studio.models.teams.base.TeamBaseModel.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/base/TeamBaseModel/#fastagency.studio.models.teams.base.TeamBaseModel.create_autogen","title":"create_autogen  <code>abstractmethod</code> <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\n@abstractmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any: ...  # pragma: no cover\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/base/TeamBaseModel/#fastagency.studio.models.teams.base.TeamBaseModel.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/base/TeamBaseModel/#fastagency.studio.models.teams.base.TeamBaseModel.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/base/TeamBaseModel/#fastagency.studio.models.teams.base.TeamBaseModel.is_termination_msg","title":"is_termination_msg","text":"<pre><code>is_termination_msg(msg: dict[str, Any]) -&gt; bool\n</code></pre> Source code in <code>fastagency/studio/models/teams/base.py</code> <pre><code>def is_termination_msg(self, msg: dict[str, Any]) -&gt; bool:\n    # print(f\"is_termination_msg: {msg=}\")\n    return (\n        \"content\" in msg\n        and isinstance(msg[\"content\"], str)\n        and bool(re.findall(self.is_termination_msg_regex, msg[\"content\"]))\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/base/register_toolbox_functions/","title":"register_toolbox_functions","text":"","boost":0.5},{"location":"api/fastagency/studio/models/teams/base/register_toolbox_functions/#fastagency.studio.models.teams.base.register_toolbox_functions","title":"fastagency.studio.models.teams.base.register_toolbox_functions","text":"<pre><code>register_toolbox_functions(\n    agent: ConversableAgent,\n    execution_agents: list[ConversableAgent],\n    clients: list[OpenAPI],\n) -&gt; None\n</code></pre> Source code in <code>fastagency/studio/models/teams/base.py</code> <pre><code>def register_toolbox_functions(\n    agent: ConversableAgent,\n    execution_agents: list[ConversableAgent],\n    clients: list[OpenAPI],\n) -&gt; None:\n    for client in clients:\n        client.register_for_llm(agent)\n        for execution_agent in execution_agents:\n            client.register_for_execution(execution_agent)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/AutogenMultiAgentTeam/","title":"AutogenMultiAgentTeam","text":"","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/AutogenMultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.AutogenMultiAgentTeam","title":"fastagency.studio.models.teams.multi_agent_team.AutogenMultiAgentTeam","text":"<pre><code>AutogenMultiAgentTeam(\n    agents_and_clients: list[\n        tuple[ConversableAgent, list[OpenAPI]]\n    ]\n)\n</code></pre> Source code in <code>fastagency/studio/models/teams/multi_agent_team.py</code> <pre><code>def __init__(\n    self,\n    agents_and_clients: list[tuple[ConversableAgent, list[OpenAPI]]],\n) -&gt; None:\n    self.agents = [agent for agent, _ in agents_and_clients]\n    self.clients = [clients for _, clients in agents_and_clients]\n\n    for i, (agent, clients) in enumerate(agents_and_clients):\n        other_agents = [\n            other_agent\n            for j, (other_agent, _) in enumerate(agents_and_clients)\n            if i != j\n        ]\n        register_toolbox_functions(agent, other_agents, clients)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/AutogenMultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.AutogenMultiAgentTeam.agents","title":"agents  <code>instance-attribute</code>","text":"<pre><code>agents = [agent for (agent, _) in agents_and_clients]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/AutogenMultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.AutogenMultiAgentTeam.clients","title":"clients  <code>instance-attribute</code>","text":"<pre><code>clients = [clients for (_, clients) in agents_and_clients]\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/AutogenMultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.AutogenMultiAgentTeam.initiate_chat","title":"initiate_chat","text":"<pre><code>initiate_chat(message: str) -&gt; list[dict[str, Any]]\n</code></pre> Source code in <code>fastagency/studio/models/teams/multi_agent_team.py</code> <pre><code>def initiate_chat(self, message: str) -&gt; list[dict[str, Any]]:\n    groupchat = GroupChat(agents=self.agents, messages=[])\n    manager = GroupChatManager(groupchat=groupchat)\n    return self.agents[0].initiate_chat(  # type: ignore[no-any-return]\n        recipient=manager, message=message\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/","title":"MultiAgentTeam","text":"","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam","title":"fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam","text":"<p>               Bases: <code>TeamBaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam.agent_1","title":"agent_1  <code>instance-attribute</code>","text":"<pre><code>agent_1: agent_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam.agent_2","title":"agent_2  <code>instance-attribute</code>","text":"<pre><code>agent_2: agent_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam.agent_3","title":"agent_3  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>agent_3: Optional[agent_type_refs] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam.agent_4","title":"agent_4  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>agent_4: Optional[agent_type_refs] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam.agent_5","title":"agent_5  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>agent_5: Optional[agent_type_refs] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam.human_input_mode","title":"human_input_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>human_input_mode: Literal[\n    \"ALWAYS\", \"TERMINATE\", \"NEVER\"\n] = \"ALWAYS\"\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam.is_termination_msg_regex","title":"is_termination_msg_regex  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_termination_msg_regex: str = 'TERMINATE'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/models/teams/multi_agent_team.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; Any:\n    my_model = await cls.from_db(model_id)\n\n    agents_and_clients: list[tuple[ConversableAgent, list[OpenAPI]]] = []\n    for i in range(5):\n        agent_property = getattr(my_model, f\"agent_{i+1}\")\n        if agent_property is None:\n            continue\n\n        agent_model = await agent_property.get_data_model().from_db(\n            agent_property.uuid\n        )\n\n        agent, clients = await agent_model.create_autogen(\n            getattr(my_model, f\"agent_{i+1}\").uuid, user_id\n        )\n        agents_and_clients.append((agent, clients))\n\n    return AutogenMultiAgentTeam(agents_and_clients)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/multi_agent_team/MultiAgentTeam/#fastagency.studio.models.teams.multi_agent_team.MultiAgentTeam.is_termination_msg","title":"is_termination_msg","text":"<pre><code>is_termination_msg(msg: dict[str, Any]) -&gt; bool\n</code></pre> Source code in <code>fastagency/studio/models/teams/base.py</code> <pre><code>def is_termination_msg(self, msg: dict[str, Any]) -&gt; bool:\n    # print(f\"is_termination_msg: {msg=}\")\n    return (\n        \"content\" in msg\n        and isinstance(msg[\"content\"], str)\n        and bool(re.findall(self.is_termination_msg_regex, msg[\"content\"]))\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/AutogenTwoAgentTeam/","title":"AutogenTwoAgentTeam","text":"","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/AutogenTwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.AutogenTwoAgentTeam","title":"fastagency.studio.models.teams.two_agent_teams.AutogenTwoAgentTeam","text":"<pre><code>AutogenTwoAgentTeam(\n    *,\n    initial_agent: ConversableAgent,\n    initial_agent_clients: list[OpenAPI],\n    secondary_agent: ConversableAgent,\n    secondary_agent_clients: list[OpenAPI]\n)\n</code></pre> Source code in <code>fastagency/studio/models/teams/two_agent_teams.py</code> <pre><code>def __init__(\n    self,\n    *,\n    initial_agent: ConversableAgent,\n    initial_agent_clients: list[OpenAPI],\n    secondary_agent: ConversableAgent,\n    secondary_agent_clients: list[OpenAPI],\n) -&gt; None:\n    self.initial_agent = initial_agent\n    self.secondary_agent = secondary_agent\n\n    register_toolbox_functions(\n        initial_agent, [secondary_agent], initial_agent_clients\n    )\n    register_toolbox_functions(\n        secondary_agent, [initial_agent], secondary_agent_clients\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/AutogenTwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.AutogenTwoAgentTeam.initial_agent","title":"initial_agent  <code>instance-attribute</code>","text":"<pre><code>initial_agent = initial_agent\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/AutogenTwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.AutogenTwoAgentTeam.secondary_agent","title":"secondary_agent  <code>instance-attribute</code>","text":"<pre><code>secondary_agent = secondary_agent\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/AutogenTwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.AutogenTwoAgentTeam.initiate_chat","title":"initiate_chat","text":"<pre><code>initiate_chat(message: str) -&gt; list[dict[str, Any]]\n</code></pre> Source code in <code>fastagency/studio/models/teams/two_agent_teams.py</code> <pre><code>def initiate_chat(self, message: str) -&gt; list[dict[str, Any]]:\n    return self.initial_agent.initiate_chat(  # type: ignore[no-any-return]\n        recipient=self.secondary_agent, message=message\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/TwoAgentTeam/","title":"TwoAgentTeam","text":"","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.TwoAgentTeam","title":"fastagency.studio.models.teams.two_agent_teams.TwoAgentTeam","text":"<p>               Bases: <code>TeamBaseModel</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.TwoAgentTeam.human_input_mode","title":"human_input_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>human_input_mode: Literal[\n    \"ALWAYS\", \"TERMINATE\", \"NEVER\"\n] = \"ALWAYS\"\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.TwoAgentTeam.initial_agent","title":"initial_agent  <code>instance-attribute</code>","text":"<pre><code>initial_agent: agent_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.TwoAgentTeam.is_termination_msg_regex","title":"is_termination_msg_regex  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_termination_msg_regex: str = 'TERMINATE'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.TwoAgentTeam.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.TwoAgentTeam.secondary_agent","title":"secondary_agent  <code>instance-attribute</code>","text":"<pre><code>secondary_agent: agent_type_refs\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.TwoAgentTeam.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; Any\n</code></pre> Source code in <code>fastagency/studio/models/teams/two_agent_teams.py</code> <pre><code>@classmethod\nasync def create_autogen(cls, model_id: UUID, user_id: UUID, **kwargs: Any) -&gt; Any:\n    my_model = await cls.from_db(model_id)\n\n    is_termination_msg = my_model.is_termination_msg\n    human_input_mode = my_model.human_input_mode\n\n    initial_agent_model = await my_model.initial_agent.get_data_model().from_db(\n        my_model.initial_agent.uuid\n    )\n    (\n        initial_agent,\n        initial_agent_clients,\n    ) = await initial_agent_model.create_autogen(\n        my_model.initial_agent.uuid,\n        user_id,\n        is_termination_msg=is_termination_msg,\n        human_input_mode=human_input_mode,\n    )\n\n    secondary_agent_model = await my_model.secondary_agent.get_data_model().from_db(\n        my_model.secondary_agent.uuid\n    )\n    (\n        secondary_agent,\n        secondary_agent_clients,\n    ) = await secondary_agent_model.create_autogen(\n        my_model.secondary_agent.uuid,\n        user_id,\n        is_termination_msg=is_termination_msg,\n        human_input_mode=human_input_mode,\n    )\n\n    return AutogenTwoAgentTeam(\n        initial_agent=initial_agent,\n        initial_agent_clients=initial_agent_clients,\n        secondary_agent=secondary_agent,\n        secondary_agent_clients=secondary_agent_clients,\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.TwoAgentTeam.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.TwoAgentTeam.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/teams/two_agent_teams/TwoAgentTeam/#fastagency.studio.models.teams.two_agent_teams.TwoAgentTeam.is_termination_msg","title":"is_termination_msg","text":"<pre><code>is_termination_msg(msg: dict[str, Any]) -&gt; bool\n</code></pre> Source code in <code>fastagency/studio/models/teams/base.py</code> <pre><code>def is_termination_msg(self, msg: dict[str, Any]) -&gt; bool:\n    # print(f\"is_termination_msg: {msg=}\")\n    return (\n        \"content\" in msg\n        and isinstance(msg[\"content\"], str)\n        and bool(re.findall(self.is_termination_msg_regex, msg[\"content\"]))\n    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/","title":"OpenAPI","text":"","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI","title":"fastagency.api.openapi.client.OpenAPI","text":"<pre><code>OpenAPI(\n    servers: list[dict[str, Any]],\n    title: Optional[str] = None,\n    **kwargs: Any\n)\n</code></pre> <p>Proxy class to generate client from OpenAPI schema.</p> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def __init__(\n    self, servers: list[dict[str, Any]], title: Optional[str] = None, **kwargs: Any\n) -&gt; None:\n    \"\"\"Proxy class to generate client from OpenAPI schema.\"\"\"\n    self.servers = servers\n    self.title = title\n    self.kwargs = kwargs\n    self.registered_funcs: list[Callable[..., Any]] = []\n    self.globals: dict[str, Any] = {}\n\n    self.security: dict[str, BaseSecurity] = {}\n    self.security_params: dict[Optional[str], BaseSecurityParameters] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.globals","title":"globals  <code>instance-attribute</code>","text":"<pre><code>globals: dict[str, Any] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.kwargs","title":"kwargs  <code>instance-attribute</code>","text":"<pre><code>kwargs = kwargs\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.registered_funcs","title":"registered_funcs  <code>instance-attribute</code>","text":"<pre><code>registered_funcs: list[Callable[..., Any]] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.security","title":"security  <code>instance-attribute</code>","text":"<pre><code>security: dict[str, BaseSecurity] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.security_params","title":"security_params  <code>instance-attribute</code>","text":"<pre><code>security_params: dict[\n    Optional[str], BaseSecurityParameters\n] = {}\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.servers","title":"servers  <code>instance-attribute</code>","text":"<pre><code>servers = servers\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title = title\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.create","title":"create  <code>classmethod</code>","text":"<pre><code>create(\n    openapi_json: Optional[str] = None,\n    openapi_url: Optional[str] = None,\n) -&gt; OpenAPI\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>@classmethod\ndef create(\n    cls, openapi_json: Optional[str] = None, openapi_url: Optional[str] = None\n) -&gt; \"OpenAPI\":\n    if openapi_json is None and openapi_url is None:\n        raise ValueError(\"Either openapi_json or openapi_url should be provided\")\n\n    if openapi_json is None and openapi_url is not None:\n        with requests.get(openapi_url, timeout=10) as response:\n            response.raise_for_status()\n            openapi_json = response.text\n\n    with tempfile.TemporaryDirectory() as temp_dir:\n        td = Path(temp_dir)\n        suffix = td.name\n\n        main_name = cls.generate_code(\n            input_text=openapi_json,  # type: ignore [arg-type]\n            output_dir=td,\n        )\n        # add td to sys.path\n        try:\n            sys.path.append(str(td))\n            main = importlib.import_module(main_name, package=td.name)  # nosemgrep\n        finally:\n            sys.path.remove(str(td))\n\n        client: OpenAPI = main.app  # type: ignore [attr-defined]\n        client.set_globals(main, suffix=suffix)\n\n        return client\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.delete","title":"delete","text":"<pre><code>delete(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def delete(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"delete\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.generate_code","title":"generate_code  <code>classmethod</code>","text":"<pre><code>generate_code(\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n    custom_visitors: Optional[list[Path]] = None,\n) -&gt; str\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>@classmethod\ndef generate_code(\n    cls,\n    input_text: str,\n    output_dir: Path,\n    disable_timestamp: bool = False,\n    custom_visitors: Optional[list[Path]] = None,\n) -&gt; str:\n    if custom_visitors is None:\n        custom_visitors = []\n    custom_visitors.append(Path(__file__).parent / \"security_schema_visitor.py\")\n\n    with patch_get_parameter_type():\n        generate_code(\n            input_name=\"openapi.json\",\n            input_text=input_text,\n            encoding=\"utf-8\",\n            output_dir=output_dir,\n            template_dir=cls._get_template_dir(),\n            disable_timestamp=disable_timestamp,\n            custom_visitors=custom_visitors,\n        )\n        # Use unique file name for main.py\n        main_name = f\"main_{output_dir.name}\"\n        main_path = output_dir / f\"{main_name}.py\"\n        shutil.move(output_dir / \"main.py\", main_path)\n\n        # Change \"from models import\" to \"from models_unique_name import\"\n        with open(main_path) as f:  # noqa: PTH123\n            main_py_code = f.read()\n        main_py_code = main_py_code.replace(\n            \"from .models import\", f\"from models_{output_dir.name} import\"\n        )\n        with open(main_path, \"w\") as f:  # noqa: PTH123\n            f.write(main_py_code)\n\n        # Use unique file name for models.py\n        models_name = f\"models_{output_dir.name}\"\n        models_path = output_dir / f\"{models_name}.py\"\n        shutil.move(output_dir / \"models.py\", models_path)\n\n        return main_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.get","title":"get","text":"<pre><code>get(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def get(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"get\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.post","title":"post","text":"<pre><code>post(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def post(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"post\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.put","title":"put","text":"<pre><code>put(\n    path: str, **kwargs: Any\n) -&gt; Callable[..., dict[str, Any]]\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def put(self, path: str, **kwargs: Any) -&gt; Callable[..., dict[str, Any]]:\n    return self._request(\"put\", path, **kwargs)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.register_for_execution","title":"register_for_execution","text":"<pre><code>register_for_execution(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def register_for_execution(self, agent: \"ConversableAgent\") -&gt; None:\n    for f in self.registered_funcs:\n        agent.register_for_execution()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.register_for_llm","title":"register_for_llm","text":"<pre><code>register_for_llm(agent: ConversableAgent) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def register_for_llm(self, agent: \"ConversableAgent\") -&gt; None:\n    with add_to_globals(self.globals):\n        for f in self.registered_funcs:\n            agent.register_for_llm()(f)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.set_globals","title":"set_globals","text":"<pre><code>set_globals(main: ModuleType, suffix: str) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def set_globals(self, main: ModuleType, suffix: str) -&gt; None:\n    xs = {k: v for k, v in main.__dict__.items() if not k.startswith(\"__\")}\n    self.globals = {\n        k: v\n        for k, v in xs.items()\n        if hasattr(v, \"__module__\")\n        and v.__module__ in [f\"models_{suffix}\", \"typing\"]\n    }\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPI/#fastagency.api.openapi.client.OpenAPI.set_security_params","title":"set_security_params","text":"<pre><code>set_security_params(\n    security_params: BaseSecurityParameters,\n    name: Optional[str] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/api/openapi/client.py</code> <pre><code>def set_security_params(\n    self, security_params: BaseSecurityParameters, name: Optional[str] = None\n) -&gt; None:\n    if name is not None:\n        security = self.security.get(name)\n        if security is None:\n            raise ValueError(f\"Security is not set for '{name}'\")\n\n        if not security.accept(security_params):\n            raise ValueError(\n                f\"Security parameters {security_params} do not match security {security}\"\n            )\n\n    self.security_params[name] = security_params\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuth/","title":"OpenAPIAuth","text":"","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuth","title":"fastagency.studio.models.toolboxes.toolbox.OpenAPIAuth","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuth.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuth.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuth.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuth.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; tuple[str, str]\n</code></pre> Source code in <code>fastagency/studio/models/toolboxes/toolbox.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; tuple[str, str]:\n    raise RuntimeError(\"This method should never be called.\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuth.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuth/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuth.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuthToken/","title":"OpenAPIAuthToken","text":"","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuthToken/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuthToken","title":"fastagency.studio.models.toolboxes.toolbox.OpenAPIAuthToken","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuthToken/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuthToken.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuthToken/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuthToken.token","title":"token  <code>instance-attribute</code>","text":"<pre><code>token: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuthToken/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuthToken.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; tuple[str, str]\n</code></pre> Source code in <code>fastagency/studio/models/toolboxes/toolbox.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; tuple[str, str]:\n    raise RuntimeError(\"This method should never be called.\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuthToken/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuthToken.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/OpenAPIAuthToken/#fastagency.studio.models.toolboxes.toolbox.OpenAPIAuthToken.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/Toolbox/","title":"Toolbox","text":"","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/Toolbox/#fastagency.studio.models.toolboxes.toolbox.Toolbox","title":"fastagency.studio.models.toolboxes.toolbox.Toolbox","text":"<p>               Bases: <code>Model</code></p>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/Toolbox/#fastagency.studio.models.toolboxes.toolbox.Toolbox.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/Toolbox/#fastagency.studio.models.toolboxes.toolbox.Toolbox.openapi_auth","title":"openapi_auth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>openapi_auth: Optional[\n    Union[OpenAPIAuthTokenRef, OpenAPIAuthRef]\n] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/Toolbox/#fastagency.studio.models.toolboxes.toolbox.Toolbox.openapi_url","title":"openapi_url  <code>instance-attribute</code>","text":"<pre><code>openapi_url: URL\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/Toolbox/#fastagency.studio.models.toolboxes.toolbox.Toolbox.create_autogen","title":"create_autogen  <code>async</code> <code>classmethod</code>","text":"<pre><code>create_autogen(\n    model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; OpenAPI\n</code></pre> Source code in <code>fastagency/studio/models/toolboxes/toolbox.py</code> <pre><code>@classmethod\nasync def create_autogen(\n    cls, model_id: UUID, user_id: UUID, **kwargs: Any\n) -&gt; OpenAPI:\n    my_model = await cls.from_db(model_id)\n\n    # Download OpenAPI spec\n    with httpx.Client() as httpx_client:\n        response = httpx_client.get(my_model.openapi_url)  # type: ignore[arg-type]\n        response.raise_for_status()\n        openapi_spec = response.text\n\n    client = OpenAPI.create(openapi_spec)\n\n    return client\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/Toolbox/#fastagency.studio.models.toolboxes.toolbox.Toolbox.from_db","title":"from_db  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_db(model_id: UUID) -&gt; T\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\nasync def from_db(cls: type[T], model_id: UUID) -&gt; T:\n    my_model_dict = await DefaultDB.backend().find_model(model_id)\n    my_model = cls(**my_model_dict[\"json_str\"])\n\n    return my_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/models/toolboxes/toolbox/Toolbox/#fastagency.studio.models.toolboxes.toolbox.Toolbox.get_reference_model","title":"get_reference_model  <code>classmethod</code>","text":"<pre><code>get_reference_model() -&gt; Type[ObjectReference]\n</code></pre> Source code in <code>fastagency/studio/models/base.py</code> <pre><code>@classmethod\ndef get_reference_model(cls) -&gt; \"Type[ObjectReference]\":\n    if cls._reference_model is None:\n        raise ValueError(\"reference model not set\")\n    return cls._reference_model\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/InvalidFlyTokenError/","title":"InvalidFlyTokenError","text":"","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/InvalidFlyTokenError/#fastagency.studio.saas_app_generator.InvalidFlyTokenError","title":"fastagency.studio.saas_app_generator.InvalidFlyTokenError","text":"<pre><code>InvalidFlyTokenError(message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Exception raised when an error occurs while validating the Fly.io token.</p> Source code in <code>fastagency/studio/saas_app_generator.py</code> <pre><code>def __init__(self, message: str):\n    \"\"\"Exception raised when an error occurs while validating the Fly.io token.\"\"\"\n    self.message = message\n    super().__init__(self.message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/InvalidFlyTokenError/#fastagency.studio.saas_app_generator.InvalidFlyTokenError.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message = message\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/InvalidGHTokenError/","title":"InvalidGHTokenError","text":"","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/InvalidGHTokenError/#fastagency.studio.saas_app_generator.InvalidGHTokenError","title":"fastagency.studio.saas_app_generator.InvalidGHTokenError","text":"<pre><code>InvalidGHTokenError(message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Exception raised when an error occurs while creating a GitHub repository.</p> Source code in <code>fastagency/studio/saas_app_generator.py</code> <pre><code>def __init__(self, message: str):\n    \"\"\"Exception raised when an error occurs while creating a GitHub repository.\"\"\"\n    self.message = message\n    super().__init__(self.message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/InvalidGHTokenError/#fastagency.studio.saas_app_generator.InvalidGHTokenError.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message = message\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/","title":"SaasAppGenerator","text":"","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator","title":"fastagency.studio.saas_app_generator.SaasAppGenerator","text":"<pre><code>SaasAppGenerator(\n    fly_api_token: str,\n    fastagency_deployment_uuid: str,\n    github_token: str,\n    app_name: str,\n    repo_name: str,\n    fly_app_name: str,\n    deployment_auth_token: Union[str, None] = None,\n    developer_uuid: Union[str, None] = None,\n)\n</code></pre> <p>GitHubManager class.</p> Source code in <code>fastagency/studio/saas_app_generator.py</code> <pre><code>def __init__(\n    self,\n    fly_api_token: str,\n    fastagency_deployment_uuid: str,\n    github_token: str,\n    app_name: str,\n    repo_name: str,\n    fly_app_name: str,\n    deployment_auth_token: Union[str, None] = None,\n    developer_uuid: Union[str, None] = None,\n) -&gt; None:\n    \"\"\"GitHubManager class.\"\"\"\n    self.template_repo_url = SaasAppGenerator.TEMPLATE_REPO_URL\n    self.fly_api_token = fly_api_token\n    self.fastagency_deployment_uuid = fastagency_deployment_uuid\n    self.github_token = github_token\n    self.app_name = app_name\n    self.repo_name = repo_name\n    self.fly_app_name = fly_app_name\n    self.deployment_auth_token = deployment_auth_token\n    self.developer_uuid = developer_uuid\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.ARTIFACTS_DIR","title":"ARTIFACTS_DIR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ARTIFACTS_DIR = '.tmp_fastagency_setup_artifacts'\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.DEPLOYMENT_BRANCH","title":"DEPLOYMENT_BRANCH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEPLOYMENT_BRANCH = (\n    \"dev\"\n    if FASTAGENCY_SERVER_URL\n    and \"staging\" in FASTAGENCY_SERVER_URL\n    else \"main\"\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.EXTRACTED_TEMPLATE_DIR_NAME","title":"EXTRACTED_TEMPLATE_DIR_NAME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EXTRACTED_TEMPLATE_DIR_NAME = (\n    f\"fastagency-wasp-app-template-{DEPLOYMENT_BRANCH}\"\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.FASTAGENCY_SERVER_URL","title":"FASTAGENCY_SERVER_URL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FASTAGENCY_SERVER_URL = get('FASTAGENCY_SERVER_URL', None)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.TEMPLATE_REPO_URL","title":"TEMPLATE_REPO_URL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TEMPLATE_REPO_URL = (\n    \"https://github.com/airtai/fastagency-wasp-app-template\"\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.app_name","title":"app_name  <code>instance-attribute</code>","text":"<pre><code>app_name = app_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.deployment_auth_token","title":"deployment_auth_token  <code>instance-attribute</code>","text":"<pre><code>deployment_auth_token = deployment_auth_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.developer_uuid","title":"developer_uuid  <code>instance-attribute</code>","text":"<pre><code>developer_uuid = developer_uuid\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.fastagency_deployment_uuid","title":"fastagency_deployment_uuid  <code>instance-attribute</code>","text":"<pre><code>fastagency_deployment_uuid = fastagency_deployment_uuid\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.fly_api_token","title":"fly_api_token  <code>instance-attribute</code>","text":"<pre><code>fly_api_token = fly_api_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.fly_app_name","title":"fly_app_name  <code>instance-attribute</code>","text":"<pre><code>fly_app_name = fly_app_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.github_token","title":"github_token  <code>instance-attribute</code>","text":"<pre><code>github_token = github_token\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.repo_name","title":"repo_name  <code>instance-attribute</code>","text":"<pre><code>repo_name = repo_name\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.template_repo_url","title":"template_repo_url  <code>instance-attribute</code>","text":"<pre><code>template_repo_url = TEMPLATE_REPO_URL\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.create_new_repository","title":"create_new_repository","text":"<pre><code>create_new_repository(max_retries: int = 5) -&gt; None\n</code></pre> Source code in <code>fastagency/studio/saas_app_generator.py</code> <pre><code>def create_new_repository(\n    self,\n    max_retries: int = 5,\n) -&gt; None:\n    # copy the environment variables to pass to the subprocess\n    env = environ.copy()\n\n    # Add the GitHub token to the environment variables to pass to the subprocess\n    env[\"GH_TOKEN\"] = self.github_token\n\n    with tempfile.TemporaryDirectory() as temp_dir:\n        temp_dir_path = Path(temp_dir)\n\n        repo_name = self.repo_name\n        for attempt in range(max_retries):\n            try:\n                log_file = temp_dir_path / \"log_file.txt\"\n                command = f\"gh repo create {repo_name} --public &gt; {log_file}\"\n                self._run_cli_command(command, cwd=str(temp_dir_path), env=env)\n\n                # Open the log file and read its contents\n                with log_file.open(\"r\") as file:\n                    self.gh_repo_url = file.read().strip()\n\n                break\n            except Exception as e:\n                if attempt &lt; max_retries - 1:\n                    # add random 5 digit number to the repo name\n                    repo_name = f\"{repo_name}-{random.randint(10000, 99999)}\"  # nosec B311\n                    logging.info(\n                        f\"Repository name already exists. Retrying with a new name: {repo_name}\"\n                    )\n                else:\n                    logging.error(e)\n                    msg = \"Unable to create a new GitHub repository. Please try again later.\"\n                    raise InvalidGHTokenError(msg) from e\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.execute","title":"execute","text":"<pre><code>execute() -&gt; None\n</code></pre> Source code in <code>fastagency/studio/saas_app_generator.py</code> <pre><code>def execute(self) -&gt; None:\n    with tempfile.TemporaryDirectory() as temp_dir:\n        temp_dir_path = Path(temp_dir)\n\n        # Download the public repository\n        self._download_template_repo(temp_dir_path)\n\n        # copy the environment variables to pass to the subprocess\n        env = environ.copy()\n\n        # Add the GitHub token to the environment variables to pass to the subprocess\n        env[\"GH_TOKEN\"] = self.github_token\n\n        # Initialize the git repository and push the changes\n        self._initialize_git_and_push(temp_dir_path, env=env)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.validate_fly_token","title":"validate_fly_token","text":"<pre><code>validate_fly_token(env: dict[str, Any]) -&gt; None\n</code></pre> Source code in <code>fastagency/studio/saas_app_generator.py</code> <pre><code>def validate_fly_token(self, env: dict[str, Any]) -&gt; None:\n    env[\"FLY_API_TOKEN\"] = self.fly_api_token\n\n    try:\n        command = 'fly auth whoami --access-token \"$FLY_API_TOKEN\"'\n        self._run_cli_command(command, env=env)\n    except Exception as e:\n        logging.error(e)\n        msg = \"Invalid Fly.io token. Please provide a valid Fly.io token.\"\n        raise InvalidFlyTokenError(msg) from e\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.validate_gh_token","title":"validate_gh_token","text":"<pre><code>validate_gh_token(env: dict[str, Any]) -&gt; None\n</code></pre> Source code in <code>fastagency/studio/saas_app_generator.py</code> <pre><code>def validate_gh_token(self, env: dict[str, Any]) -&gt; None:\n    env[\"GH_TOKEN\"] = self.github_token\n\n    with tempfile.TemporaryDirectory() as temp_dir:\n        try:\n            log_file = Path(temp_dir) / \"log_file.txt\"\n            command = f\"gh auth status &gt; {log_file}\"\n            self._run_cli_command(command, env=env, print_output=True)\n\n            with log_file.open(\"r\") as file:\n                contents = file.read().strip()\n\n            if \"GH_TOKEN is invalid\" in contents:\n                msg = \"Invalid GitHub token. Please provide a valid GitHub token.\"\n                raise Exception(msg)\n\n        except Exception as e:\n            logging.error(e)\n            raise InvalidGHTokenError(msg) from e\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/SaasAppGenerator/#fastagency.studio.saas_app_generator.SaasAppGenerator.validate_tokens","title":"validate_tokens","text":"<pre><code>validate_tokens() -&gt; None\n</code></pre> Source code in <code>fastagency/studio/saas_app_generator.py</code> <pre><code>def validate_tokens(self) -&gt; None:\n    env = environ.copy()\n\n    self.validate_gh_token(env)\n    self.validate_fly_token(env)\n</code></pre>","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/main/","title":"main","text":"","boost":0.5},{"location":"api/fastagency/studio/saas_app_generator/main/#fastagency.studio.saas_app_generator.main","title":"fastagency.studio.saas_app_generator.main","text":"<pre><code>main() -&gt; None\n</code></pre> Source code in <code>fastagency/studio/saas_app_generator.py</code> <pre><code>def main() -&gt; None:\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"fly_token\", help=\"Fly.io token\")\n    parser.add_argument(\"uuid\", help=\"Deployment UUID\")\n    parser.add_argument(\"gh_token\", help=\"GitHub token\")\n    parser.add_argument(\"app_name\", help=\"Deployment name\")\n    parser.add_argument(\"fly_app_name\", help=\"Fly app name\")\n    parser.add_argument(\"repo_name\", help=\"Repo name\")\n    args = parser.parse_args()\n\n    manager = SaasAppGenerator(\n        args.fly_token,\n        args.uuid,\n        args.gh_token,\n        args.app_name,\n        args.fly_app_name,\n        args.repo_name,\n    )\n\n    manager.create_new_repository()\n    logging.info(f\"{manager.gh_repo_url=}\")\n\n    manager.execute()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/","title":"ConsoleUI","text":"","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI","title":"fastagency.ui.console.ConsoleUI","text":"<pre><code>ConsoleUI(super_conversation: Optional[ConsoleUI] = None)\n</code></pre> <p>               Bases: <code>IOMessageVisitor</code></p> <p>Initialize the console UI object.</p> PARAMETER DESCRIPTION <code>super_conversation</code> <p>The super conversation. Defaults to None.</p> <p> TYPE: <code>Optional[UI]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def __init__(self, super_conversation: Optional[\"ConsoleUI\"] = None) -&gt; None:\n    \"\"\"Initialize the console UI object.\n\n    Args:\n        super_conversation (Optional[UI], optional): The super conversation. Defaults to None.\n    \"\"\"\n    self.super_conversation: Optional[ConsoleUI] = super_conversation\n    self.sub_conversations: list[ConsoleUI] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.level","title":"level  <code>property</code>","text":"<pre><code>level: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.sub_conversations","title":"sub_conversations  <code>instance-attribute</code>","text":"<pre><code>sub_conversations: list[ConsoleUI] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.super_conversation","title":"super_conversation  <code>instance-attribute</code>","text":"<pre><code>super_conversation: Optional[ConsoleUI] = super_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.ConsoleMessage","title":"ConsoleMessage  <code>dataclass</code>","text":"<pre><code>ConsoleMessage(\n    sender: Optional[str],\n    recipient: Optional[str],\n    heading: Optional[str],\n    body: Optional[str],\n)\n</code></pre> <p>A console message.</p>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.ConsoleMessage.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.ConsoleMessage.heading","title":"heading  <code>instance-attribute</code>","text":"<pre><code>heading: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.ConsoleMessage.recipient","title":"recipient  <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.ConsoleMessage.sender","title":"sender  <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.create","title":"create","text":"<pre><code>create(app: Runnable, import_string: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>@contextmanager\ndef create(self, app: Runnable, import_string: str) -&gt; Iterator[None]:\n    yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.create_subconversation","title":"create_subconversation","text":"<pre><code>create_subconversation() -&gt; ConsoleUI\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def create_subconversation(self) -&gt; \"ConsoleUI\":\n    sub_conversation = ConsoleUI(self)\n    self.sub_conversations.append(sub_conversation)\n\n    return sub_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]:\n    # logger.info(f\"process_message(): {message=}\")\n    return self.visit(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.start","title":"start","text":"<pre><code>start(\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def start(\n    self,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None:\n    run_workflow(app.wf, self, name, initial_message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit","title":"visit","text":"<pre><code>visit(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit(self, message: IOMessage) -&gt; Optional[str]:\n    method_name = f\"visit_{message.type}\"\n    method = getattr(self, method_name, self.visit_default)\n    return method(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_default","title":"visit_default","text":"<pre><code>visit_default(message: IOMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_default(self, message: IOMessage) -&gt; None:\n    content = message.model_dump()[\"content\"]\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=json.dumps(content, indent=2),\n    )\n    self._format_and_print(console_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_function_call_execution","title":"visit_function_call_execution","text":"<pre><code>visit_function_call_execution(\n    message: FunctionCallExecution,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_function_call_execution(\n    self, message: FunctionCallExecution\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_multiple_choice","title":"visit_multiple_choice","text":"<pre><code>visit_multiple_choice(message: MultipleChoice) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_multiple_choice(self, message: MultipleChoice) -&gt; str:\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=f\"{message.prompt} (choices: {', '.join(message.choices)}, default: {message.default})\",\n    )\n\n    prompt = self._format_message(console_msg)\n    prompt = self._indent(prompt)\n    while True:\n        # logger.info(f\"visit_multiple_choice(): {prompt=}\")\n        retval = input(prompt)\n        if retval in message.choices:\n            return retval\n        elif retval == \"\" and message.default:\n            return message.default\n        else:\n            print(f\"Invalid choice ('{retval}'). Please try again.\")  # noqa: T201 `print` found\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_suggested_function_call","title":"visit_suggested_function_call","text":"<pre><code>visit_suggested_function_call(\n    message: SuggestedFunctionCall,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_suggested_function_call(\n    self, message: SuggestedFunctionCall\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_system_message","title":"visit_system_message","text":"<pre><code>visit_system_message(\n    message: SystemMessage,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_system_message(self, message: SystemMessage) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_text_input","title":"visit_text_input","text":"<pre><code>visit_text_input(message: TextInput) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_text_input(self, message: TextInput) -&gt; str:\n    suggestions = (\n        f\" (suggestions: {', '.join(message.suggestions)})\"\n        if message.suggestions\n        else \"\"\n    )\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=f\"{message.prompt}{suggestions}:\",\n    )\n\n    prompt = self._format_message(console_msg)\n    prompt = self._indent(prompt)\n    if message.password:\n        return getpass.getpass(prompt)\n    else:\n        return input(prompt)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_text_message","title":"visit_text_message","text":"<pre><code>visit_text_message(message: TextMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_text_message(self, message: TextMessage) -&gt; None:\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=message.body,\n    )\n    self._format_and_print(console_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/ConsoleUI/#fastagency.ui.console.ConsoleUI.visit_workflow_completed","title":"visit_workflow_completed","text":"<pre><code>visit_workflow_completed(\n    message: WorkflowCompleted,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_workflow_completed(self, message: WorkflowCompleted) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/","title":"ConsoleUI","text":"","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI","title":"fastagency.ui.console.base.ConsoleUI","text":"<pre><code>ConsoleUI(super_conversation: Optional[ConsoleUI] = None)\n</code></pre> <p>               Bases: <code>IOMessageVisitor</code></p> <p>Initialize the console UI object.</p> PARAMETER DESCRIPTION <code>super_conversation</code> <p>The super conversation. Defaults to None.</p> <p> TYPE: <code>Optional[UI]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def __init__(self, super_conversation: Optional[\"ConsoleUI\"] = None) -&gt; None:\n    \"\"\"Initialize the console UI object.\n\n    Args:\n        super_conversation (Optional[UI], optional): The super conversation. Defaults to None.\n    \"\"\"\n    self.super_conversation: Optional[ConsoleUI] = super_conversation\n    self.sub_conversations: list[ConsoleUI] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.level","title":"level  <code>property</code>","text":"<pre><code>level: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.sub_conversations","title":"sub_conversations  <code>instance-attribute</code>","text":"<pre><code>sub_conversations: list[ConsoleUI] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.super_conversation","title":"super_conversation  <code>instance-attribute</code>","text":"<pre><code>super_conversation: Optional[ConsoleUI] = super_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.ConsoleMessage","title":"ConsoleMessage  <code>dataclass</code>","text":"<pre><code>ConsoleMessage(\n    sender: Optional[str],\n    recipient: Optional[str],\n    heading: Optional[str],\n    body: Optional[str],\n)\n</code></pre> <p>A console message.</p>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.ConsoleMessage.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.ConsoleMessage.heading","title":"heading  <code>instance-attribute</code>","text":"<pre><code>heading: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.ConsoleMessage.recipient","title":"recipient  <code>instance-attribute</code>","text":"<pre><code>recipient: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.ConsoleMessage.sender","title":"sender  <code>instance-attribute</code>","text":"<pre><code>sender: Optional[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.create","title":"create","text":"<pre><code>create(app: Runnable, import_string: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>@contextmanager\ndef create(self, app: Runnable, import_string: str) -&gt; Iterator[None]:\n    yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.create_subconversation","title":"create_subconversation","text":"<pre><code>create_subconversation() -&gt; ConsoleUI\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def create_subconversation(self) -&gt; \"ConsoleUI\":\n    sub_conversation = ConsoleUI(self)\n    self.sub_conversations.append(sub_conversation)\n\n    return sub_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]:\n    # logger.info(f\"process_message(): {message=}\")\n    return self.visit(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.start","title":"start","text":"<pre><code>start(\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def start(\n    self,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None:\n    run_workflow(app.wf, self, name, initial_message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit","title":"visit","text":"<pre><code>visit(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit(self, message: IOMessage) -&gt; Optional[str]:\n    method_name = f\"visit_{message.type}\"\n    method = getattr(self, method_name, self.visit_default)\n    return method(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_default","title":"visit_default","text":"<pre><code>visit_default(message: IOMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_default(self, message: IOMessage) -&gt; None:\n    content = message.model_dump()[\"content\"]\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=json.dumps(content, indent=2),\n    )\n    self._format_and_print(console_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_function_call_execution","title":"visit_function_call_execution","text":"<pre><code>visit_function_call_execution(\n    message: FunctionCallExecution,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_function_call_execution(\n    self, message: FunctionCallExecution\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_multiple_choice","title":"visit_multiple_choice","text":"<pre><code>visit_multiple_choice(message: MultipleChoice) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_multiple_choice(self, message: MultipleChoice) -&gt; str:\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=f\"{message.prompt} (choices: {', '.join(message.choices)}, default: {message.default})\",\n    )\n\n    prompt = self._format_message(console_msg)\n    prompt = self._indent(prompt)\n    while True:\n        # logger.info(f\"visit_multiple_choice(): {prompt=}\")\n        retval = input(prompt)\n        if retval in message.choices:\n            return retval\n        elif retval == \"\" and message.default:\n            return message.default\n        else:\n            print(f\"Invalid choice ('{retval}'). Please try again.\")  # noqa: T201 `print` found\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_suggested_function_call","title":"visit_suggested_function_call","text":"<pre><code>visit_suggested_function_call(\n    message: SuggestedFunctionCall,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_suggested_function_call(\n    self, message: SuggestedFunctionCall\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_system_message","title":"visit_system_message","text":"<pre><code>visit_system_message(\n    message: SystemMessage,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_system_message(self, message: SystemMessage) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_text_input","title":"visit_text_input","text":"<pre><code>visit_text_input(message: TextInput) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_text_input(self, message: TextInput) -&gt; str:\n    suggestions = (\n        f\" (suggestions: {', '.join(message.suggestions)})\"\n        if message.suggestions\n        else \"\"\n    )\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=f\"{message.prompt}{suggestions}:\",\n    )\n\n    prompt = self._format_message(console_msg)\n    prompt = self._indent(prompt)\n    if message.password:\n        return getpass.getpass(prompt)\n    else:\n        return input(prompt)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_text_message","title":"visit_text_message","text":"<pre><code>visit_text_message(message: TextMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/console/base.py</code> <pre><code>def visit_text_message(self, message: TextMessage) -&gt; None:\n    console_msg = self.ConsoleMessage(\n        sender=message.sender,\n        recipient=message.recipient,\n        heading=message.type,\n        body=message.body,\n    )\n    self._format_and_print(console_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/console/base/ConsoleUI/#fastagency.ui.console.base.ConsoleUI.visit_workflow_completed","title":"visit_workflow_completed","text":"<pre><code>visit_workflow_completed(\n    message: WorkflowCompleted,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_workflow_completed(self, message: WorkflowCompleted) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/","title":"MesopUI","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI","title":"fastagency.ui.mesop.MesopUI","text":"<pre><code>MesopUI(super_conversation: Optional[MesopUI] = None)\n</code></pre> <p>               Bases: <code>IOMessageVisitor</code></p> <p>Initialize the console UI object.</p> PARAMETER DESCRIPTION <code>super_conversation</code> <p>The super conversation. Defaults to None.</p> <p> TYPE: <code>Optional[MesopUI]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def __init__(self, super_conversation: \"Optional[MesopUI]\" = None) -&gt; None:\n    \"\"\"Initialize the console UI object.\n\n    Args:\n        super_conversation (Optional[MesopUI], optional): The super conversation. Defaults to None.\n    \"\"\"\n    self.id: str = uuid4().hex\n    self.super_conversation: Optional[MesopUI] = super_conversation\n    self.sub_conversations: list[MesopUI] = []\n    self._in_queue: Optional[Queue[str]] = None\n    self._out_queue: Optional[Queue[MesopMessage]] = None\n\n    if super_conversation is None:\n        self._in_queue = Queue()\n        self._out_queue = Queue()\n    MesopUI.register(self)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.app","title":"app  <code>property</code>","text":"<pre><code>app: Runnable\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str = hex\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.in_queue","title":"in_queue  <code>property</code>","text":"<pre><code>in_queue: Queue[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.is_root_conversation","title":"is_root_conversation  <code>property</code>","text":"<pre><code>is_root_conversation: bool\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.level","title":"level  <code>property</code>","text":"<pre><code>level: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.out_queue","title":"out_queue  <code>property</code>","text":"<pre><code>out_queue: Queue[MesopMessage]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.root_conversation","title":"root_conversation  <code>property</code>","text":"<pre><code>root_conversation: MesopUI\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.sub_conversations","title":"sub_conversations  <code>instance-attribute</code>","text":"<pre><code>sub_conversations: list[MesopUI] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.super_conversation","title":"super_conversation  <code>instance-attribute</code>","text":"<pre><code>super_conversation: Optional[MesopUI] = super_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.create","title":"create","text":"<pre><code>create(app: Runnable, import_string: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@contextmanager\ndef create(self, app: Runnable, import_string: str) -&gt; Iterator[None]:\n    logger.info(f\"Creating MesopUI with import string: {import_string}\")\n    self._app = app\n    self._import_string = import_string\n\n    start_script = \"\"\"import fastagency.ui.mesop.main\"\"\"\n\n    with TemporaryDirectory() as temp_dir:\n        main_path = Path(temp_dir) / \"main.py\"\n        with main_path.open(\"w\") as f:\n            f.write(start_script)\n\n        MESOP_FLAGS.mark_as_parsed()\n        MesopUI._main_path = str(main_path)\n        MesopUI._created_instance = self\n\n        yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.create_subconversation","title":"create_subconversation","text":"<pre><code>create_subconversation() -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def create_subconversation(self) -&gt; \"MesopUI\":\n    sub_conversation = MesopUI(self)\n    self.sub_conversations.append(sub_conversation)\n\n    return sub_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.get_conversation","title":"get_conversation  <code>classmethod</code>","text":"<pre><code>get_conversation(id: str) -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef get_conversation(cls, id: str) -&gt; \"MesopUI\":\n    return cls._registry[id]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.get_created_instance","title":"get_created_instance  <code>classmethod</code>","text":"<pre><code>get_created_instance() -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef get_created_instance(cls) -&gt; \"MesopUI\":\n    created_instance = cls._created_instance\n    if created_instance is None:\n        raise RuntimeError(\"MesopUI has not been created yet.\")\n\n    return created_instance\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.get_message_stream","title":"get_message_stream","text":"<pre><code>get_message_stream() -&gt; Generator[MesopMessage, None, None]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def get_message_stream(self) -&gt; Generator[MesopMessage, None, None]:\n    while True:\n        message = self.out_queue.get()\n        if self._is_stream_braker(message.io_message):\n            yield message\n            break\n        yield message\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]:\n    return self.visit(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.register","title":"register  <code>classmethod</code>","text":"<pre><code>register(conversation: MesopUI) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef register(cls, conversation: \"MesopUI\") -&gt; None:\n    cls._registry[conversation.id] = conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.respond","title":"respond","text":"<pre><code>respond(message: str) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def respond(self, message: str) -&gt; None:\n    self.in_queue.put(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.respond_to","title":"respond_to  <code>classmethod</code>","text":"<pre><code>respond_to(\n    conversation_id: str, message: str\n) -&gt; Generator[MesopMessage, None, None]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef respond_to(\n    cls, conversation_id: str, message: str\n) -&gt; Generator[MesopMessage, None, None]:\n    conversation = cls.get_conversation(conversation_id)\n    conversation.respond(message)\n    return conversation.get_message_stream()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.start","title":"start","text":"<pre><code>start(\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def start(\n    self,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None:\n    logger.info(\n        f\"Starting MesopUI: import_string={self._import_string}, main_path={self._main_path}\"\n    )\n\n    MesopUI._app = app\n\n    mesop_main([\"mesop\", self._main_path])\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.unregister","title":"unregister  <code>classmethod</code>","text":"<pre><code>unregister(conversation: MesopUI) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef unregister(cls, conversation: \"MesopUI\") -&gt; None:\n    del cls._registry[conversation.id]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit","title":"visit","text":"<pre><code>visit(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit(self, message: IOMessage) -&gt; Optional[str]:\n    method_name = f\"visit_{message.type}\"\n    method = getattr(self, method_name, self.visit_default)\n    return method(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_default","title":"visit_default","text":"<pre><code>visit_default(message: IOMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_default(self, message: IOMessage) -&gt; None:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_function_call_execution","title":"visit_function_call_execution","text":"<pre><code>visit_function_call_execution(\n    message: FunctionCallExecution,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_function_call_execution(\n    self, message: FunctionCallExecution\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_multiple_choice","title":"visit_multiple_choice","text":"<pre><code>visit_multiple_choice(message: MultipleChoice) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_multiple_choice(self, message: MultipleChoice) -&gt; str:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n    return self.in_queue.get()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_suggested_function_call","title":"visit_suggested_function_call","text":"<pre><code>visit_suggested_function_call(\n    message: SuggestedFunctionCall,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_suggested_function_call(\n    self, message: SuggestedFunctionCall\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_system_message","title":"visit_system_message","text":"<pre><code>visit_system_message(\n    message: SystemMessage,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_system_message(self, message: SystemMessage) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_text_input","title":"visit_text_input","text":"<pre><code>visit_text_input(message: TextInput) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_text_input(self, message: TextInput) -&gt; str:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n    return self.in_queue.get()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_text_message","title":"visit_text_message","text":"<pre><code>visit_text_message(message: TextMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_text_message(self, message: TextMessage) -&gt; None:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/MesopUI/#fastagency.ui.mesop.MesopUI.visit_workflow_completed","title":"visit_workflow_completed","text":"<pre><code>visit_workflow_completed(\n    message: WorkflowCompleted,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_workflow_completed(self, message: WorkflowCompleted) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopMessage/","title":"MesopMessage","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopMessage/#fastagency.ui.mesop.base.MesopMessage","title":"fastagency.ui.mesop.base.MesopMessage  <code>dataclass</code>","text":"<pre><code>MesopMessage(io_message: IOMessage, conversation: MesopUI)\n</code></pre> <p>A Mesop message.</p>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopMessage/#fastagency.ui.mesop.base.MesopMessage.conversation","title":"conversation  <code>instance-attribute</code>","text":"<pre><code>conversation: MesopUI\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopMessage/#fastagency.ui.mesop.base.MesopMessage.io_message","title":"io_message  <code>instance-attribute</code>","text":"<pre><code>io_message: IOMessage\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/","title":"MesopUI","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI","title":"fastagency.ui.mesop.base.MesopUI","text":"<pre><code>MesopUI(super_conversation: Optional[MesopUI] = None)\n</code></pre> <p>               Bases: <code>IOMessageVisitor</code></p> <p>Initialize the console UI object.</p> PARAMETER DESCRIPTION <code>super_conversation</code> <p>The super conversation. Defaults to None.</p> <p> TYPE: <code>Optional[MesopUI]</code> DEFAULT: <code>None</code> </p> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def __init__(self, super_conversation: \"Optional[MesopUI]\" = None) -&gt; None:\n    \"\"\"Initialize the console UI object.\n\n    Args:\n        super_conversation (Optional[MesopUI], optional): The super conversation. Defaults to None.\n    \"\"\"\n    self.id: str = uuid4().hex\n    self.super_conversation: Optional[MesopUI] = super_conversation\n    self.sub_conversations: list[MesopUI] = []\n    self._in_queue: Optional[Queue[str]] = None\n    self._out_queue: Optional[Queue[MesopMessage]] = None\n\n    if super_conversation is None:\n        self._in_queue = Queue()\n        self._out_queue = Queue()\n    MesopUI.register(self)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.app","title":"app  <code>property</code>","text":"<pre><code>app: Runnable\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str = hex\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.in_queue","title":"in_queue  <code>property</code>","text":"<pre><code>in_queue: Queue[str]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.is_root_conversation","title":"is_root_conversation  <code>property</code>","text":"<pre><code>is_root_conversation: bool\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.level","title":"level  <code>property</code>","text":"<pre><code>level: int\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.out_queue","title":"out_queue  <code>property</code>","text":"<pre><code>out_queue: Queue[MesopMessage]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.root_conversation","title":"root_conversation  <code>property</code>","text":"<pre><code>root_conversation: MesopUI\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.sub_conversations","title":"sub_conversations  <code>instance-attribute</code>","text":"<pre><code>sub_conversations: list[MesopUI] = []\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.super_conversation","title":"super_conversation  <code>instance-attribute</code>","text":"<pre><code>super_conversation: Optional[MesopUI] = super_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.create","title":"create","text":"<pre><code>create(app: Runnable, import_string: str) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@contextmanager\ndef create(self, app: Runnable, import_string: str) -&gt; Iterator[None]:\n    logger.info(f\"Creating MesopUI with import string: {import_string}\")\n    self._app = app\n    self._import_string = import_string\n\n    start_script = \"\"\"import fastagency.ui.mesop.main\"\"\"\n\n    with TemporaryDirectory() as temp_dir:\n        main_path = Path(temp_dir) / \"main.py\"\n        with main_path.open(\"w\") as f:\n            f.write(start_script)\n\n        MESOP_FLAGS.mark_as_parsed()\n        MesopUI._main_path = str(main_path)\n        MesopUI._created_instance = self\n\n        yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.create_subconversation","title":"create_subconversation","text":"<pre><code>create_subconversation() -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def create_subconversation(self) -&gt; \"MesopUI\":\n    sub_conversation = MesopUI(self)\n    self.sub_conversations.append(sub_conversation)\n\n    return sub_conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.get_conversation","title":"get_conversation  <code>classmethod</code>","text":"<pre><code>get_conversation(id: str) -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef get_conversation(cls, id: str) -&gt; \"MesopUI\":\n    return cls._registry[id]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.get_created_instance","title":"get_created_instance  <code>classmethod</code>","text":"<pre><code>get_created_instance() -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef get_created_instance(cls) -&gt; \"MesopUI\":\n    created_instance = cls._created_instance\n    if created_instance is None:\n        raise RuntimeError(\"MesopUI has not been created yet.\")\n\n    return created_instance\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.get_message_stream","title":"get_message_stream","text":"<pre><code>get_message_stream() -&gt; Generator[MesopMessage, None, None]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def get_message_stream(self) -&gt; Generator[MesopMessage, None, None]:\n    while True:\n        message = self.out_queue.get()\n        if self._is_stream_braker(message.io_message):\n            yield message\n            break\n        yield message\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]:\n    return self.visit(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.register","title":"register  <code>classmethod</code>","text":"<pre><code>register(conversation: MesopUI) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef register(cls, conversation: \"MesopUI\") -&gt; None:\n    cls._registry[conversation.id] = conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.respond","title":"respond","text":"<pre><code>respond(message: str) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def respond(self, message: str) -&gt; None:\n    self.in_queue.put(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.respond_to","title":"respond_to  <code>classmethod</code>","text":"<pre><code>respond_to(\n    conversation_id: str, message: str\n) -&gt; Generator[MesopMessage, None, None]\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef respond_to(\n    cls, conversation_id: str, message: str\n) -&gt; Generator[MesopMessage, None, None]:\n    conversation = cls.get_conversation(conversation_id)\n    conversation.respond(message)\n    return conversation.get_message_stream()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.start","title":"start","text":"<pre><code>start(\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def start(\n    self,\n    app: Runnable,\n    import_string: str,\n    name: Optional[str] = None,\n    initial_message: Optional[str] = None,\n) -&gt; None:\n    logger.info(\n        f\"Starting MesopUI: import_string={self._import_string}, main_path={self._main_path}\"\n    )\n\n    MesopUI._app = app\n\n    mesop_main([\"mesop\", self._main_path])\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.unregister","title":"unregister  <code>classmethod</code>","text":"<pre><code>unregister(conversation: MesopUI) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>@classmethod\ndef unregister(cls, conversation: \"MesopUI\") -&gt; None:\n    del cls._registry[conversation.id]\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit","title":"visit","text":"<pre><code>visit(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit(self, message: IOMessage) -&gt; Optional[str]:\n    method_name = f\"visit_{message.type}\"\n    method = getattr(self, method_name, self.visit_default)\n    return method(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_default","title":"visit_default","text":"<pre><code>visit_default(message: IOMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_default(self, message: IOMessage) -&gt; None:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_function_call_execution","title":"visit_function_call_execution","text":"<pre><code>visit_function_call_execution(\n    message: FunctionCallExecution,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_function_call_execution(\n    self, message: FunctionCallExecution\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_multiple_choice","title":"visit_multiple_choice","text":"<pre><code>visit_multiple_choice(message: MultipleChoice) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_multiple_choice(self, message: MultipleChoice) -&gt; str:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n    return self.in_queue.get()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_suggested_function_call","title":"visit_suggested_function_call","text":"<pre><code>visit_suggested_function_call(\n    message: SuggestedFunctionCall,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_suggested_function_call(\n    self, message: SuggestedFunctionCall\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_system_message","title":"visit_system_message","text":"<pre><code>visit_system_message(\n    message: SystemMessage,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_system_message(self, message: SystemMessage) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_text_input","title":"visit_text_input","text":"<pre><code>visit_text_input(message: TextInput) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_text_input(self, message: TextInput) -&gt; str:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n    return self.in_queue.get()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_text_message","title":"visit_text_message","text":"<pre><code>visit_text_message(message: TextMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def visit_text_message(self, message: TextMessage) -&gt; None:\n    mesop_msg = self._mesop_message(message)\n    self._publish(mesop_msg)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/MesopUI/#fastagency.ui.mesop.base.MesopUI.visit_workflow_completed","title":"visit_workflow_completed","text":"<pre><code>visit_workflow_completed(\n    message: WorkflowCompleted,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_workflow_completed(self, message: WorkflowCompleted) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/base/run_workflow/","title":"run_workflow","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/base/run_workflow/#fastagency.ui.mesop.base.run_workflow","title":"fastagency.ui.mesop.base.run_workflow","text":"<pre><code>run_workflow(\n    wf: Workflows, name: str, initial_message: str\n) -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/base.py</code> <pre><code>def run_workflow(wf: Workflows, name: str, initial_message: str) -&gt; MesopUI:\n    def conversation_worker(ui: MesopUI, subconversation: MesopUI) -&gt; None:\n        ui.process_message(\n            IOMessage.create(\n                sender=\"user\",\n                recipient=\"workflow\",\n                type=\"system_message\",\n                message={\n                    \"heading\": \"Workflow BEGIN\",\n                    \"body\": f\"Starting workflow with initial_message: {initial_message}\",\n                },\n            )\n        )\n        try:\n            result = wf.run(\n                name=name,\n                session_id=\"session_id\",\n                ui=subconversation,  # type: ignore[arg-type]\n                initial_message=initial_message,\n            )\n        except Exception as ex:\n            ui.process_message(\n                IOMessage.create(\n                    sender=\"user\",\n                    recipient=\"workflow\",\n                    type=\"system_message\",\n                    message={\n                        \"heading\": \"Workflow Exception\",\n                        \"body\": f\"Ending workflow with exception: {ex}\",\n                    },\n                )\n            )\n            ui.process_message(\n                IOMessage.create(\n                    sender=\"user\",\n                    recipient=\"workflow\",\n                    type=\"workflow_completed\",\n                    result=None,\n                )\n            )\n            return\n\n        ui.process_message(\n            IOMessage.create(\n                sender=\"user\",\n                recipient=\"workflow\",\n                type=\"system_message\",\n                message={\n                    \"heading\": \"Workflow END\",\n                    \"body\": f\"Ending workflow with result: {result}\",\n                },\n            )\n        )\n\n        ui.process_message(\n            IOMessage.create(\n                sender=\"user\",\n                recipient=\"workflow\",\n                type=\"workflow_completed\",\n                result=result,\n            )\n        )\n\n    ui = MesopUI()\n    subconversation = ui.create_subconversation()\n    thread = threading.Thread(target=conversation_worker, args=(ui, subconversation))\n    thread.start()\n\n    return subconversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/components/inputs/input_prompt/","title":"input_prompt","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/components/inputs/input_prompt/#fastagency.ui.mesop.components.inputs.input_prompt","title":"fastagency.ui.mesop.components.inputs.input_prompt","text":"<pre><code>input_prompt(\n    send_prompt: Callable[[ClickEvent], Iterator[None]]\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/components/inputs.py</code> <pre><code>def input_prompt(send_prompt: Callable[[me.ClickEvent], Iterator[None]]) -&gt; None:\n    with me.box(\n        style=me.Style(\n            border_radius=16,\n            padding=me.Padding.all(8),\n            background=\"white\",\n            display=\"flex\",\n            width=\"100%\",\n        )\n    ):\n        with me.box(style=me.Style(flex_grow=1)):\n            me.native_textarea(\n                placeholder=\"Enter a prompt\",\n                key=\"prompt\",\n                on_blur=_on_blur,\n                style=me.Style(\n                    padding=me.Padding(top=16, left=16),\n                    outline=\"none\",\n                    width=\"100%\",\n                    border=me.Border.all(me.BorderSide(style=\"none\")),\n                ),\n            )\n        with me.content_button(type=\"icon\", on_click=send_prompt):\n            me.icon(\"send\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/components/inputs/input_user_feedback/","title":"input_user_feedback","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/components/inputs/input_user_feedback/#fastagency.ui.mesop.components.inputs.input_user_feedback","title":"fastagency.ui.mesop.components.inputs.input_user_feedback","text":"<pre><code>input_user_feedback(\n    send_feedback: Callable[[ClickEvent], Iterator[None]]\n) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/components/inputs.py</code> <pre><code>def input_user_feedback(\n    send_feedback: Callable[[me.ClickEvent], Iterator[None]],\n) -&gt; None:\n    with me.box(\n        style=me.Style(\n            border_radius=16,\n            padding=me.Padding.all(8),\n            background=\"white\",\n            display=\"flex\",\n            width=\"100%\",\n        )\n    ):\n        with me.box(style=me.Style(flex_grow=1)):\n            me.native_textarea(\n                placeholder=\"Provide a feedback to the team\",\n                on_blur=_on_blur,\n                key=\"feedback\",\n                style=me.Style(\n                    padding=me.Padding(top=16, left=16),\n                    outline=\"none\",\n                    width=\"100%\",\n                    border=me.Border.all(me.BorderSide(style=\"none\")),\n                ),\n            )\n        with me.content_button(type=\"icon\", on_click=send_feedback):\n            me.icon(\"send\")\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/components/ui_common/darken_hex_color/","title":"darken_hex_color","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/components/ui_common/darken_hex_color/#fastagency.ui.mesop.components.ui_common.darken_hex_color","title":"fastagency.ui.mesop.components.ui_common.darken_hex_color","text":"<pre><code>darken_hex_color(\n    hex_color: str, factor: float = 0.8\n) -&gt; str\n</code></pre> <p>Darkens a hex color by a given factor.</p> <p>Args: hex_color: The hex color code (e.g., '#FF0000'). factor: The darkening factor (0.0 to 1.0, where 1.0 is no change and 0.0 is completely dark).</p> <p>Returns: The darkened hex color code.</p> Source code in <code>fastagency/ui/mesop/components/ui_common.py</code> <pre><code>def darken_hex_color(hex_color: str, factor: float = 0.8) -&gt; str:\n    \"\"\"Darkens a hex color by a given factor.\n\n    Args:\n    hex_color: The hex color code (e.g., '#FF0000').\n    factor: The darkening factor (0.0 to 1.0, where 1.0 is no change and 0.0 is completely dark).\n\n    Returns:\n    The darkened hex color code.\n    \"\"\"\n    # Remove the '#' prefix if it exists\n    hex_color = hex_color.lstrip(\"#\")\n\n    if len(hex_color) == 3:\n        hex_color = \"\".join(char * 2 for char in hex_color)\n\n    # Convert hex to RGB values\n    rgb = tuple(int(hex_color[i : i + 2], 16) for i in (0, 2, 4))\n\n    # Darken each component\n    darkened_rgb = tuple(int(channel * factor) for channel in rgb)\n\n    # Convert back to hex\n    darkened_hex = \"#{:02X}{:02X}{:02X}\".format(*darkened_rgb)\n\n    return darkened_hex\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/components/ui_common/header/","title":"header","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/components/ui_common/header/#fastagency.ui.mesop.components.ui_common.header","title":"fastagency.ui.mesop.components.ui_common.header","text":"<pre><code>header() -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/components/ui_common.py</code> <pre><code>def header() -&gt; None:\n    with me.box(\n        style=me.Style(\n            padding=me.Padding(bottom=\"24px\"),\n        ),\n    ):\n        me.text(\n            \"FastAgency - Mesop\",\n            style=me.Style(\n                font_weight=500,\n                font_size=24,\n                color=\"#3D3929\",\n                letter_spacing=\"0.3px\",\n            ),\n        )\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/","title":"Conversation","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation","title":"fastagency.ui.mesop.data_model.Conversation  <code>dataclass</code>","text":"<pre><code>Conversation(\n    id: str = \"\",\n    title: str = \"\",\n    completed: bool = False,\n    waiting_for_feedback: bool = False,\n    feedback: str = \"\",\n    is_from_the_past: bool = False,\n    messages: list[str] = list(),\n    fastagency: Optional[str] = None,\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.completed","title":"completed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>completed: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.fastagency","title":"fastagency  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fastagency: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.feedback","title":"feedback  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>feedback: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.is_from_the_past","title":"is_from_the_past  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_from_the_past: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.messages","title":"messages  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>messages: list[str] = field(default_factory=list)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.title","title":"title  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>title: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/Conversation/#fastagency.ui.mesop.data_model.Conversation.waiting_for_feedback","title":"waiting_for_feedback  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>waiting_for_feedback: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/","title":"State","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State","title":"fastagency.ui.mesop.data_model.State","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State.conversation","title":"conversation  <code>instance-attribute</code>","text":"<pre><code>conversation: Conversation\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State.fastagency","title":"fastagency  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fastagency: Optional[str] = None\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State.hide_past","title":"hide_past  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hide_past: bool = True\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State.in_conversation","title":"in_conversation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>in_conversation: bool = False\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State.past_conversations","title":"past_conversations  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>past_conversations: list[Conversation] = field(\n    default_factory=list\n)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/data_model/State/#fastagency.ui.mesop.data_model.State.prompt","title":"prompt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>prompt: str = ''\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/conversation_box/","title":"conversation_box","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/main/conversation_box/#fastagency.ui.mesop.main.conversation_box","title":"fastagency.ui.mesop.main.conversation_box","text":"<pre><code>conversation_box() -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def conversation_box() -&gt; None:\n    state = me.state(State)\n    conversation = state.conversation\n    with me.box(style=CHAT_STARTER_STYLE):\n        header()\n        messages = conversation.messages\n        with me.box(\n            style=me.Style(\n                overflow_y=\"auto\",\n            )\n        ):\n            for message in messages:\n                message_box(message)\n            if messages:\n                me.box(\n                    key=\"end_of_messages\",\n                    style=me.Style(margin=me.Margin(bottom=\"50vh\")),\n                )\n        if conversation.waiting_for_feedback:\n            input_user_feedback(on_user_feedback)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/conversation_starter_box/","title":"conversation_starter_box","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/main/conversation_starter_box/#fastagency.ui.mesop.main.conversation_starter_box","title":"fastagency.ui.mesop.main.conversation_starter_box","text":"<pre><code>conversation_starter_box() -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def conversation_starter_box() -&gt; None:\n    with me.box(style=CHAT_STARTER_STYLE):\n        header()\n        with me.box(\n            style=me.Style(\n                width=\"min(680px, 100%)\",\n                # margin=me.Margin.symmetric(horizontal=\"auto\", vertical=36),\n            )\n        ):\n            me.text(\n                \"Enter a prompt to chat with FastAgency team\",\n                style=me.Style(font_size=20, margin=me.Margin(bottom=24)),\n            )\n            input_prompt(send_prompt)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/get_ui/","title":"get_ui","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/main/get_ui/#fastagency.ui.mesop.main.get_ui","title":"fastagency.ui.mesop.main.get_ui","text":"<pre><code>get_ui() -&gt; MesopUI\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def get_ui() -&gt; MesopUI:\n    return MesopUI.get_created_instance()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/home_page/","title":"home_page","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/main/home_page/#fastagency.ui.mesop.main.home_page","title":"fastagency.ui.mesop.main.home_page","text":"<pre><code>home_page() -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>@me.page(  # type: ignore[misc]\n    path=\"/\",\n    stylesheets=STYLESHEETS,\n    security_policy=SECURITY_POLICY,\n)\ndef home_page() -&gt; None:\n    state = me.state(State)\n    with me.box(style=ROOT_BOX_STYLE):\n        past_conversations_box()\n        if state.in_conversation:\n            conversation_box()\n        else:\n            conversation_starter_box()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/on_user_feedback/","title":"on_user_feedback","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/main/on_user_feedback/#fastagency.ui.mesop.main.on_user_feedback","title":"fastagency.ui.mesop.main.on_user_feedback","text":"<pre><code>on_user_feedback(e: ClickEvent) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def on_user_feedback(e: me.ClickEvent) -&gt; Iterator[None]:\n    state = me.state(State)\n    conversation = state.conversation\n    feedback = conversation.feedback\n    conversation.feedback = \"\"\n    conversation.waiting_for_feedback = False\n    yield\n    me.scroll_into_view(key=\"end_of_messages\")\n    yield\n    responses = send_user_feedback_to_autogen(feedback)\n    for message in responses:\n        state = me.state(State)\n        _handle_message(state, message)\n        yield\n        me.scroll_into_view(key=\"end_of_messages\")\n        yield\n    yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/past_conversations_box/","title":"past_conversations_box","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/main/past_conversations_box/#fastagency.ui.mesop.main.past_conversations_box","title":"fastagency.ui.mesop.main.past_conversations_box","text":"<pre><code>past_conversations_box() -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def past_conversations_box() -&gt; None:\n    def select_past_conversation(ev: me.ClickEvent) -&gt; None:\n        id = ev.key\n        state = me.state(State)\n        conversations_with_id = list(\n            filter(lambda c: c.id == id, state.past_conversations)\n        )\n        conversation = conversations_with_id[0]\n        state.conversation = conversation\n        state.in_conversation = True\n\n    def on_show_hide(ev: me.ClickEvent) -&gt; None:\n        state.hide_past = not state.hide_past\n\n    def on_start_new_conversation(ev: me.ClickEvent) -&gt; None:\n        state.in_conversation = False\n\n    state = me.state(State)\n    style = PAST_CHATS_HIDE_STYLE if state.hide_past else PAST_CHATS_SHOW_STYLE\n    with me.box(style=style):\n        with me.box(\n            style=me.Style(\n                flex_direction=\"row\",\n                width=\"100%\",\n                padding=me.Padding(top=\"16px\"),\n                justify_content=\"space-between\",\n            )\n        ):\n            with me.content_button(\n                on_click=on_show_hide, disabled=not state.past_conversations\n            ):\n                me.icon(\"menu\")\n            with me.content_button(\n                on_click=on_start_new_conversation,\n                disabled=not state.conversation.completed,\n            ):\n                me.icon(\"rate_review\")\n        if not state.hide_past:\n            for conversation in state.past_conversations:\n                with me.box(\n                    key=conversation.id,  # they are GUIDs so should not clash with anything other on the page\n                    on_click=select_past_conversation,\n                    style=me.Style(\n                        padding=me.Padding.all(16),\n                        border_radius=16,\n                    ),\n                ):\n                    me.text(\n                        text=conversation.title,\n                    )\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/main/send_prompt/","title":"send_prompt","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/main/send_prompt/#fastagency.ui.mesop.main.send_prompt","title":"fastagency.ui.mesop.main.send_prompt","text":"<pre><code>send_prompt(e: ClickEvent) -&gt; Iterator[None]\n</code></pre> Source code in <code>fastagency/ui/mesop/main.py</code> <pre><code>def send_prompt(e: me.ClickEvent) -&gt; Iterator[None]:\n    ui = get_ui()\n    wf = ui.app.wf\n\n    name = wf.names[0]\n\n    state = me.state(State)\n    # me.navigate(\"/conversation\")\n    prompt = state.prompt\n    state.prompt = \"\"\n    conversation = Conversation(\n        title=prompt, completed=False, waiting_for_feedback=False\n    )\n    state.conversation = conversation\n    state.in_conversation = True\n    yield\n    responses = send_prompt_to_autogen(prompt=prompt, wf=wf, name=name)\n    for message in responses:\n        state = me.state(State)\n        _handle_message(state, message)\n        yield\n        me.scroll_into_view(key=\"end_of_messages\")\n        yield\n    yield\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/","title":"MesopGUIMessageVisitor","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor","title":"fastagency.ui.mesop.message.MesopGUIMessageVisitor","text":"<pre><code>MesopGUIMessageVisitor(level: int, conversation_id: str)\n</code></pre> <p>               Bases: <code>IOMessageVisitor</code></p> <p>Initialize the MesopGUIMessageVisitor object.</p> PARAMETER DESCRIPTION <code>level</code> <p>The level of the message.</p> <p> TYPE: <code>int</code> </p> <code>conversation_id</code> <p>The ID of the conversation.</p> <p> TYPE: <code>str</code> </p> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def __init__(self, level: int, conversation_id: str) -&gt; None:\n    \"\"\"Initialize the MesopGUIMessageVisitor object.\n\n    Args:\n        level (int): The level of the message.\n        conversation_id (str): The ID of the conversation.\n    \"\"\"\n    self._level = level\n    self._conversation_id = conversation_id\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.process_message","title":"process_message","text":"<pre><code>process_message(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def process_message(self, message: IOMessage) -&gt; Optional[str]:\n    return self.visit(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit","title":"visit","text":"<pre><code>visit(message: IOMessage) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit(self, message: IOMessage) -&gt; Optional[str]:\n    method_name = f\"visit_{message.type}\"\n    method = getattr(self, method_name, self.visit_default)\n    return method(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_default","title":"visit_default","text":"<pre><code>visit_default(message: IOMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def visit_default(self, message: IOMessage) -&gt; None:\n    base_color = \"#aff\"\n    with me.box(\n        style=me.Style(\n            background=base_color,\n            padding=me.Padding.all(16),\n            border_radius=16,\n            margin=me.Margin.symmetric(vertical=16),\n        )\n    ):\n        self._header(message, base_color)\n        me.markdown(message.type)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_function_call_execution","title":"visit_function_call_execution","text":"<pre><code>visit_function_call_execution(\n    message: FunctionCallExecution,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_function_call_execution(\n    self, message: FunctionCallExecution\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_multiple_choice","title":"visit_multiple_choice","text":"<pre><code>visit_multiple_choice(message: MultipleChoice) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def visit_multiple_choice(self, message: MultipleChoice) -&gt; str:\n    text = message.prompt if message.prompt else \"Please enter a value\"\n    if message.choices:\n        options = \",\".join(\n            f\"{i+1}. {choice}\" for i, choice in enumerate(message.choices)\n        )\n        text += \"\\n\" + options\n    base_color = \"#cff\"\n    with me.box(\n        style=me.Style(\n            background=base_color,\n            padding=me.Padding.all(16),\n            border_radius=16,\n            margin=me.Margin.symmetric(vertical=16),\n        )\n    ):\n        self._header(message, base_color, title=\"Input requested\")\n        me.markdown(text)\n    return \"\"\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_suggested_function_call","title":"visit_suggested_function_call","text":"<pre><code>visit_suggested_function_call(\n    message: SuggestedFunctionCall,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_suggested_function_call(\n    self, message: SuggestedFunctionCall\n) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_system_message","title":"visit_system_message","text":"<pre><code>visit_system_message(message: SystemMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def visit_system_message(self, message: SystemMessage) -&gt; None:\n    base_color = \"#bff\"\n    with me.box(\n        style=me.Style(\n            background=base_color,\n            padding=me.Padding.all(16),\n            border_radius=16,\n            margin=me.Margin.symmetric(vertical=16),\n        )\n    ):\n        self._header(message, base_color, title=\"System Message\")\n        me.markdown(json.dumps(message.message, indent=2))\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_text_input","title":"visit_text_input","text":"<pre><code>visit_text_input(message: TextInput) -&gt; str\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def visit_text_input(self, message: TextInput) -&gt; str:\n    text = message.prompt if message.prompt else \"Please enter a value\"\n    if message.suggestions:\n        suggestions = \",\".join(suggestion for suggestion in message.suggestions)\n        text += \"\\n\" + suggestions\n\n    base_color = \"#bff\"\n    with me.box(\n        style=me.Style(\n            background=base_color,\n            padding=me.Padding.all(16),\n            border_radius=16,\n            margin=me.Margin.symmetric(vertical=16),\n        )\n    ):\n        self._header(message, base_color, title=\"Input requested\")\n        me.markdown(text)\n    return \"\"\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_text_message","title":"visit_text_message","text":"<pre><code>visit_text_message(message: TextMessage) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def visit_text_message(self, message: TextMessage) -&gt; None:\n    base_color = \"#fff\"\n    with me.box(\n        style=me.Style(\n            background=base_color,\n            padding=me.Padding.all(16),\n            border_radius=16,\n            margin=me.Margin.symmetric(vertical=16),\n        )\n    ):\n        self._header(message, base_color, title=\"Text message\")\n        me.markdown(message.body)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/MesopGUIMessageVisitor/#fastagency.ui.mesop.message.MesopGUIMessageVisitor.visit_workflow_completed","title":"visit_workflow_completed","text":"<pre><code>visit_workflow_completed(\n    message: WorkflowCompleted,\n) -&gt; Optional[str]\n</code></pre> Source code in <code>fastagency/base.py</code> <pre><code>def visit_workflow_completed(self, message: WorkflowCompleted) -&gt; Optional[str]:\n    return self.visit_default(message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/message/message_box/","title":"message_box","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/message/message_box/#fastagency.ui.mesop.message.message_box","title":"fastagency.ui.mesop.message.message_box","text":"<pre><code>message_box(message: str) -&gt; None\n</code></pre> Source code in <code>fastagency/ui/mesop/message.py</code> <pre><code>def message_box(message: str) -&gt; None:\n    message_dict = json.loads(message)\n    level = message_dict[\"level\"]\n    conversation_id = message_dict[\"conversationId\"]\n    io_message_dict = message_dict[\"io_message\"]\n    io_message = IOMessage.create(**io_message_dict)\n    visitor = MesopGUIMessageVisitor(level, conversation_id)\n    visitor.process_message(io_message)\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/send_prompt/send_prompt_to_autogen/","title":"send_prompt_to_autogen","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/send_prompt/send_prompt_to_autogen/#fastagency.ui.mesop.send_prompt.send_prompt_to_autogen","title":"fastagency.ui.mesop.send_prompt.send_prompt_to_autogen","text":"<pre><code>send_prompt_to_autogen(\n    prompt: str, wf: Workflows, name: str\n) -&gt; Iterable[MesopMessage]\n</code></pre> Source code in <code>fastagency/ui/mesop/send_prompt.py</code> <pre><code>def send_prompt_to_autogen(\n    prompt: str, wf: Workflows, name: str\n) -&gt; Iterable[MesopMessage]:\n    mesop_io = run_workflow(wf, name=name, initial_message=prompt)\n    state = me.state(State)\n    state.conversation.fastagency = mesop_io.id\n    return mesop_io.get_message_stream()\n</code></pre>","boost":0.5},{"location":"api/fastagency/ui/mesop/send_prompt/send_user_feedback_to_autogen/","title":"send_user_feedback_to_autogen","text":"","boost":0.5},{"location":"api/fastagency/ui/mesop/send_prompt/send_user_feedback_to_autogen/#fastagency.ui.mesop.send_prompt.send_user_feedback_to_autogen","title":"fastagency.ui.mesop.send_prompt.send_user_feedback_to_autogen","text":"<pre><code>send_user_feedback_to_autogen(\n    user_response: str,\n) -&gt; Iterable[MesopMessage]\n</code></pre> Source code in <code>fastagency/ui/mesop/send_prompt.py</code> <pre><code>def send_user_feedback_to_autogen(user_response: str) -&gt; Iterable[MesopMessage]:\n    state = me.state(State)\n    mesop_id = state.fastagency\n    mesop_io = MesopUI.get_conversation(mesop_id)\n    mesop_io.respond(user_response)\n    return mesop_io.get_message_stream()\n</code></pre>","boost":0.5},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/CONTRIBUTING/","title":"Development","text":"<p>After cloning the project, you'll need to set up the development environment. Here are the guidelines on how to do this.</p>","boost":3},{"location":"contributing/CONTRIBUTING/#virtual-environment-with-venv","title":"Virtual Environment with <code>venv</code>","text":"<p>Create a virtual environment in a directory using Python's <code>venv</code> module:</p> <pre><code>python -m venv venv\n</code></pre> <p>That will create a <code>./venv/</code> directory with Python binaries, allowing you to install packages in an isolated environment.</p>","boost":3},{"location":"contributing/CONTRIBUTING/#activate-the-environment","title":"Activate the Environment","text":"<p>Activate the new environment with:</p> <pre><code>source ./venv/bin/activate\n</code></pre> <p>Ensure you have the latest pip version in your virtual environment:</p> <pre><code>python -m pip install --upgrade pip\n</code></pre>","boost":3},{"location":"contributing/CONTRIBUTING/#installing-dependencies","title":"Installing Dependencies","text":"<p>After activating the virtual environment as described above, run:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre> <p>This will install all the dependencies and your local FastAgency in your virtual environment.</p>","boost":3},{"location":"contributing/CONTRIBUTING/#using-your-local-fastagency","title":"Using Your local FastAgency","text":"<p>If you create a Python file that imports and uses FastAgency, and run it with the Python from your local environment, it will use your local FastAgency source code.</p> <p>Whenever you update your local FastAgency source code, it will automatically use the latest version when you run your Python file again. This is because it is installed with <code>-e</code>.</p> <p>This way, you don't have to \"install\" your local version to be able to test every change.</p>","boost":3},{"location":"contributing/CONTRIBUTING/#running-tests","title":"Running Tests","text":"","boost":3},{"location":"contributing/CONTRIBUTING/#pytest","title":"Pytest","text":"<p>To run tests with your current FastAgency application and Python environment, use:</p> <pre><code>pytest tests\n# or\n./scripts/test.sh\n# with coverage output\n./scripts/test-cov.sh\n</code></pre> <p>In your project, you'll find some pytest marks:</p> <ul> <li>slow</li> <li>all</li> </ul> <p>By default, running pytest will execute \"not slow\" tests.</p> <p>To run all tests use:</p> <pre><code>pytest -m 'all'\n</code></pre>","boost":3},{"location":"contributing/docs/","title":"Documentation","text":"","boost":3},{"location":"contributing/docs/#how-to-help","title":"How to help","text":"<p>You will be of invaluable help if you contribute to the documentation.</p> <p>Such a contribution can be:</p> <ul> <li>Indications of inaccuracies, errors, typos</li> <li>Suggestions for editing specific sections</li> <li>Making additions</li> </ul> <p>You can report all this in discussions on GitHub, start issue, or write about it in our discord group.</p> <p>Note</p> <p>Special thanks to those who are ready to offer help with the case and help in developing documentation, as well as translating it into other languages.</p>","boost":3},{"location":"contributing/docs/#how-to-get-started","title":"How to get started","text":"<p>To develop the documentation, you don't even need to install the entire FastAgency project as a whole.</p> <p>Enough:</p> <ol> <li>Clone the project repository</li> <li>Create a virtual environment     <pre><code>python -m venv venv\n</code></pre></li> <li>Activate it     <pre><code>source venv/bin/activate\n</code></pre></li> <li>Install documentation dependencies     <pre><code>pip install \".[devdocs]\"\n</code></pre></li> <li>Go to the <code>docs/</code> directory</li> <li>Start the local documentation server     <pre><code>mkdocs serve\n</code></pre></li> </ol> <p>Now all changes in the documentation files will be reflected on your local version of the site. After making all the changes, you can issue a <code>PR</code> with them - and we will gladly accept it!</p>","boost":3},{"location":"getting-started/","title":"Getting Started with FastAgency","text":"<p>The fastest way to bring multi-agent workflows to production.</p> <p> </p> <p>Welcome to FastAgency! This guide will walk you through the initial setup and usage of FastAgency, a powerful tool that leverages the AutoGen framework to quickly build applications. FastAgency is designed to be flexible and adaptable, and we plan to extend support to additional agentic frameworks such as CrewAI in the near future. This will provide even more options for defining workflows and integrating with various AI tools.</p> <p>With FastAgency, you can create interactive applications using various interfaces such as a console or Mesop.</p>","boost":10},{"location":"getting-started/#supported-interfaces","title":"Supported Interfaces","text":"<p>FastAgency currently supports workflows defined using AutoGen and provides options for different types of applications:</p> <ul> <li>Console: Use the ConsoleUI interface for command-line based interaction. This is ideal for developing and testing workflows in a text-based environment.</li> <li>Mesop: Utilize Mesop with MesopUI for web-based applications. This interface is suitable for creating web applications with a user-friendly interface.</li> </ul> <p>We are also working on adding support for other frameworks, such as CrewAI, to broaden the scope and capabilities of FastAgency. Stay tuned for updates on these integrations.</p>","boost":10},{"location":"getting-started/#quick-start","title":"Quick start","text":"","boost":10},{"location":"getting-started/#install","title":"Install","text":"<p>To get started, you need to install FastAgency. You can do this using <code>pip</code>, Python's package installer. Choose the installation command based on the interface you want to use:</p> ConsoleMesop <pre><code>pip install \"fastagency[autogen]\"\n</code></pre> <p>This command installs FastAgency with support for the Console interface and AutoGen framework.</p> <pre><code>pip install \"fastagency[autogen,mesop]\"\n</code></pre> <p>This command installs FastAgency with support for both the Console and Mesop interfaces, providing a more comprehensive setup.</p> <p>Using older AutoGen version 0.2.x</p> <p>In case you want to use an older version of AutoGen (<code>pyautogen</code> instead of <code>autogen</code> package ), please use the following pip command:</p> ConsoleMesop <pre><code>pip install \"fastagency[pyautogen]\"\n</code></pre> <p>This command installs FastAgency with support for the Console interface and AutoGen framework.</p> <pre><code>pip install \"fastagency[pyautogen,mesop]\"\n</code></pre>","boost":10},{"location":"getting-started/#imports","title":"Imports","text":"<p>Depending on the interface you choose, you'll need to import different modules. These imports set up the necessary components for your application:</p> ConsoleMesop <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import FastAgency\nfrom fastagency import UI\nfrom fastagency.ui.console import ConsoleUI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\n</code></pre> <p>For Console applications, import <code>ConsoleUI</code> to handle command-line input and output.</p> <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import FastAgency\nfrom fastagency import UI\nfrom fastagency.ui.mesop import MesopUI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\n</code></pre> <p>For Mesop applications, import <code>MesopUI</code> to integrate with the Mesop web interface.</p>","boost":10},{"location":"getting-started/#define-workflow","title":"Define Workflow","text":"<p>You need to define the workflow that your application will use. This is where you specify how the agents interact and what they do. Here's a simple example of a workflow definition:</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_learning\", description=\"Student and teacher learning chat\")\ndef simple_workflow(ui: UI, initial_message: str, session_id: str) -&gt; str:\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student willing to learn.\",\n        llm_config=llm_config,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a math teacher.\",\n        llm_config=llm_config,\n    )\n\n    chat_result = student_agent.initiate_chat(\n        teacher_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=5,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre> <p>This code snippet sets up a simple learning chat between a student and a teacher. You define the agents and how they should interact, specifying how the conversation should be summarized.</p>","boost":10},{"location":"getting-started/#define-fastagency-application","title":"Define FastAgency Application","text":"<p>Next, define your FastAgency application. This ties together your workflow and the interface you chose:</p> ConsoleMesop <pre><code>app = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre> <p>For Console applications, use <code>ConsoleUI</code> to handle user interaction via the command line.</p> <pre><code>app = FastAgency(wf=wf, ui=MesopUI())\n</code></pre> <p>For Mesop applications, use <code>MesopUI</code> to enable web-based interactions.</p>","boost":10},{"location":"getting-started/#run-application","title":"Run Application","text":"<p>Once everything is set up, you can run your FastAgency application using the following command:</p> <pre><code>fastagency run\n</code></pre>","boost":10},{"location":"getting-started/#output","title":"Output","text":"<p>The output will vary based on the interface:</p> ConsoleMesop <pre><code>\u256d\u2500 Python module file \u2500\u256e\n\u2502                      \u2502\n\u2502  \ud83d\udc0d main.py          \u2502\n\u2502                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n\u256d\u2500 Importable FastAgency app \u2500\u256e\n\u2502                             \u2502\n\u2502  from main import app       \u2502\n\u2502                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500 FastAgency -&gt; user [text_input] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 Starting a new workflow 'simple_learning' with the following                 \u2502\n\u2502 description:                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 Student and teacher learning chat                                            \u2502\n\u2502                                                                              \u2502\n\u2502 Please enter an                                                              \u2502\n\u2502 initial message:                                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>For Console applications, you will see a command-line prompt where you can enter the initial message and interact with your workflow.</p> <pre><code>\u256d\u2500 Python module file \u2500\u256e\n\u2502                      \u2502\n\u2502  \ud83d\udc0d main_mesop.py    \u2502\n\u2502                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n\u256d\u2500 Importable FastAgency app \u2500\u2500\u256e\n\u2502                              \u2502\n\u2502  from main_mesop import app  \u2502\n\u2502                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nRunning with hot reload:\n\nRunning server on: http://localhost:32123\n* Serving Flask app 'mesop.server.server'\n* Debug mode: off\n</code></pre> <p>For Mesop applications, the output will include a URL where you can access your web-based application.</p>","boost":10},{"location":"getting-started/#future-plans","title":"Future Plans","text":"<p>We are actively working on expanding FastAgency\u2019s capabilities. In addition to supporting AutoGen, we plan to integrate support for other frameworks, such as CrewAI, to provide more flexibility and options for building applications. This will allow you to define workflows using a variety of frameworks and leverage their unique features and functionalities.</p>","boost":10},{"location":"getting-started/#stay-in-touch","title":"Stay in touch","text":"<p>Please show your support and stay in touch by:</p> <ul> <li> <p>giving our GitHub repository a star, and</p> </li> <li> <p>joining our Discord server</p> </li> </ul> <p>Your support helps us to stay in touch with you and encourages us to continue developing and improving the framework. Thank you for your support!</p>","boost":10},{"location":"getting-started/#contributors","title":"Contributors","text":"<p>Thanks to all of these amazing people who made the project better!</p> <p> </p>","boost":10},{"location":"user-guide/","title":"Introduction to FastAgency","text":"<p>FastAgency is an open-source framework designed to accelerate the transition from prototype to production for multi-agent AI workflows. For developers who use the AutoGen framework, FastAgency enables you to seamlessly scale Jupyter notebook prototypes into fully functional, production-ready applications. With multi-framework support, a unified programming interface, and powerful API integration capabilities, FastAgency streamlines the deployment process, saving time and effort while maintaining flexibility and performance.</p> <p>Whether you're orchestrating complex AI agents or integrating external APIs into workflows, FastAgency provides the tools necessary to quickly transition from concept to production, reducing development cycles and allowing you to focus on optimizing your multi-agent systems.</p>"},{"location":"user-guide/#key-features","title":"Key Features","text":"<ul> <li> <p>Multi-Runtime Support: FastAgency supports multiple agentic runtimes to provide maximum flexibility. Currently, it supports AutoGen and plans to extend support to CrewAI. This ensures that as the AI ecosystem evolves, FastAgency remains a reliable and adaptable framework, capable of leveraging emerging agentic technologies. Developers can easily switch between frameworks, choosing the best one for their project's specific needs.</p> </li> <li> <p>Unified Programming Interface Across UIs: FastAgency features a common programming interface that enables you to develop your core workflows once and reuse them across various user interfaces without rewriting code. This includes support for both console-based applications via <code>ConsoleUI</code> and web-based applications via <code>MesopUI</code>. Whether you need a command-line tool or a fully interactive web app, FastAgency allows you to deploy the same underlying workflows across environments, saving development time and ensuring consistency.</p> </li> <li> <p>Seamless External API Integration: One of FastAgency's standout features is its ability to easily integrate external APIs into your agent workflows. With just a single line of code, you can import an OpenAPI specification, and in only one more line, you can connect it to your agents. This dramatically simplifies the process of enhancing AI agents with real-time data, external processing, or third-party services. For example, you can easily integrate a weather API to provide dynamic, real-time weather updates to your users, making your application more interactive and useful with minimal effort.</p> </li> <li> <p>Tester Class for Continuous Integration: FastAgency also provides a Tester Class that enables developers to write and execute tests for their multi-agent workflows. This feature is crucial for maintaining the reliability and robustness of your application, allowing you to automatically verify agent behavior and interactions. The Tester Class is designed to integrate smoothly with continuous integration (CI) pipelines, helping you catch bugs early and ensure that your workflows remain functional as they scale into production.</p> </li> <li> <p>Command-Line Interface (CLI) for Orchestration: FastAgency includes a powerful command-line interface (CLI) for orchestrating and managing multi-agent applications directly from the terminal. The CLI allows developers to quickly run workflows, pass parameters, and monitor agent interactions without needing a full GUI. This is especially useful for automating deployments and integrating workflows into broader DevOps pipelines, enabling developers to maintain control and flexibility in how they manage AI-driven applications.</p> </li> </ul>"},{"location":"user-guide/#why-fastagency","title":"Why FastAgency?","text":"<p>FastAgency bridges the gap between rapid prototyping and production-ready deployment, empowering developers to bring their multi-agent systems to life quickly and efficiently. By integrating familiar frameworks like AutoGen, providing powerful API integration, and offering robust CI testing tools, FastAgency reduces the complexity and overhead typically associated with deploying AI agents in real-world applications.</p> <p>Whether you\u2019re building interactive console tools, developing fully-featured web apps, or orchestrating large-scale multi-agent systems, FastAgency is built to help you deploy faster, more reliably, and with greater flexibility.</p>"},{"location":"user-guide/#stay-in-touch","title":"\u2b50\u2b50\u2b50 Stay in touch \u2b50\u2b50\u2b50","text":"<p>Stay up to date with new features and integrations by following our documentation and community updates on our Discord server. FastAgency is continually evolving to support new frameworks, APIs, and deployment strategies, ensuring you remain at the forefront of AI-driven development.</p> <p>Last but not least, show us your support by giving a star to our GitHub repository.</p>"},{"location":"user-guide/basics/","title":"Getting Started with FastAgency","text":"<p>The fastest way to bring multi-agent workflows to production.</p> <p> </p> <p>Welcome to FastAgency! This guide will walk you through the initial setup and usage of FastAgency, a powerful tool that leverages the AutoGen framework to quickly build applications. FastAgency is designed to be flexible and adaptable, and we plan to extend support to additional agentic frameworks such as CrewAI in the near future. This will provide even more options for defining workflows and integrating with various AI tools.</p> <p>With FastAgency, you can create interactive applications using various interfaces such as a console or Mesop.</p>","boost":10},{"location":"user-guide/basics/#supported-interfaces","title":"Supported Interfaces","text":"<p>FastAgency currently supports workflows defined using AutoGen and provides options for different types of applications:</p> <ul> <li>Console: Use the ConsoleUI interface for command-line based interaction. This is ideal for developing and testing workflows in a text-based environment.</li> <li>Mesop: Utilize Mesop with MesopUI for web-based applications. This interface is suitable for creating web applications with a user-friendly interface.</li> </ul> <p>We are also working on adding support for other frameworks, such as CrewAI, to broaden the scope and capabilities of FastAgency. Stay tuned for updates on these integrations.</p>","boost":10},{"location":"user-guide/basics/#quick-start","title":"Quick start","text":"","boost":10},{"location":"user-guide/basics/#install","title":"Install","text":"<p>To get started, you need to install FastAgency. You can do this using <code>pip</code>, Python's package installer. Choose the installation command based on the interface you want to use:</p> ConsoleMesop <pre><code>pip install \"fastagency[autogen]\"\n</code></pre> <p>This command installs FastAgency with support for the Console interface and AutoGen framework.</p> <pre><code>pip install \"fastagency[autogen,mesop]\"\n</code></pre> <p>This command installs FastAgency with support for both the Console and Mesop interfaces, providing a more comprehensive setup.</p> <p>Using older AutoGen version 0.2.x</p> <p>In case you want to use an older version of AutoGen (<code>pyautogen</code> instead of <code>autogen</code> package ), please use the following pip command:</p> ConsoleMesop <pre><code>pip install \"fastagency[pyautogen]\"\n</code></pre> <p>This command installs FastAgency with support for the Console interface and AutoGen framework.</p> <pre><code>pip install \"fastagency[pyautogen,mesop]\"\n</code></pre>","boost":10},{"location":"user-guide/basics/#imports","title":"Imports","text":"<p>Depending on the interface you choose, you'll need to import different modules. These imports set up the necessary components for your application:</p> ConsoleMesop <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import FastAgency\nfrom fastagency import UI\nfrom fastagency.ui.console import ConsoleUI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\n</code></pre> <p>For Console applications, import <code>ConsoleUI</code> to handle command-line input and output.</p> <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import UI\nfrom fastagency.runtimes.autogen.base import AutoGenWorkflows\nfrom fastagency.ui.mesop import MesopUI\n\nfrom fastagency import FastAgency\n</code></pre> <p>For Mesop applications, import <code>MesopUI</code> to integrate with the Mesop web interface.</p>","boost":10},{"location":"user-guide/basics/#define-workflow","title":"Define Workflow","text":"<p>You need to define the workflow that your application will use. This is where you specify how the agents interact and what they do. Here's a simple example of a workflow definition:</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_learning\", description=\"Student and teacher learning chat\")\ndef simple_workflow(ui: UI, initial_message: str, session_id: str) -&gt; str:\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student willing to learn.\",\n        llm_config=llm_config,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a math teacher.\",\n        llm_config=llm_config,\n    )\n\n    chat_result = student_agent.initiate_chat(\n        teacher_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=5,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre> <p>This code snippet sets up a simple learning chat between a student and a teacher. You define the agents and how they should interact, specifying how the conversation should be summarized.</p>","boost":10},{"location":"user-guide/basics/#define-fastagency-application","title":"Define FastAgency Application","text":"<p>Next, define your FastAgency application. This ties together your workflow and the interface you chose:</p> ConsoleMesop <pre><code>from fastagency.ui.console import ConsoleUI\n\napp = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre> <p>For Console applications, use <code>ConsoleUI</code> to handle user interaction via the command line.</p> <pre><code>from fastagency.ui.mesop import MesopUI\n\napp = FastAgency(wf=wf, io=MesopUI())\n</code></pre> <p>For Mesop applications, use <code>MesopUI</code> to enable web-based interactions.</p>","boost":10},{"location":"user-guide/basics/#run-application","title":"Run Application","text":"<p>Once everything is set up, you can run your FastAgency application using the following command:</p> <pre><code>fastagency run\n</code></pre>","boost":10},{"location":"user-guide/basics/#output","title":"Output","text":"<p>The output will vary based on the interface:</p> ConsoleMesop <pre><code>\u256d\u2500 Python module file \u2500\u256e\n\u2502                      \u2502\n\u2502  \ud83d\udc0d main.py          \u2502\n\u2502                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n\u256d\u2500 Importable FastAgency app \u2500\u256e\n\u2502                             \u2502\n\u2502  from main import app       \u2502\n\u2502                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500 FastAgency -&gt; user [text_input] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 Starting a new workflow 'simple_learning' with the following                 \u2502\n\u2502 description:                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 Student and teacher learning chat                                            \u2502\n\u2502                                                                              \u2502\n\u2502 Please enter an                                                              \u2502\n\u2502 initial message:                                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>For Console applications, you will see a command-line prompt where you can enter the initial message and interact with your workflow.</p> <pre><code>\u256d\u2500 Python module file \u2500\u256e\n\u2502                      \u2502\n\u2502  \ud83d\udc0d main_mesop.py    \u2502\n\u2502                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n\u256d\u2500 Importable FastAgency app \u2500\u2500\u256e\n\u2502                              \u2502\n\u2502  from main_mesop import app  \u2502\n\u2502                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nRunning with hot reload:\n\nRunning server on: http://localhost:32123\n* Serving Flask app 'mesop.server.server'\n* Debug mode: off\n</code></pre> <p>For Mesop applications, the output will include a URL where you can access your web-based application.</p>","boost":10},{"location":"user-guide/api/","title":"API Integration","text":"<p>FastAgency makes it easy to integrate external APIs into your multi-agent workflows, allowing agents to access and interact with real-time data. By leveraging FastAgency's API support, developers can automatically create functions properly annotated for use with large language models (LLMs). This functionality allows agents to fetch and process external information seamlessly.</p> <p>Currently, FastAgency supports importing API functionality from OpenAPI specifications, enabling developers to connect their agents with RESTful APIs effortlessly. In addition, we support various types of security for accessing APIs, ensuring your integrations are both functional and secure.</p>"},{"location":"user-guide/api/#api-features-in-fastagency","title":"API Features in FastAgency","text":""},{"location":"user-guide/api/#1-openapi-import","title":"1. OpenAPI Import","text":"<p>FastAgency can automatically generate API functions from OpenAPI specifications, streamlining the process of connecting agents to external services. With just a few lines of code, you can import an API specification, and FastAgency will handle the function generation and LLM integration, making it simple for agents to call external APIs.</p> <p>Learn more about OpenAPI Import \u2192</p>"},{"location":"user-guide/api/#2-api-security","title":"2. API Security","text":"<p>FastAgency supports different types of security for REST APIs, including OAuth, API keys, and more. This ensures that your API integrations are secure and can handle sensitive data. Our API security mechanisms are flexible, allowing you to configure and manage secure communication between your agents and external APIs.</p> <p>Learn more about API Security \u2192</p> <p>FastAgency\u2019s API integration capabilities allow your multi-agent systems to interact with the real world in meaningful ways. Whether you\u2019re pulling data from an external service or managing secure connections, FastAgency provides the tools you need to build powerful, connected applications.</p> <p>For more updates and discussions, join our Discord channel.</p>"},{"location":"user-guide/api/security/","title":"Security","text":"<p>In the previous chapter, we learned how to integrate external REST APIs into <code>AutoGen</code> agents using <code>FastAgency</code>, and we used a weather API route which had no security. However, not all external REST APIs are open to the public; some are behind a paywall and require security parameters for access. This section of the documentation explains how to create an agent that accesses an external REST API with security.</p> <p>For this tutorial, the weather API provides an hourly forecast route that is secured.</p> <p>Note</p> <p>The weather API offers two routes: one for the daily weather forecast, which has no security, and another for the hourly forecast, which is secured. To learn how to access external APIs that are not secured, please refer to the previous chapter.</p>"},{"location":"user-guide/api/security/#install","title":"Install","text":"<p>The installation process is exactly the same as in the previous chapter.</p> <pre><code>pip install \"fastagency[autogen,openapi]\"\n</code></pre>"},{"location":"user-guide/api/security/#imports","title":"Imports","text":"<p>The imports are the same as in the previous chapter, except here we also import <code>APIKeyHeader</code> to set the security value in the header:</p> <pre><code>import os\n\nfrom autogen import UserProxyAgent\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import FastAgency\nfrom fastagency import UI\nfrom fastagency.ui.console import ConsoleUI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\nfrom fastagency.api.openapi.client import OpenAPI\nfrom fastagency.api.openapi.security import APIKeyHeader\n</code></pre>"},{"location":"user-guide/api/security/#define-workflow","title":"Define Workflow","text":"<p>In this workflow, we create a Python client for the external REST API by passing the URL of the <code>openapi.json</code> to the <code>Client.create</code> method. Then, we register the generated client with the agent using the methods <code>register_for_llm</code> and <code>register_for_execution</code>.</p> <p>Additionally, we set the API key for the API using the <code>set_security_params</code> method:</p> <pre><code># Set global security params for all methods\nweather_client.set_security_params(APIKeyHeader.Parameters(value=\"secure weather key\"))\n</code></pre> <p>Here's a simple example of a workflow definition:</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nWEATHER_OPENAPI_URL = \"https://weather.tools.fastagency.ai/openapi.json\"\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_weather_with_security\", description=\"Weather chat with security\")\ndef weather_workflow_with_security(ui: UI, initial_message: str, session_id: str) -&gt; str:\n\n    weather_client = OpenAPI.create(openapi_url=WEATHER_OPENAPI_URL)\n\n    # Set global security params for all methods\n    weather_client.set_security_params(APIKeyHeader.Parameters(value=\"secure weather key\"))\n\n    # Set security params for a specific method\n    # weather_client.set_security_params(\n    #     APIKeyHeader.Parameters(value=\"secure weather key\"),\n    #     \"get_daily_weather_daily_get\",\n    # )\n\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    weather_agent = ConversableAgent(\n        name=\"Weather_Agent\",\n        system_message=\"You are a weather agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n\n    weather_client.register_for_llm(weather_agent)\n    weather_client.register_for_execution(user_agent)\n\n    chat_result = user_agent.initiate_chat(\n        weather_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre> <p>This code snippet sets up a simple weather agent that calls an external weather API with security, using the registered functions generated from the <code>openapi.json</code> URL.</p>"},{"location":"user-guide/api/security/#define-fastagency-application","title":"Define FastAgency Application","text":"<p>Next, define your FastAgency application.</p> <pre><code>app = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre>"},{"location":"user-guide/api/security/#run-application","title":"Run Application","text":"<p>You can run this chapter's FastAgency application using the following command::</p> <pre><code>fastagency run docs/docs_src/user_guide/external_rest_apis/security.py\n</code></pre>"},{"location":"user-guide/api/security/#output","title":"Output","text":"<p>The output will vary based on the city and current weather conditions:</p> <pre><code> \u256d\u2500\u2500\u2500 Python package file structure \u2500\u2500\u2500\u256e\n \u2502                                     \u2502\n \u2502  \ud83d\udcc1 docs                            \u2502\n \u2502  \u251c\u2500\u2500 \ud83d\udc0d __init__.py                 \u2502\n \u2502  \u2514\u2500\u2500 \ud83d\udcc1 docs_src                    \u2502\n \u2502      \u251c\u2500\u2500 \ud83d\udc0d __init__.py             \u2502\n \u2502      \u2514\u2500\u2500 \ud83d\udcc1 tutorial                \u2502\n \u2502          \u251c\u2500\u2500 \ud83d\udc0d __init__.py         \u2502\n \u2502          \u2514\u2500\u2500 \ud83d\udcc1 external_rest_apis  \u2502\n \u2502              \u251c\u2500\u2500 \ud83d\udc0d __init__.py     \u2502\n \u2502              \u2514\u2500\u2500 \ud83d\udc0d security.py     \u2502\n \u2502                                     \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Importable FastAgency app \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502                                                                      \u2502\n \u2502  from docs.docs_src.tutorial.external_rest_apis.security import app  \u2502\n \u2502                                                                      \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500 FastAgency -&gt; user [text_input] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 Starting a new workflow 'simple_weather_with_security' with the              \u2502\n\u2502 following description:                                                       \u2502\n\u2502                                                                              \u2502\n\u2502 Weather chat with security                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 Please enter an                                                              \u2502\n\u2502 initial message:                                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nGet me hourly weather forecast for Chennai city\n    \u256d\u2500 User_Agent -&gt; Weather_Agent [text_message] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 Get me hourly weather forecast for Chennai city                              \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n    \u256d\u2500 Weather_Agent -&gt; User_Agent [suggested_function_call] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 {                                                                            \u2502\n    \u2502   \"function_name\": \"get_hourly_weather_hourly_get\",                          \u2502\n    \u2502   \"call_id\":                                                                 \u2502\n    \u2502 \"call_pAMWHJ1wIlsciSSOMIb4uhst\",                                             \u2502\n    \u2502   \"arguments\": {                                                             \u2502\n    \u2502     \"city\":                                                                  \u2502\n    \u2502 \"Chennai\"                                                                    \u2502\n    \u2502   }                                                                          \u2502\n    \u2502 }                                                                            \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n    \u256d\u2500 User_Agent -&gt; Weather_Agent [function_call_execution] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 {                                                                            \u2502\n    \u2502   \"function_name\": \"get_hourly_weather_hourly_get\",                          \u2502\n    \u2502   \"call_id\":                                                                 \u2502\n    \u2502 \"call_pAMWHJ1wIlsciSSOMIb4uhst\",                                             \u2502\n    \u2502   \"retval\": \"{\\\"city\\\": \\\"Chennai\\\",                                         \u2502\n    \u2502 \\\"temperature\\\": 35, \\\"daily_forecasts\\\": [{\\\"forecast_date\\\":               \u2502\n    \u2502 \\\"2024-09-10\\\", \\\"temperature\\\": 31, \\\"hourly_forecasts\\\":                   \u2502\n    \u2502 [{\\\"forecast_time\\\": \\\"00:00:00\\\", \\\"temperature\\\": 30,                      \u2502\n    \u2502 \\\"description\\\": \\\"Patchy rain nearby\\\"}, {\\\"forecast_time\\\":                \u2502\n    \u2502 \\\"03:00:00\\\", \\\"temperature\\\": 29, \\\"description\\\": \\\"Clear\\\"},              \u2502\n    \u2502 {\\\"forecast_time\\\": \\\"06:00:00\\\", \\\"temperature\\\": 28,                       \u2502\n    \u2502 \\\"description\\\": \\\"Sunny\\\"}, {\\\"forecast_time\\\": \\\"09:00:00\\\",               \u2502\n    \u2502 \\\"temperature\\\": 31, \\\"description\\\": \\\"Sunny\\\"}, {\\\"forecast_time\\\":        \u2502\n    \u2502 \\\"12:00:00\\\", \\\"temperature\\\": 35, \\\"description\\\": \\\"Partly                 \u2502\n    \u2502 cloudy\\\"}, {\\\"forecast_time\\\": \\\"15:00:00\\\", \\\"temperature\\\": 32,            \u2502\n    \u2502 \\\"description\\\": \\\"Patchy light drizzle\\\"}, {\\\"forecast_time\\\":              \u2502\n    \u2502 \\\"18:00:00\\\", \\\"temperature\\\": 30, \\\"description\\\": \\\"Patchy light           \u2502\n    \u2502 drizzle\\\"}, {\\\"forecast_time\\\": \\\"21:00:00\\\", \\\"temperature\\\": 30,           \u2502\n    \u2502 \\\"description\\\": \\\"Patchy rain nearby\\\"}]}, {\\\"forecast_date\\\":              \u2502\n    \u2502 \\\"2024-09-11\\\", \\\"temperature\\\": 30, \\\"hourly_forecasts\\\":                   \u2502\n    \u2502 [{\\\"forecast_time\\\": \\\"00:00:00\\\", \\\"temperature\\\": 29,                      \u2502\n    \u2502 \\\"description\\\": \\\"Patchy rain nearby\\\"}, {\\\"forecast_time\\\":                \u2502\n    \u2502 \\\"03:00:00\\\", \\\"temperature\\\": 29, \\\"description\\\": \\\"Clear\\\"},              \u2502\n    \u2502 {\\\"forecast_time\\\": \\\"06:00:00\\\", \\\"temperature\\\": 28,                       \u2502\n    \u2502 \\\"description\\\": \\\"Sunny\\\"}, {\\\"forecast_time\\\": \\\"09:00:00\\\",               \u2502\n    \u2502 \\\"temperature\\\": 31, \\\"description\\\": \\\"Sunny\\\"}, {\\\"forecast_time\\\":        \u2502\n    \u2502 \\\"12:00:00\\\", \\\"temperature\\\": 34, \\\"description\\\": \\\"Partly                 \u2502\n    \u2502 Cloudy\\\"}, {\\\"forecast_time\\\": \\\"15:00:00\\\", \\\"temperature\\\": 31,            \u2502\n    \u2502 \\\"description\\\": \\\"Cloudy\\\"}, {\\\"forecast_time\\\": \\\"18:00:00\\\",              \u2502\n    \u2502 \\\"temperature\\\": 29, \\\"description\\\": \\\"Partly Cloudy\\\"},                    \u2502\n    \u2502 {\\\"forecast_time\\\": \\\"21:00:00\\\", \\\"temperature\\\": 29,                       \u2502\n    \u2502 \\\"description\\\": \\\"Cloudy\\\"}]}, {\\\"forecast_date\\\": \\\"2024-09-12\\\",          \u2502\n    \u2502 \\\"temperature\\\": 30, \\\"hourly_forecasts\\\": [{\\\"forecast_time\\\":              \u2502\n    \u2502 \\\"00:00:00\\\", \\\"temperature\\\": 29, \\\"description\\\": \\\"Patchy rain            \u2502\n    \u2502 nearby\\\"}, {\\\"forecast_time\\\": \\\"03:00:00\\\", \\\"temperature\\\": 29,            \u2502\n    \u2502 \\\"description\\\": \\\"Clear\\\"}, {\\\"forecast_time\\\": \\\"06:00:00\\\",               \u2502\n    \u2502 \\\"temperature\\\": 28, \\\"description\\\": \\\"Sunny\\\"}, {\\\"forecast_time\\\":        \u2502\n    \u2502 \\\"09:00:00\\\", \\\"temperature\\\": 31, \\\"description\\\": \\\"Sunny\\\"},              \u2502\n    \u2502 {\\\"forecast_time\\\": \\\"12:00:00\\\", \\\"temperature\\\": 34,                       \u2502\n    \u2502 \\\"description\\\": \\\"Partly Cloudy\\\"}, {\\\"forecast_time\\\": \\\"15:00:00\\\",       \u2502\n    \u2502  \\\"temperature\\\": 31, \\\"description\\\": \\\"Partly Cloudy\\\"},                   \u2502\n    \u2502 {\\\"forecast_time\\\": \\\"18:00:00\\\", \\\"temperature\\\": 29,                       \u2502\n    \u2502 \\\"description\\\": \\\"Overcast\\\"}, {\\\"forecast_time\\\": \\\"21:00:00\\\",            \u2502\n    \u2502 \\\"temperature\\\": 29, \\\"description\\\": \\\"Partly Cloudy\\\"}]}]}\\n\"              \u2502\n    \u2502 }                                                                            \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n    \u256d\u2500 Weather_Agent -&gt; User_Agent [text_message] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 Here is the hourly weather forecast for Chennai:                             \u2502\n    \u2502                                                                              \u2502\n    \u2502 ### September 10,                                                            \u2502\n    \u2502 2024                                                                         \u2502\n    \u2502 - **00:00** - Temperature: 30\u00b0C, Description: Patchy rain nearby             \u2502\n    \u2502                                                                              \u2502\n    \u2502 - **03:00** - Temperature: 29\u00b0C, Description: Clear                          \u2502\n    \u2502 - **06:00** -                                                                \u2502\n    \u2502 Temperature: 28\u00b0C, Description: Sunny                                        \u2502\n    \u2502 - **09:00** - Temperature: 31\u00b0C,                                             \u2502\n    \u2502  Description: Sunny                                                          \u2502\n    \u2502 - **12:00** - Temperature: 35\u00b0C, Description:                                \u2502\n    \u2502 Partly cloudy                                                                \u2502\n    \u2502 - **15:00** - Temperature: 32\u00b0C, Description: Patchy                         \u2502\n    \u2502 light drizzle                                                                \u2502\n    \u2502 - **18:00** - Temperature: 30\u00b0C, Description: Patchy                         \u2502\n    \u2502 light drizzle                                                                \u2502\n    \u2502 - **21:00** - Temperature: 30\u00b0C, Description: Patchy                         \u2502\n    \u2502 rain nearby                                                                  \u2502\n    \u2502                                                                              \u2502\n    \u2502 ### September 11, 2024                                                       \u2502\n    \u2502 - **00:00** - Temperature: 29\u00b0C,                                             \u2502\n    \u2502 Description: Patchy rain nearby                                              \u2502\n    \u2502 - **03:00** - Temperature: 29\u00b0C,                                             \u2502\n    \u2502 Description: Clear                                                           \u2502\n    \u2502 - **06:00** - Temperature: 28\u00b0C, Description: Sunny                          \u2502\n    \u2502                                                                              \u2502\n    \u2502 - **09:00** - Temperature: 31\u00b0C, Description: Sunny                          \u2502\n    \u2502 - **12:00** -                                                                \u2502\n    \u2502 Temperature: 34\u00b0C, Description: Partly Cloudy                                \u2502\n    \u2502 - **15:00** -                                                                \u2502\n    \u2502 Temperature: 31\u00b0C, Description: Cloudy                                       \u2502\n    \u2502 - **18:00** - Temperature:                                                   \u2502\n    \u2502 29\u00b0C, Description: Partly Cloudy                                             \u2502\n    \u2502 - **21:00** - Temperature: 29\u00b0C,                                             \u2502\n    \u2502 Description: Cloudy                                                          \u2502\n    \u2502                                                                              \u2502\n    \u2502 ### September 12, 2024                                                       \u2502\n    \u2502 - **00:00** - Temperature:                                                   \u2502\n    \u2502  29\u00b0C, Description: Patchy rain nearby                                       \u2502\n    \u2502 - **03:00** - Temperature:                                                   \u2502\n    \u2502 29\u00b0C, Description: Clear                                                     \u2502\n    \u2502 - **06:00** - Temperature: 28\u00b0C, Description:                                \u2502\n    \u2502  Sunny                                                                       \u2502\n    \u2502 - **09:00** - Temperature: 31\u00b0C, Description: Sunny                          \u2502\n    \u2502 - **12:00**                                                                  \u2502\n    \u2502  - Temperature: 34\u00b0C, Description: Partly Cloudy                             \u2502\n    \u2502 - **15:00** -                                                                \u2502\n    \u2502 Temperature: 31\u00b0C, Description: Partly Cloudy                                \u2502\n    \u2502 - **18:00** -                                                                \u2502\n    \u2502 Temperature: 29\u00b0C, Description: Overcast                                     \u2502\n    \u2502 - **21:00** - Temperature:                                                   \u2502\n    \u2502 29\u00b0C, Description: Partly Cloudy                                             \u2502\n    \u2502                                                                              \u2502\n    \u2502 Feel free to ask if you need more                                            \u2502\n    \u2502 information!                                                                 \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"user-guide/api/openapi/","title":"OpenAPI","text":"<p>FastAgency can automatically create functions properly annotated for use with LLM-s from OpenAPI specification.</p> <p>This example demonstrates how to integrate external REST API calls into <code>AutoGen</code> agents using <code>FastAgency</code>. We'll create a weather agent that interacts with a weather REST API and a user agent to facilitate the conversation. This example will help you understand how to set up agents and facilitate agent communication through an external REST API. To interact with the REST API, the AutoGen agent needs to understand the available routes, so it requires the OpenAPI specification (<code>openapi.json</code> file) for the external REST API.</p> <p>In this example, we'll use a simple weather API and its specification available at https://weather.tools.fastagency.ai/openapi.json.</p> <p>Note</p> <p>The weather API has two routes: one for the daily weather forecast, which has no security, and another for the hourly forecast, which is secured. We will learn how to access external APIs that are secured in the next chapter.</p>"},{"location":"user-guide/api/openapi/#install","title":"Install","text":"<p>To get started, you need to install FastAgency with OpenAPI submodule. You can do this using <code>pip</code>, Python's package installer.</p> <pre><code>pip install \"fastagency[autogen,openapi]\"\n</code></pre>"},{"location":"user-guide/api/openapi/#imports","title":"Imports","text":"<p>These imports are similar to the imports section we have already covered, with the only difference being the additional imports of the <code>OpenAPI</code> Client and <code>UserProxyAgent</code>:</p> <pre><code>import os\n\nfrom autogen import UserProxyAgent\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import FastAgency\nfrom fastagency import UI\nfrom fastagency.ui.console import ConsoleUI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\n</code></pre>"},{"location":"user-guide/api/openapi/#define-workflow","title":"Define Workflow","text":"<p>In this workflow, the only difference is that we create a Python client for the external REST API by passing the URL of the <code>openapi.json</code> to the <code>Client.create</code> method. Then, we register the generated client with the agent using the methods <code>register_for_llm</code> and <code>register_for_execution</code>. Here's a simple example of a workflow definition:</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nWEATHER_OPENAPI_URL = \"https://weather.tools.fastagency.ai/openapi.json\"\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_weather\", description=\"Weather chat\")\ndef weather_workflow(ui: UI, initial_message: str, session_id: str) -&gt; str:\n\n    weather_api = OpenAPI.create(openapi_url=WEATHER_OPENAPI_URL)\n\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    weather_agent = ConversableAgent(\n        name=\"Weather_Agent\",\n        system_message=\"You are a weather agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n\n    weather_api.register_for_llm(weather_agent)\n    weather_api.register_for_execution(user_agent)\n\n    chat_result = user_agent.initiate_chat(\n        weather_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n</code></pre> <p>This code snippet sets up a simple weather agent that calls an external weather API using the registered functions generated from the <code>openapi.json</code> URL.</p>"},{"location":"user-guide/api/openapi/#define-fastagency-application","title":"Define FastAgency Application","text":"<p>Next, define your FastAgency application.</p>"},{"location":"user-guide/api/openapi/#run-application","title":"Run Application","text":"<p>You can run this chapter's FastAgency application using the following command:</p> <pre><code>fastagency run docs/docs_src/user_guide/external_rest_apis/main.py\n</code></pre>"},{"location":"user-guide/api/openapi/#output","title":"Output","text":"<p>The output will vary based on the city and the current weather conditions:</p> <pre><code> \u256d\u2500\u2500\u2500 Python package file structure \u2500\u2500\u2500\u256e\n \u2502                                     \u2502\n \u2502  \ud83d\udcc1 docs                            \u2502\n \u2502  \u251c\u2500\u2500 \ud83d\udc0d __init__.py                 \u2502\n \u2502  \u2514\u2500\u2500 \ud83d\udcc1 docs_src                    \u2502\n \u2502      \u251c\u2500\u2500 \ud83d\udc0d __init__.py             \u2502\n \u2502      \u2514\u2500\u2500 \ud83d\udcc1 tutorial                \u2502\n \u2502          \u251c\u2500\u2500 \ud83d\udc0d __init__.py         \u2502\n \u2502          \u2514\u2500\u2500 \ud83d\udcc1 external_rest_apis  \u2502\n \u2502              \u251c\u2500\u2500 \ud83d\udc0d __init__.py     \u2502\n \u2502              \u2514\u2500\u2500 \ud83d\udc0d main.py         \u2502\n \u2502                                     \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Importable FastAgency app \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502                                                                  \u2502\n \u2502  from docs.docs_src.tutorial.external_rest_apis.main import app  \u2502\n \u2502                                                                  \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500 FastAgency -&gt; user [text_input] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502 Starting a new workflow 'simple_weather' with the following                  \u2502\n\u2502 description:                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 Weather chat                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 Please enter an initial message:                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nGet me daily weather forecast for Chennai city\n\n    \u256d\u2500 User_Agent -&gt; Weather_Agent [text_message] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 Get me daily weather forecast for Chennai city                               \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n    \u256d\u2500 Weather_Agent -&gt; User_Agent [suggested_function_call] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 {                                                                            \u2502\n    \u2502   \"function_name\": \"get_daily_weather_daily_get\",                            \u2502\n    \u2502   \"call_id\":                                                                 \u2502\n    \u2502 \"call_VZ19VFNcTE9n8BnXa9aiMzFA\",                                             \u2502\n    \u2502   \"arguments\": {                                                             \u2502\n    \u2502     \"city\":                                                                  \u2502\n    \u2502 \"Chennai\"                                                                    \u2502\n    \u2502   }                                                                          \u2502\n    \u2502 }                                                                            \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n    \u256d\u2500 User_Agent -&gt; Weather_Agent [function_call_execution] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 {                                                                            \u2502\n    \u2502   \"function_name\": \"get_daily_weather_daily_get\",                            \u2502\n    \u2502   \"call_id\":                                                                 \u2502\n    \u2502 \"call_VZ19VFNcTE9n8BnXa9aiMzFA\",                                             \u2502\n    \u2502   \"retval\": \"{\\\"city\\\": \\\"Chennai\\\",                                         \u2502\n    \u2502 \\\"temperature\\\": 31, \\\"daily_forecasts\\\": [{\\\"forecast_date\\\":               \u2502\n    \u2502 \\\"2024-09-10\\\", \\\"temperature\\\": 31, \\\"hourly_forecasts\\\": null},            \u2502\n    \u2502 {\\\"forecast_date\\\": \\\"2024-09-11\\\", \\\"temperature\\\": 30,                     \u2502\n    \u2502 \\\"hourly_forecasts\\\": null}, {\\\"forecast_date\\\": \\\"2024-09-12\\\",             \u2502\n    \u2502 \\\"temperature\\\": 30, \\\"hourly_forecasts\\\": null}]}\\n\"                        \u2502\n    \u2502 }                                                                            \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n    \u256d\u2500 Weather_Agent -&gt; User_Agent [text_message] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502                                                                              \u2502\n    \u2502 The daily weather forecast for Chennai is as follows:                        \u2502\n    \u2502                                                                              \u2502\n    \u2502 - **September                                                                \u2502\n    \u2502 10, 2024**: Temperature - 31\u00b0C                                               \u2502\n    \u2502 - **September 11, 2024**: Temperature -                                      \u2502\n    \u2502  30\u00b0C                                                                        \u2502\n    \u2502 - **September 12, 2024**: Temperature - 30\u00b0C                                 \u2502\n    \u2502                                                                              \u2502\n    \u2502 If you need more                                                             \u2502\n    \u2502 details or forecasts for more days, feel free to ask!                        \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"user-guide/cli/","title":"FastAgency CLI Overview","text":"<p>The FastAgency Command Line Interface (CLI) enables developers to manage and run FastAgency projects directly from the terminal. The CLI simplifies interactions with FastAgency apps, providing options for running, testing, and managing workflows efficiently. Below is an overview of the key commands and options available in the FastAgency CLI.</p>"},{"location":"user-guide/cli/#cli-commands","title":"CLI Commands","text":""},{"location":"user-guide/cli/#dev","title":"<code>dev</code>","text":"<p><pre><code>$ fastagency dev [OPTIONS] [PATH]\n</code></pre> The <code>dev</code> command runs a FastAgency app in development mode, which is equivalent to running <code>fastapi</code> but with live reload enabled. This is useful for testing and development, as it listens on <code>127.0.0.1</code> and automatically detects the Python module or package that needs to be imported based on the file or directory path provided.</p>"},{"location":"user-guide/cli/#command-details","title":"Command Details:","text":"<ul> <li>If no path is provided, it will try to locate the application using common file names like <code>main.py</code>, <code>app.py</code>, <code>api.py</code>, or from the <code>app</code> directory.</li> <li>It automatically detects the FastAgency app object to use, typically looking for an object named <code>app</code> or <code>api</code>.</li> </ul>"},{"location":"user-guide/cli/#common-options","title":"Common Options:","text":"<ul> <li><code>--app</code>: The name of the variable that contains the FastAgency app in the imported module. It defaults to automatic detection.</li> <li><code>--workflow (-w)</code>: Specifies the name of the workflow to run.</li> <li><code>--initial_message (-i)</code>: Sets the initial message sent to the workflow.</li> </ul>"},{"location":"user-guide/cli/#run","title":"<code>run</code>","text":"<p><pre><code>$ fastagency run [OPTIONS] [PATH]\n</code></pre> The <code>run</code> command starts a FastAgency app in production mode, similar to the <code>dev</code> command, but optimized for production environments.</p>"},{"location":"user-guide/cli/#common-options-for-run","title":"Common Options for <code>run</code>:","text":"<ul> <li><code>--app</code>: Specifies the name of the app variable to run, like in <code>dev</code>.</li> <li><code>--workflow (-w)</code>: Specifies a particular workflow to run.</li> <li><code>--initial_message (-i)</code>: Sends a custom initial message to the workflow.</li> </ul>"},{"location":"user-guide/cli/#version","title":"<code>version</code>","text":"<p><pre><code>$ fastagency version\n</code></pre> The <code>version</code> command shows the currently installed version of FastAgency.</p>"},{"location":"user-guide/cli/#global-options","title":"Global Options","text":"<ul> <li><code>--version</code>: Displays the current version of FastAgency.</li> <li><code>--install-completion</code>: Installs shell completion for supported shells (bash, zsh, etc.).</li> <li><code>--show-completion</code>: Shows the shell completion script for manual installation or customization.</li> <li><code>--help</code>: Displays detailed help information for commands.</li> </ul>"},{"location":"user-guide/cli/#example-usage","title":"Example Usage","text":""},{"location":"user-guide/cli/#running-a-fastagency-app-in-development-mode","title":"Running a FastAgency App in Development Mode","text":"<pre><code>fastagency dev path/to/app.py\n</code></pre>"},{"location":"user-guide/cli/#running-a-fastagency-app-with-a-specific-workflow","title":"Running a FastAgency App with a Specific Workflow","text":"<pre><code>fastagency run path/to/app.py --workflow simple_workflow\n</code></pre>"},{"location":"user-guide/cli/#setting-an-initial-message","title":"Setting an Initial Message","text":"<pre><code>fastagency run path/to/app.py --initial_message \"Hello, let's start!\"\n</code></pre> <p>For more information, visit the FastAgency Docs or join our Discord community.</p>"},{"location":"user-guide/runtime/","title":"Runtimes in FastAgency","text":"<p>FastAgency is a flexible, open-source framework designed to accelerate the transition from prototype to production for multi-agent AI workflows. If you're a developer working with agentic frameworks like AutoGen, FastAgency provides the tools to rapidly scale your projects into fully operational applications. A key feature of FastAgency is its support for multiple runtimes, allowing developers to switch between or combine various frameworks based on project needs. With multi-framework compatibility, FastAgency ensures that your workflows are not only optimized for today\u2019s needs but also future-proofed as new frameworks emerge.</p>"},{"location":"user-guide/runtime/#autogen","title":"AutoGen","text":"<p>The AutoGen runtime is central to FastAgency\u2019s architecture and provides a powerful foundation for multi-agent workflows. AutoGen allows developers to define workflows in Python, leveraging large language models (LLMs) such as GPT to handle communication and collaboration between agents. It enables rapid prototyping and deployment of workflows that involve tasks like decision-making, customer service, or research.</p> <p>FastAgency seamlessly integrates with AutoGen, helping you transition from development in Jupyter notebooks to fully deployed applications. Whether you're managing conversational agents or orchestrating task automation, the AutoGen runtime in FastAgency helps you streamline the path from prototype to production.</p> <p>For more information on using AutoGen within FastAgency, visit the AutoGen section.</p>"},{"location":"user-guide/runtime/#crewai-coming-soon","title":"CrewAI (coming soon)","text":"<p>The CrewAI runtime is an upcoming integration designed to further expand FastAgency\u2019s capabilities. CrewAI offers a highly modular approach, providing greater flexibility for building more complex and dynamic workflows where agents need to collaborate autonomously. Its role-based design, combined with autonomous task delegation, makes CrewAI particularly suitable for projects involving a large number of specialized agents working in tandem.</p> <p>As the AI ecosystem continues to evolve, FastAgency\u2019s support for CrewAI ensures that your workflows remain adaptable and ready for future innovations. This planned integration allows you to harness the advanced features of CrewAI, offering more options for scaling your multi-agent applications.</p> <p>For future updates and documentation on CrewAI, please visit the CrewAI section.</p> <p>With support for multiple runtimes, FastAgency enables developers to easily switch between frameworks like AutoGen and CrewAI, providing unmatched flexibility when building and deploying AI workflows. Whether you are utilizing the established features of AutoGen or preparing to explore CrewAI\u2019s advanced capabilities, FastAgency ensures that your AI solutions are future-ready and capable of evolving alongside new technologies.</p>"},{"location":"user-guide/runtime/autogen/","title":"AutoGen in FastAgency","text":"<p>The AutoGen runtime is a key component of FastAgency, empowering developers to create intelligent, multi-agent systems powered by large language models (LLMs). AutoGen allows agents to communicate, collaborate, and perform complex tasks autonomously while easily integrating with external APIs for real-time data and functionality.</p> <p>In this example, we will create a simple weather chatbot using AutoGen in FastAgency. The chatbot will enable a user to interact with a weather agent that fetches real-time weather information from an external API using OpenAPI specifications.</p>"},{"location":"user-guide/runtime/autogen/#installation","title":"Installation","text":"<p>Before getting started, make sure you have installed FastAgency with support for the AutoGen runtime by running the following command:</p> <pre><code>pip install \"fastagency[autogen]\"\n</code></pre> <p>This installation includes the AutoGen runtime, allowing you to build multi-agent workflows and integrate external APIs seamlessly.</p>"},{"location":"user-guide/runtime/autogen/#example-integrating-a-weather-api-with-autogen","title":"Example: Integrating a Weather API with AutoGen","text":""},{"location":"user-guide/runtime/autogen/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":""},{"location":"user-guide/runtime/autogen/#1-import-required-modules","title":"1. Import Required Modules","text":"<p>The example starts by importing the necessary modules from AutoGen and FastAgency. These imports lay the foundation for building and running multi-agent workflows.</p> <pre><code>import os\n\nfrom autogen import UserProxyAgent\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import FastAgency\nfrom fastagency import UI\nfrom fastagency.ui.console import ConsoleUI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\n\nfrom fastagency.api.openapi import OpenAPI\n</code></pre>"},{"location":"user-guide/runtime/autogen/#2-configure-the-language-model-llm","title":"2. Configure the Language Model (LLM)","text":"<p>Here, the large language model is configured to use the <code>gpt-4o-mini</code> model, and the API key is retrieved from the environment. This setup ensures that both the user and weather agents can interact effectively.</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n</code></pre>"},{"location":"user-guide/runtime/autogen/#3-set-up-the-weather-api","title":"3. Set Up the Weather API","text":"<p>We define the OpenAPI specification URL for the weather service. This API will later be used by the weather agent to fetch real-time weather data.</p> <pre><code>openapi_url=\"https://weather.tools.fastagency.ai/openapi.json\"\n\nweather_api = OpenAPI.create(openapi_url=openapi_url)\n</code></pre>"},{"location":"user-guide/runtime/autogen/#4-define-the-workflow-and-agents","title":"4. Define the Workflow and Agents","text":"<p>In this step, we create two agents:</p> <ul> <li> <p>UserProxyAgent: This agent simulates the user interacting with the system.</p> </li> <li> <p>ConversableAgent: This agent acts as the weather agent, responsible for fetching weather data from the API.</p> </li> </ul> <p>The workflow is registered using AutoGenWorkflows.</p> <pre><code>wf = AutoGenWorkflows()\n\n@wf.register(name=\"simple_weather\", description=\"Weather chat\")  # type: ignore[type-var]\ndef weather_workflow(wf: AutoGenWorkflows, ui: UI, initial_message: str, session_id: str) -&gt; str:\n\n    user_agent = UserProxyAgent(\n        name=\"User_Agent\",\n        system_message=\"You are a user agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n    weather_agent = ConversableAgent(\n        name=\"Weather_Agent\",\n        system_message=\"You are a weather agent\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n    )\n</code></pre>"},{"location":"user-guide/runtime/autogen/#5-register-api-functions-with-the-agents","title":"5. Register API Functions with the Agents","text":"<p>In this step, we register the weather API functions to ensure that the weather agent can call the correct functions, such as <code>get_daily_weather</code> and <code>get_daily_weather_weekly_get</code>, to retrieve the required weather data.</p> <pre><code>    wf.register_api(  # type: ignore[attr-defined]\n        api=weather_api,\n        callers=[user_agent],\n        executors=[weather_agent],\n        functions=[\n            {\n                \"get_daily_weather_daily_get\": {\n                    \"name\": \"get_daily_weather\",\n                    \"description\": \"Get the daily weather\",\n                }\n            },\n            \"get_daily_weather_weekly_get\"\n        ]\n    )\n</code></pre>"},{"location":"user-guide/runtime/autogen/#6-enable-agent-interaction-and-chat","title":"6. Enable Agent Interaction and Chat","text":"<p>Here, the user agent initiates a chat with the weather agent, which queries the API and returns the weather information. The conversation is summarized using a method provided by the LLM.</p> <pre><code>    chat_result = user_agent.initiate_chat(\n        weather_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=3,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre>"},{"location":"user-guide/runtime/autogen/#7-create-and-run-the-application","title":"7. Create and Run the Application","text":"<p>Finally, we create the FastAgency application and launch it using the console interface.</p> <pre><code>app = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre>"},{"location":"user-guide/runtime/autogen/#running-the-application","title":"Running the Application","text":"<pre><code>cd docs/docs_src/user_guide/runtime/autogen\nfastagency run main.py\n</code></pre> <p>Ensure you have set your OpenAI API key in the environment and that the weather API URL is accessible. The command will launch a console interface where users can input their requests and interact with the weather agent.</p> <p>This example demonstrates the power of the AutoGen runtime within FastAgency, showing how easy it is to integrate LLM-powered agents with real-time API services. By leveraging FastAgency, developers can quickly create interactive, scalable applications that interact with external data sources in real-time.</p> <p>For more detailed documentation, visit the AutoGen Reference.</p>"},{"location":"user-guide/runtime/autogen/interactions/","title":"Custom User Interactions","text":"<p>In this example, we'll demonstrate how to create custom interaction with the user using <code>UI</code> protocol and its <code>process_message</code> method.</p>"},{"location":"user-guide/runtime/autogen/interactions/#install","title":"Install","text":"<p>To get started, you need to install FastAgency. You can do this using <code>pip</code>, Python's package installer.</p> <pre><code>pip install \"fastagency[autogen]\"\n</code></pre>"},{"location":"user-guide/runtime/autogen/interactions/#define-interaction","title":"Define Interaction","text":"<p>This section describes how to define functions for the <code>ConversableAgent</code> instances representing the student and teacher. We will also explain the differences between <code>MultipleChoice</code>, <code>SystemMessage</code>, and <code>TextInput</code>, which are used for communication between the user and agents.</p> <p>Let's define three functions which will be available to the agents:</p>"},{"location":"user-guide/runtime/autogen/interactions/#free-textual-tnput","title":"Free Textual Tnput","text":"<p><code>TextInput</code> is suitable for free-form text messages, ideal for open-ended queries and dialogues. This function allows the student to request exam questions from the teacher and provides some suggestions using <code>TextInput</code>.</p> <pre><code>def retrieve_exam_questions(\n    message: Annotated[str, \"Message for examiner\"]\n) -&gt; Optional[str]:\n    try:\n        msg = TextInput(\n            sender=\"student\",\n            recipient=\"teacher\",\n            prompt=message,\n            suggestions=[\n                \"1) Mona Lisa\",\n                \"2) Innovations\",\n                \"3) Florence at the time of Leonardo\",\n                \"4) The Last Supper\",\n            ],\n        )\n        return ui.process_message(msg)\n    except Exception as e:\n        return f\"retrieve_exam_questions() FAILED! {e}\"\n</code></pre>"},{"location":"user-guide/runtime/autogen/interactions/#system-info-messages","title":"System Info Messages","text":"<p><code>SystemMessage</code> is used for operational or system-related instructions, such as logging data, and is not part of the agent dialogue. This function logs the final answers after the student completes the discussion using <code>SystemMessage</code> to log the event.</p> <pre><code>def write_final_answers(message: Annotated[str, \"Message for examiner\"]) -&gt; str:\n    try:\n        msg = SystemMessage(\n            sender=\"function call logger\",\n            recipient=\"system\",\n            message={\n                \"operation\": \"storing final answers\",\n                \"content\": message,\n            },\n        )\n        ui.process_message(msg)\n        return \"Final answers stored.\"\n    except Exception as e:\n        return f\"write_final_answers() FAILED! {e}\"\n</code></pre>"},{"location":"user-guide/runtime/autogen/interactions/#multiple-choice","title":"Multiple Choice","text":"<p><code>MultipleChoice</code> is used for structured responses where the user must select one of several predefined options. This function retrieves the final grade for the student's submitted answers using <code>MultipleChoice</code>, presenting the user with grading options.</p> <pre><code>def get_final_grade(\n    message: Annotated[str, \"Message for examiner\"]\n) -&gt; Optional[str]:\n    try:\n        msg = MultipleChoice(\n            sender=\"student\",\n            recipient=\"teacher\",\n            prompt=message,\n        )\n        return ui.process_message(msg)\n    except Exception as e:\n        return f\"get_final_grade() FAILED! {e}\"\n</code></pre>"},{"location":"user-guide/runtime/autogen/interactions/#other-types-of-messages","title":"Other Types of Messages","text":"<p>All supported messages are subclasses of the IOMessage base class.</p>"},{"location":"user-guide/runtime/autogen/interactions/#registering-the-functions","title":"Registering the Functions","text":"<p>We now register these functions with the workflow, linking the <code>student_agent</code> as the caller and the <code>teacher_agent</code> as the executor.</p> <pre><code>register_function(\n    retrieve_exam_questions,\n    caller=student_agent,\n    executor=teacher_agent,\n    name=\"retrieve_exam_questions\",\n    description=\"Get exam questions from examiner\",\n)\n\nregister_function(\n    write_final_answers,\n    caller=student_agent,\n    executor=teacher_agent,\n    name=\"write_final_answers\",\n    description=\"Write a final answers to exam questions to examiner, but only after discussing with the tutor first.\",\n)\n\nregister_function(\n    get_final_grade,\n    caller=student_agent,\n    executor=teacher_agent,\n    name=\"get_final_grade\",\n    description=\"Get the final grade after submitting the answers.\",\n)\n</code></pre>"},{"location":"user-guide/runtime/autogen/interactions/#define-fastagency-application","title":"Define FastAgency Application","text":"<p>Finally, we'll define the entire application:</p> <pre><code>import os\nfrom typing import Annotated, Any, Dict, Optional\n\nfrom autogen import register_function\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import FastAgency\nfrom fastagency import UI\nfrom fastagency.base import MultipleChoice, SystemMessage, TextInput\nfrom fastagency.ui.console import ConsoleUI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\n\nllm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n\nwf = AutoGenWorkflows()\n\n\n@wf.register(name=\"exam_practice\", description=\"Student and teacher chat\")  # type: ignore[type-var]\ndef exam_learning(ui: UI, initial_message: str, session_id: str) -&gt; Optional[str]:\n\n    def is_termination_msg(msg: dict[str, Any]) -&gt; bool:\n        return msg[\"content\"] is not None and \"TERMINATE\" in msg[\"content\"]\n\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student writing a practice test. Your task is as follows:\\n\"\n        \"  1) Retrieve exam questions by calling a function.\\n\"\n        \"  2) Write a draft of proposed answers and engage in dialogue with your tutor.\\n\"\n        \"  3) Once you are done with the dialogue, register the final answers by calling a function.\\n\"\n        \"  4) Retrieve the final grade by calling a function.\\n\"\n        \"Finally, terminate the chat by saying 'TERMINATE'.\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n        is_termination_msg=is_termination_msg,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a teacher.\",\n        llm_config=llm_config,\n        human_input_mode=\"NEVER\",\n        is_termination_msg=is_termination_msg,\n    )\n\n    def retrieve_exam_questions(\n        message: Annotated[str, \"Message for examiner\"]\n    ) -&gt; Optional[str]:\n        try:\n            msg = TextInput(\n                sender=\"student\",\n                recipient=\"teacher\",\n                prompt=message,\n                suggestions=[\n                    \"1) Mona Lisa\",\n                    \"2) Innovations\",\n                    \"3) Florence at the time of Leonardo\",\n                    \"4) The Last Supper\",\n                    \"5) Vitruvian Man\",\n                ],\n            )\n            return ui.process_message(msg)\n        except Exception as e:\n            return f\"retrieve_exam_questions() FAILED! {e}\"\n\n    def write_final_answers(message: Annotated[str, \"Message for examiner\"]) -&gt; str:\n        try:\n            msg = SystemMessage(\n                sender=\"function call logger\",\n                recipient=\"system\",\n                message={\n                    \"operation\": \"storing final answers\",\n                    \"content\": message,\n                },\n            )\n            ui.process_message(msg)\n            return \"Final answers stored.\"\n        except Exception as e:\n            return f\"write_final_answers() FAILED! {e}\"\n\n    def get_final_grade(\n        message: Annotated[str, \"Message for examiner\"]\n    ) -&gt; Optional[str]:\n        try:\n            msg = MultipleChoice(\n                sender=\"student\",\n                recipient=\"teacher\",\n                prompt=message,\n                choices=[\"A\", \"B\", \"C\", \"D\", \"F\"],\n            )\n            return ui.process_message(msg)\n        except Exception as e:\n            return f\"get_final_grade() FAILED! {e}\"\n\n    register_function(\n        retrieve_exam_questions,\n        caller=student_agent,\n        executor=teacher_agent,\n        name=\"retrieve_exam_questions\",\n        description=\"Get exam questions from examiner\",\n    )\n\n    register_function(\n        write_final_answers,\n        caller=student_agent,\n        executor=teacher_agent,\n        name=\"write_final_answers\",\n        description=\"Write a final answers to exam questions to examiner, but only after discussing with the tutor first.\",\n    )\n\n    register_function(\n        get_final_grade,\n        caller=student_agent,\n        executor=teacher_agent,\n        name=\"get_final_grade\",\n        description=\"Get the final grade after submitting the answers.\",\n    )\n\n    chat_result = teacher_agent.initiate_chat(\n        student_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=10,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n\n\napp = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre>"},{"location":"user-guide/runtime/autogen/interactions/#run-application","title":"Run Application","text":"<p>Once everything is set up, you can run your FastAgency application using the following command:</p> <pre><code>fastagency run\n</code></pre>"},{"location":"user-guide/runtime/crewai/basics/","title":"CrewAI in FastAgency (Coming Soon)","text":"<p>The CrewAI runtime is an exciting upcoming feature in FastAgency, designed to expand the framework\u2019s capabilities for building sophisticated multi-agent workflows. CrewAI will enable agents to collaborate in dynamic and scalable environments, allowing for more complex use cases that involve multiple agents working together to achieve shared goals.</p> <p>Stay tuned for more updates on CrewAI as it is integrated into FastAgency. Once released, it will provide a powerful new option for building intelligent, multi-agent applications.</p> <p>Check back soon for detailed documentation and usage examples! For real-time updates and to join the discussion, visit our Discord channel.</p>"},{"location":"user-guide/testing/","title":"Testing (Coming Soon)","text":"<p>FastAgency is working on introducing a comprehensive testing framework to help developers ensure the reliability and correctness of their multi-agent workflows. This upcoming feature will allow you to write and execute tests for your workflows, ensuring agents behave as expected under various scenarios. The testing tools will seamlessly integrate into your development pipeline, enabling continuous integration (CI) support and ensuring that your applications remain robust and reliable as they scale.</p>"},{"location":"user-guide/testing/#key-features-planned","title":"Key Features (Planned):","text":"<ul> <li> <p>Automated Workflow Testing: Define tests to simulate agent interactions and verify correct behavior.</p> </li> <li> <p>CI Integration: Easily integrate tests into your continuous integration pipelines for automated validation.</p> </li> <li> <p>Mocking External APIs: Simulate external API responses to test how agents handle external data sources.</p> </li> </ul> <p>Stay tuned for more updates! To get the latest news and join the discussion, visit our Discord channel.</p> <p>Check back soon for detailed documentation and examples once the testing framework is available!</p>"},{"location":"user-guide/ui/","title":"User Interfaces","text":"<p>FastAgency provides multiple ways to interact with and manage your multi-agent workflows through various user interface (UI) options. These interfaces enable developers to interact with agents in different environments\u2014whether it\u2019s a simple text-based console interface for quick testing or a web-based interface for more user-friendly interaction. Each UI option is designed to suit different development needs, from early-stage prototyping to fully deployed web applications.</p> <p>Below is an overview of the supported UIs, with links to their respective pages for more detailed information.</p>"},{"location":"user-guide/ui/#available-user-interfaces","title":"Available User Interfaces","text":""},{"location":"user-guide/ui/#1-consoleui","title":"1. ConsoleUI","text":"<p>The ConsoleUI provides a command-line interface for interacting with FastAgency's agent workflows. It\u2019s an ideal choice for developers who need to quickly test and prototype workflows directly in the terminal.</p> <p>Learn more about ConsoleUI \u2192</p>"},{"location":"user-guide/ui/#2-mesopui","title":"2. MesopUI","text":"<p>The MesopUI is a web-based interface that enables users to interact with agents through a browser. This UI is designed for applications that need a more graphical and interactive experience for users.</p> <p>Learn more about MesopUI \u2192</p>"},{"location":"user-guide/ui/#3-fastapi-ui-coming-soon","title":"3. FastAPI UI (Coming Soon)","text":"<p>FastAgency will soon introduce FastAPI UI support, which will allow you to build multi-agent systems with a FastAPI backend. This will enable seamless integration with RESTful APIs for modern web applications.</p> <p>Learn more about FastAPI UI (Coming Soon) \u2192</p> <p>Each of these UI options is designed to cater to different stages of the development lifecycle, providing flexibility whether you're prototyping or deploying a production-ready application. Stay tuned for updates, and if you have any questions or want to join the community, visit our Discord channel.</p>"},{"location":"user-guide/ui/console/basics/","title":"Console","text":"<p>ConsoleUI in FastAgency provides a text-based interface for interacting with multi-agent workflows directly from the command line. This interface allows developers to quickly test and prototype workflows without needing to set up a graphical or web-based interface, making it an excellent tool for early-stage development and debugging.</p> <p>Below is an example that demonstrates how to set up a simple learning conversation between a student and a teacher using ConsoleUI.</p>"},{"location":"user-guide/ui/console/basics/#example-student-and-teacher-learning-chat","title":"Example: Student and Teacher Learning Chat","text":"<p>This example demonstrates how to create a workflow where a student agent interacts with a teacher agent. The student asks questions, and the teacher provides responses, simulating a learning environment. The interaction is facilitated through the console using ConsoleUI.</p>"},{"location":"user-guide/ui/console/basics/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":""},{"location":"user-guide/ui/console/basics/#1-import-required-modules","title":"1. Import Required Modules","text":"<p>We begin by importing the necessary modules from FastAgency and AutoGen. These imports provide the essential building blocks for creating agents, workflows, and integrating the ConsoleUI.</p> <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import FastAgency\nfrom fastagency import UI\nfrom fastagency.ui.console import ConsoleUI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\n</code></pre> <ul> <li>ConversableAgent: This class allows the creation of agents that can engage in conversational tasks.</li> <li>FastAgency: The core class responsible for orchestrating workflows and connecting them with UIs.</li> <li>UI and ConsoleUI: These classes define the user interface for interaction, with ConsoleUI providing a text-based interface.</li> <li>AutoGenWorkflows: Manages the creation and execution of multi-agent workflows.</li> </ul>"},{"location":"user-guide/ui/console/basics/#2-configure-the-language-model-llm","title":"2. Configure the Language Model (LLM)","text":"<p>Next, we configure the language model that will power the agents. In this case, we're using GPT-4o-mini, and the API key is retrieved from the environment.</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.0,\n}\n</code></pre> <ul> <li>Explanation: The configuration specifies the LLM model and API key used for powering the conversation between agents. The temperature is set to <code>0.0</code> to ensure deterministic responses from the agents, making interactions consistent and reliable. This is particularly useful for scenarios where repeatability and predictability are required, such as testing.</li> </ul>"},{"location":"user-guide/ui/console/basics/#3-define-the-workflow-and-agents","title":"3. Define the Workflow and Agents","text":"<p>Here, we define a simple workflow where the Student Agent interacts with the Teacher Agent. The student asks questions, and the teacher responds as a math teacher. The workflow is registered using AutoGenWorkflows.</p> <pre><code>wf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_learning\", description=\"Student and teacher learning chat\")\ndef simple_workflow(ui: UI, initial_message: str, session_id: str) -&gt; str:\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student willing to learn.\",\n        llm_config=llm_config,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a math teacher.\",\n        llm_config=llm_config,\n    )\n\n    chat_result = student_agent.initiate_chat(\n        teacher_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=5,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre> <ul> <li>Agent Overview: The Student Agent is configured with a system message, \"You are a student willing to learn,\" and will initiate questions during the interaction. The Teacher Agent, on the other hand, is set up as a math teacher and will respond to the student's questions.</li> <li>Workflow Registration: The workflow is registered under the name <code>simple_learning</code>. The ConversableAgent class is used to represent both the student and teacher agents, allowing them to communicate with each other up to 5 turns before summarizing the conversation using the <code>reflection_with_llm</code> method.</li> </ul>"},{"location":"user-guide/ui/console/basics/#4-using-consoleui","title":"4. Using ConsoleUI","text":"<p>Finally, we instantiate ConsoleUI to link the workflow to a text-based console interface. This allows the user to interact with the agents via the terminal.</p> <pre><code>app = FastAgency(wf=wf, ui=ConsoleUI())\n</code></pre> <ul> <li>Explanation: Here, we set up the ConsoleUI as the user interface for the workflow, which will allow the entire agent interaction to take place within the terminal.</li> </ul>"},{"location":"user-guide/ui/console/basics/#running-the-application","title":"Running the Application","text":"<p>Once the workflow is set up, you can run the application using the FastAgency CLI. Navigate to the directory where the script is located and run the following command:</p> <pre><code>cd docs/docs_src/getting_started\nfastagency run main_console.py\n</code></pre> <p>This will launch the console interface, allowing you to input messages as the student and observe how the teacher agent responds.</p> <p>Note: Ensure that your OpenAI API key is set in the environment, as the agents rely on it to interact using GPT-4o-mini. If the API key is not correctly configured, the application may fail to retrieve LLM-powered responses.</p>"},{"location":"user-guide/ui/console/basics/#debugging-tips","title":"Debugging Tips","text":"<p>If you encounter issues running the application, ensure that: - The OpenAI API key is correctly set in your environment variables. - All necessary packages are installed, especially the <code>fastagency[autogen]</code> dependencies. - The API connection to GPT-4o-mini is functional and responds as expected.</p> <p>By using ConsoleUI, developers can rapidly test and deploy multi-agent workflows in a simple, text-based environment. The flexibility of this interface makes it ideal for prototyping agent interactions before scaling them into more complex applications. You can extend this workflow or modify the agents for various use cases, such as tutoring, customer support, or information retrieval.</p>"},{"location":"user-guide/ui/fastapi/basics/","title":"FastAPI (Coming Soon)","text":"<p>FastAgency is expanding its capabilities with support for FastAPI! This upcoming feature will allow developers to build multi-agent applications with a powerful, fully-fledged FastAPI backend, making it even easier to integrate agents into modern web applications.</p> <p>With FastAPI, you will be able to:</p> <ul> <li> <p>Seamlessly integrate FastAgency's agent workflows with FastAPI endpoints.</p> </li> <li> <p>Create RESTful APIs that interact with multi-agent systems.</p> </li> <li> <p>Build scalable, high-performance web applications powered by FastAgency agents.</p> </li> </ul> <p>Stay tuned for more updates as this feature is being developed. To get the latest news and join the discussion, visit our Discord channel.</p> <p>Check back soon for detailed documentation and usage examples!</p>"},{"location":"user-guide/ui/mesop/basics/","title":"Mesop","text":"<p>MesopUI in FastAgency offers a web-based interface for interacting with multi-agent workflows. Unlike the ConsoleUI, which is text-based and runs in the command line, MesopUI provides a user-friendly browser interface, making it ideal for applications that need a more engaging, graphical interaction. MesopUI is perfect for building interactive web applications and enabling users to interact with agents in a more intuitive way.</p> <p>To install FastAgency with MesopUI support, use the following command:</p> <pre><code>pip install \"fastagency[autogen,mesop]\"\n</code></pre> <p>This command ensures that the required dependencies for both AutoGen and MesopUI are installed.</p> <p>Below, we\u2019ll demonstrate how to set up a basic student-teacher conversation using MesopUI.</p>"},{"location":"user-guide/ui/mesop/basics/#example-student-and-teacher-learning-chat","title":"Example: Student and Teacher Learning Chat","text":"<p>This example shows how to create a simple learning chat where a student agent interacts with a teacher agent. The student asks questions, and the teacher provides responses, simulating a learning environment. The conversation is facilitated through the web interface using MesopUI.</p>"},{"location":"user-guide/ui/mesop/basics/#step-by-step-breakdown","title":"Step-by-Step Breakdown","text":""},{"location":"user-guide/ui/mesop/basics/#1-import-required-modules","title":"1. Import Required Modules","text":"<p>We begin by importing the necessary modules from FastAgency and AutoGen. These imports provide the essential building blocks for creating agents, workflows, and integrating MesopUI.</p> <pre><code>import os\n\nfrom autogen.agentchat import ConversableAgent\n\nfrom fastagency import FastAgency\nfrom fastagency import UI\nfrom fastagency.ui.mesop import MesopUI\nfrom fastagency.runtime.autogen.base import AutoGenWorkflows\n</code></pre> <ul> <li>ConversableAgent: This class allows the creation of agents that can engage in conversational tasks.</li> <li>FastAgency: The core class responsible for orchestrating workflows and connecting them with UIs.</li> <li>UI and MesopUI: These classes define the user interface for interaction, with MesopUI enabling a web-based interaction.</li> <li>AutoGenWorkflows: Manages the creation and execution of multi-agent workflows.</li> </ul>"},{"location":"user-guide/ui/mesop/basics/#2-configure-the-language-model-llm","title":"2. Configure the Language Model (LLM)","text":"<p>Next, we configure the language model that powers the agents. In this case, we're using GPT-4o-mini, and the API key is retrieved from the environment.</p> <pre><code>llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-4o-mini\",\n            \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        }\n    ],\n    \"temperature\": 0.8,\n}\n</code></pre> <ul> <li>Explanation: The configuration specifies the LLM model and API key used for powering the conversation between agents. The temperature is set to <code>0.0</code> to ensure deterministic responses from the agents, making interactions consistent and reliable.</li> </ul>"},{"location":"user-guide/ui/mesop/basics/#3-define-the-workflow-and-agents","title":"3. Define the Workflow and Agents","text":"<p>Here, we define a simple workflow where the Student Agent interacts with the Teacher Agent. The student asks questions, and the teacher responds as a math teacher. The workflow is registered using AutoGenWorkflows.</p> <pre><code>wf = AutoGenWorkflows()\n\n\n@wf.register(name=\"simple_learning\", description=\"Student and teacher learning chat\")\ndef simple_workflow(ui: UI, initial_message: str, session_id: str) -&gt; str:\n    student_agent = ConversableAgent(\n        name=\"Student_Agent\",\n        system_message=\"You are a student willing to learn.\",\n        llm_config=llm_config,\n    )\n    teacher_agent = ConversableAgent(\n        name=\"Teacher_Agent\",\n        system_message=\"You are a math teacher.\",\n        llm_config=llm_config,\n    )\n\n    chat_result = student_agent.initiate_chat(\n        teacher_agent,\n        message=initial_message,\n        summary_method=\"reflection_with_llm\",\n        max_turns=5,\n    )\n\n    return chat_result.summary  # type: ignore[no-any-return]\n</code></pre> <ul> <li>Agent Overview: The Student Agent is configured with a system message, \"You are a student willing to learn,\" and will initiate questions during the interaction. The Teacher Agent, on the other hand, is set up as a math teacher and will respond to the student's questions.</li> <li>Workflow Registration: The workflow is registered under the name <code>simple_learning</code>. The ConversableAgent class is used to represent both the student and teacher agents, allowing them to communicate with each other up to 5 turns before summarizing the conversation using the <code>reflection_with_llm</code> method.</li> </ul>"},{"location":"user-guide/ui/mesop/basics/#4-using-mesopui","title":"4. Using MesopUI","text":"<p>Finally, we instantiate MesopUI to link the workflow to a web-based interface. This allows the user to interact with the agents through a web browser.</p> <pre><code>from fastagency.ui.mesop import MesopUI\napp = FastAgency(wf=wf, ui=MesopUI())\n</code></pre> <ul> <li>Explanation: Here, we set up the MesopUI as the user interface for the workflow, which will allow the entire agent interaction to take place through a web-based platform.</li> </ul>"},{"location":"user-guide/ui/mesop/basics/#running-the-application","title":"Running the Application","text":"<p>Once the workflow is set up, you can run the application using the FastAgency CLI. Navigate to the directory where the script is located and run the following command:</p> <pre><code>cd docs/docs_src/getting_started\nfastagency run main_mesop.py\n</code></pre> <p>This will launch a local web server, and you will be able to access the MesopUI interface through your browser. The web interface will display the interaction between the student and teacher agents, allowing you to input questions and see the teacher\u2019s responses.</p> <p>Note: Ensure that your OpenAI API key is set in the environment, as the agents rely on it to interact using GPT-4o-mini. If the API key is not correctly configured, the application may fail to retrieve LLM-powered responses.</p>"},{"location":"user-guide/ui/mesop/basics/#debugging-tips","title":"Debugging Tips","text":"<p>If you encounter issues running the application, ensure that: - The OpenAI API key is correctly set in your environment variables. - All necessary packages are installed, especially the <code>fastagency[autogen,mesop]</code> dependencies. - The MesopUI web interface is accessible from the browser, and no firewall is blocking the connection.</p> <p>By using MesopUI, developers can create interactive, web-based multi-agent applications with ease. This interface is ideal for building user-friendly, browser-accessible systems, enabling users to interact with agents in a more engaging and visual environment. You can extend this workflow for more complex scenarios, such as tutoring systems, customer support, or real-time information retrieval.</p>"}]}